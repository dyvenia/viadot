{
  "metadata": {
    "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v11.json",
    "dbt_version": "1.7.10",
    "generated_at": "2024-03-26T13:01:11.621552Z",
    "invocation_id": "a0132c71-8d3b-43f9-bf6d-5f415cbeb4e9",
    "env": {},
    "project_name": "my_nesso_project",
    "project_id": "13718eaf7afb51e6735da63722f5953d",
    "user_id": null,
    "send_anonymous_usage_stats": true,
    "adapter_type": "duckdb"
  },
  "nodes": {
    "model.my_nesso_project.int_contact": {
      "database": "nesso",
      "schema": "dbt",
      "name": "int_contact",
      "resource_type": "model",
      "package_name": "my_nesso_project",
      "path": "intermediate/int_contact/int_contact.sql",
      "original_file_path": "models/intermediate/int_contact/int_contact.sql",
      "unique_id": "model.my_nesso_project.int_contact",
      "fqn": ["my_nesso_project", "intermediate", "int_contact", "int_contact"],
      "alias": "int_contact",
      "checksum": {
        "name": "sha256",
        "checksum": "1cea96f85a80fac8c205fb64693120e13a7805f285144a89af767f619e3529c1"
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "intermediate",
        "database": null,
        "tags": [],
        "meta": {
          "owners": [
            {
              "type": "Technical owner",
              "email": "None"
            },
            {
              "type": "Business owner",
              "email": "None"
            }
          ],
          "domains": [],
          "true_source": [],
          "SLA": "24 hours"
        },
        "group": null,
        "materialized": "view",
        "incremental_strategy": "merge",
        "persist_docs": {},
        "post-hook": [],
        "pre-hook": [],
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "sync_all_columns",
        "on_configuration_change": "apply",
        "grants": {},
        "packages": [],
        "docs": {
          "show": true,
          "node_color": null
        },
        "contract": {
          "enforced": false,
          "alias_types": true
        },
        "access": "protected"
      },
      "tags": [],
      "description": "Base model of the `contact` table.",
      "columns": {
        "id": {
          "name": "id",
          "description": "",
          "meta": {},
          "data_type": "BIGINT",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "accountid": {
          "name": "accountid",
          "description": "",
          "meta": {},
          "data_type": "BIGINT",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "firstname": {
          "name": "firstname",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "lastname": {
          "name": "lastname",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "contactemail": {
          "name": "contactemail",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "mailingcity": {
          "name": "mailingcity",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "country": {
          "name": "country",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "_viadot_downloaded_at_utc": {
          "name": "_viadot_downloaded_at_utc",
          "description": "",
          "meta": {},
          "data_type": "TIMESTAMP_NS",
          "constraints": [],
          "quote": true,
          "tags": []
        }
      },
      "meta": {
        "owners": [
          {
            "type": "Technical owner",
            "email": "None"
          },
          {
            "type": "Business owner",
            "email": "None"
          }
        ],
        "domains": [],
        "true_source": [],
        "SLA": "24 hours"
      },
      "group": null,
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "my_nesso_project://models/intermediate/int_contact/int_contact.yml",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "on_schema_change": "sync_all_columns",
        "incremental_strategy": "merge",
        "materialized": "view",
        "schema": "intermediate",
        "meta": {
          "owners": [
            {
              "type": "Technical owner",
              "email": "None"
            },
            {
              "type": "Business owner",
              "email": "None"
            }
          ],
          "domains": [],
          "true_source": [],
          "SLA": "24 hours"
        }
      },
      "created_at": 1711458073.882494,
      "relation_name": "\"nesso\".\"dbt\".\"int_contact\"",
      "raw_code": "with _masked as (\n    select\n      \"Id\",\n      \"AccountId\",\n      \"FirstName\",\n      \"LastName\",\n      \"ContactEMail\",\n      \"MailingCity\",\n      \"Country\",\n      \"_viadot_downloaded_at_utc\"\n    from {{ source(\"staging\", \"contact\") }}\n),\n\nrenamed as (\n    select\n        \"Id\" as \"id\",\n        \"AccountId\" as \"accountid\",\n        \"FirstName\" as \"firstname\",\n        \"LastName\" as \"lastname\",\n        \"ContactEMail\" as \"contactemail\",\n        \"MailingCity\" as \"mailingcity\",\n        \"Country\" as \"country\",\n        \"_viadot_downloaded_at_utc\" as \"_viadot_downloaded_at_utc\"\n\n    from _masked\n)\n\nselect * from renamed",
      "language": "sql",
      "refs": [],
      "sources": [["staging", "contact"]],
      "metrics": [],
      "depends_on": {
        "macros": [],
        "nodes": ["source.my_nesso_project.staging.contact"]
      },
      "compiled_path": "target/compiled/my_nesso_project/models/intermediate/int_contact/int_contact.sql",
      "compiled": true,
      "compiled_code": "with _masked as (\n    select\n      \"Id\",\n      \"AccountId\",\n      \"FirstName\",\n      \"LastName\",\n      \"ContactEMail\",\n      \"MailingCity\",\n      \"Country\",\n      \"_viadot_downloaded_at_utc\"\n    from \"nesso\".\"staging\".\"contact\"\n),\n\nrenamed as (\n    select\n        \"Id\" as \"id\",\n        \"AccountId\" as \"accountid\",\n        \"FirstName\" as \"firstname\",\n        \"LastName\" as \"lastname\",\n        \"ContactEMail\" as \"contactemail\",\n        \"MailingCity\" as \"mailingcity\",\n        \"Country\" as \"country\",\n        \"_viadot_downloaded_at_utc\" as \"_viadot_downloaded_at_utc\"\n\n    from _masked\n)\n\nselect * from renamed",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "contract": {
        "enforced": false,
        "alias_types": true,
        "checksum": null
      },
      "access": "protected",
      "constraints": [],
      "version": null,
      "latest_version": null,
      "deprecation_date": null
    },
    "model.my_nesso_project.int_account": {
      "database": "nesso",
      "schema": "dbt",
      "name": "int_account",
      "resource_type": "model",
      "package_name": "my_nesso_project",
      "path": "intermediate/int_account/int_account.sql",
      "original_file_path": "models/intermediate/int_account/int_account.sql",
      "unique_id": "model.my_nesso_project.int_account",
      "fqn": ["my_nesso_project", "intermediate", "int_account", "int_account"],
      "alias": "int_account",
      "checksum": {
        "name": "sha256",
        "checksum": "a7e1f1f4b00c3bb94c0d8d2446386a79155913cd6193b9d589ddc4254d845fbd"
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "intermediate",
        "database": null,
        "tags": [],
        "meta": {
          "owners": [
            {
              "type": "Technical owner",
              "email": "None"
            },
            {
              "type": "Business owner",
              "email": "None"
            }
          ],
          "domains": [],
          "true_source": [],
          "SLA": "24 hours"
        },
        "group": null,
        "materialized": "view",
        "incremental_strategy": "merge",
        "persist_docs": {},
        "post-hook": [],
        "pre-hook": [],
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "sync_all_columns",
        "on_configuration_change": "apply",
        "grants": {},
        "packages": [],
        "docs": {
          "show": true,
          "node_color": null
        },
        "contract": {
          "enforced": false,
          "alias_types": true
        },
        "access": "protected"
      },
      "tags": [],
      "description": "Base model of the `account` table.",
      "columns": {
        "id": {
          "name": "id",
          "description": "",
          "meta": {},
          "data_type": "BIGINT",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "email": {
          "name": "email",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "mobile": {
          "name": "mobile",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "country": {
          "name": "country",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "_viadot_downloaded_at_utc": {
          "name": "_viadot_downloaded_at_utc",
          "description": "",
          "meta": {},
          "data_type": "TIMESTAMP_NS",
          "constraints": [],
          "quote": true,
          "tags": []
        }
      },
      "meta": {
        "owners": [
          {
            "type": "Technical owner",
            "email": "None"
          },
          {
            "type": "Business owner",
            "email": "None"
          }
        ],
        "domains": [],
        "true_source": [],
        "SLA": "24 hours"
      },
      "group": null,
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "my_nesso_project://models/intermediate/int_account/int_account.yml",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "on_schema_change": "sync_all_columns",
        "incremental_strategy": "merge",
        "materialized": "view",
        "schema": "intermediate",
        "meta": {
          "owners": [
            {
              "type": "Technical owner",
              "email": "None"
            },
            {
              "type": "Business owner",
              "email": "None"
            }
          ],
          "domains": [],
          "true_source": [],
          "SLA": "24 hours"
        }
      },
      "created_at": 1711458073.8853545,
      "relation_name": "\"nesso\".\"dbt\".\"int_account\"",
      "raw_code": "with _masked as (\n    select\n      \"id\",\n      \"name\",\n      \"email\",\n      \"mobile\",\n      \"country\",\n      \"_viadot_downloaded_at_utc\"\n    from {{ source(\"staging\", \"account\") }}\n),\n\nrenamed as (\n    select\n        \"id\" as \"id\",\n        \"name\" as \"name\",\n        \"email\" as \"email\",\n        \"mobile\" as \"mobile\",\n        \"country\" as \"country\",\n        \"_viadot_downloaded_at_utc\" as \"_viadot_downloaded_at_utc\"\n\n    from _masked\n)\n\nselect * from renamed",
      "language": "sql",
      "refs": [],
      "sources": [["staging", "account"]],
      "metrics": [],
      "depends_on": {
        "macros": [],
        "nodes": ["source.my_nesso_project.staging.account"]
      },
      "compiled_path": "target/compiled/my_nesso_project/models/intermediate/int_account/int_account.sql",
      "compiled": true,
      "compiled_code": "with _masked as (\n    select\n      \"id\",\n      \"name\",\n      \"email\",\n      \"mobile\",\n      \"country\",\n      \"_viadot_downloaded_at_utc\"\n    from \"nesso\".\"staging\".\"account\"\n),\n\nrenamed as (\n    select\n        \"id\" as \"id\",\n        \"name\" as \"name\",\n        \"email\" as \"email\",\n        \"mobile\" as \"mobile\",\n        \"country\" as \"country\",\n        \"_viadot_downloaded_at_utc\" as \"_viadot_downloaded_at_utc\"\n\n    from _masked\n)\n\nselect * from renamed",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "contract": {
        "enforced": false,
        "alias_types": true,
        "checksum": null
      },
      "access": "protected",
      "constraints": [],
      "version": null,
      "latest_version": null,
      "deprecation_date": null
    },
    "model.my_nesso_project.contact": {
      "database": "nesso",
      "schema": "dbt",
      "name": "contact",
      "resource_type": "model",
      "package_name": "my_nesso_project",
      "path": "marts/sales/contact/contact.sql",
      "original_file_path": "models/marts/sales/contact/contact.sql",
      "unique_id": "model.my_nesso_project.contact",
      "fqn": ["my_nesso_project", "marts", "sales", "contact", "contact"],
      "alias": "contact",
      "checksum": {
        "name": "sha256",
        "checksum": "e36b3d2c0d12256b723b3d363505026450dfaea776234e6c988ecd2622cd7987"
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "group": null,
        "materialized": "table",
        "incremental_strategy": "merge",
        "persist_docs": {},
        "post-hook": [],
        "pre-hook": [],
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "sync_all_columns",
        "on_configuration_change": "apply",
        "grants": {},
        "packages": [],
        "docs": {
          "show": true,
          "node_color": null
        },
        "contract": {
          "enforced": false,
          "alias_types": true
        },
        "access": "protected"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "group": null,
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "on_schema_change": "sync_all_columns",
        "incremental_strategy": "merge",
        "materialized": "table"
      },
      "created_at": 1711458073.6092288,
      "relation_name": "\"nesso\".\"dbt\".\"contact\"",
      "raw_code": "select * from {{ ref('int_contact') }}",
      "language": "sql",
      "refs": [
        {
          "name": "int_contact",
          "package": null,
          "version": null
        }
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [],
        "nodes": ["model.my_nesso_project.int_contact"]
      },
      "compiled_path": "target/compiled/my_nesso_project/models/marts/sales/contact/contact.sql",
      "compiled": true,
      "compiled_code": "select * from \"nesso\".\"dbt\".\"int_contact\"",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "contract": {
        "enforced": false,
        "alias_types": true,
        "checksum": null
      },
      "access": "protected",
      "constraints": [],
      "version": null,
      "latest_version": null,
      "deprecation_date": null
    },
    "model.my_nesso_project.account": {
      "database": "nesso",
      "schema": "dbt",
      "name": "account",
      "resource_type": "model",
      "package_name": "my_nesso_project",
      "path": "marts/sales/account/account.sql",
      "original_file_path": "models/marts/sales/account/account.sql",
      "unique_id": "model.my_nesso_project.account",
      "fqn": ["my_nesso_project", "marts", "sales", "account", "account"],
      "alias": "account",
      "checksum": {
        "name": "sha256",
        "checksum": "1a428c2d7c3696496a9ed13bb0f44696052702c8c23bd52874bf7041e1d5c548"
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {
          "owners": [
            {
              "type": "Technical owner",
              "email": "mzawadzki@dyvenia.com"
            },
            {
              "type": "Business owner",
              "email": "None"
            }
          ],
          "domains": ["TestDomain"],
          "true_source": ["Manual"],
          "SLA": "24 hours"
        },
        "group": null,
        "materialized": "table",
        "incremental_strategy": "merge",
        "persist_docs": {},
        "post-hook": [],
        "pre-hook": [],
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "sync_all_columns",
        "on_configuration_change": "apply",
        "grants": {},
        "packages": [],
        "docs": {
          "show": true,
          "node_color": null
        },
        "contract": {
          "enforced": false,
          "alias_types": true
        },
        "access": "protected"
      },
      "tags": [],
      "description": "Test account table.",
      "columns": {
        "id": {
          "name": "id",
          "description": "",
          "meta": {},
          "data_type": "BIGINT",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "email": {
          "name": "email",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "mobile": {
          "name": "mobile",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "country": {
          "name": "country",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "_viadot_downloaded_at_utc": {
          "name": "_viadot_downloaded_at_utc",
          "description": "",
          "meta": {},
          "data_type": "TIMESTAMP_NS",
          "constraints": [],
          "quote": true,
          "tags": []
        }
      },
      "meta": {
        "owners": [
          {
            "type": "Technical owner",
            "email": "mzawadzki@dyvenia.com"
          },
          {
            "type": "Business owner",
            "email": "None"
          }
        ],
        "domains": ["TestDomain"],
        "true_source": ["Manual"],
        "SLA": "24 hours"
      },
      "group": null,
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "my_nesso_project://models/marts/sales/account/account.yml",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "on_schema_change": "sync_all_columns",
        "incremental_strategy": "merge",
        "materialized": "table",
        "meta": {
          "owners": [
            {
              "type": "Technical owner",
              "email": "mzawadzki@dyvenia.com"
            },
            {
              "type": "Business owner",
              "email": "None"
            }
          ],
          "domains": ["TestDomain"],
          "true_source": ["Manual"],
          "SLA": "24 hours"
        }
      },
      "created_at": 1711458073.8889043,
      "relation_name": "\"nesso\".\"dbt\".\"account\"",
      "raw_code": "select * from {{ ref('int_account') }}",
      "language": "sql",
      "refs": [
        {
          "name": "int_account",
          "package": null,
          "version": null
        }
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [],
        "nodes": ["model.my_nesso_project.int_account"]
      },
      "compiled_path": "target/compiled/my_nesso_project/models/marts/sales/account/account.sql",
      "compiled": true,
      "compiled_code": "select * from \"nesso\".\"dbt\".\"int_account\"",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "contract": {
        "enforced": false,
        "alias_types": true,
        "checksum": null
      },
      "access": "protected",
      "constraints": [],
      "version": null,
      "latest_version": null,
      "deprecation_date": null
    },
    "test.my_nesso_project.unique_account__id_.e2119e8bab": {
      "test_metadata": {
        "name": "unique",
        "kwargs": {
          "column_name": "\"id\"",
          "model": "{{ get_where_subquery(ref('account')) }}"
        },
        "namespace": null
      },
      "database": "nesso",
      "schema": "dbt",
      "name": "unique_account__id_",
      "resource_type": "test",
      "package_name": "my_nesso_project",
      "path": "unique_account__id_.sql",
      "original_file_path": "models/marts/sales/account/account.yml",
      "unique_id": "test.my_nesso_project.unique_account__id_.e2119e8bab",
      "fqn": [
        "my_nesso_project",
        "marts",
        "sales",
        "account",
        "unique_account__id_"
      ],
      "alias": "unique_account__id_",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "group": null,
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "store_failures_as": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "group": null,
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1711458073.9644363,
      "relation_name": null,
      "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "refs": [
        {
          "name": "account",
          "package": null,
          "version": null
        }
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"],
        "nodes": ["model.my_nesso_project.account"]
      },
      "compiled_path": "target/compiled/my_nesso_project/models/marts/sales/account/account.yml/unique_account__id_.sql",
      "compiled": true,
      "compiled_code": "\n    \n    \n\nselect\n    \"id\" as unique_field,\n    count(*) as n_records\n\nfrom \"nesso\".\"dbt\".\"account\"\nwhere \"id\" is not null\ngroup by \"id\"\nhaving count(*) > 1\n\n\n",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "contract": {
        "enforced": false,
        "alias_types": true,
        "checksum": null
      },
      "column_name": "\"id\"",
      "file_key_name": "models.account",
      "attached_node": "model.my_nesso_project.account"
    }
  },
  "sources": {
    "source.my_nesso_project.staging.contact": {
      "database": "nesso",
      "schema": "staging",
      "name": "contact",
      "resource_type": "source",
      "package_name": "my_nesso_project",
      "path": "models/sources/staging/staging.yml",
      "original_file_path": "models/sources/staging/staging.yml",
      "unique_id": "source.my_nesso_project.staging.contact",
      "fqn": ["my_nesso_project", "sources", "staging", "staging", "contact"],
      "source_name": "staging",
      "source_description": "The input layer to the data modelling project.",
      "loader": "",
      "identifier": "contact",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": "_viadot_downloaded_at_utc::timestamp",
      "freshness": {
        "warn_after": {
          "count": 24,
          "period": "hour"
        },
        "error_after": {
          "count": 48,
          "period": "hour"
        },
        "filter": null
      },
      "external": null,
      "description": "## `contact` table\n\n### \ud83d\udcdd Details\n-\n\n### \ud83d\udcda External docs\n-",
      "columns": {
        "Id": {
          "name": "Id",
          "description": "",
          "meta": {},
          "data_type": "BIGINT",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "AccountId": {
          "name": "AccountId",
          "description": "",
          "meta": {},
          "data_type": "BIGINT",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "FirstName": {
          "name": "FirstName",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "LastName": {
          "name": "LastName",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "ContactEMail": {
          "name": "ContactEMail",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "MailingCity": {
          "name": "MailingCity",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "Country": {
          "name": "Country",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "_viadot_downloaded_at_utc": {
          "name": "_viadot_downloaded_at_utc",
          "description": "",
          "meta": {},
          "data_type": "TIMESTAMP_NS",
          "constraints": [],
          "quote": true,
          "tags": []
        }
      },
      "meta": {
        "owners": [
          {
            "type": "Technical owner",
            "email": "None"
          },
          {
            "type": "Business owner",
            "email": "None"
          }
        ],
        "domains": [],
        "true_source": [],
        "SLA": "24 hours"
      },
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "\"nesso\".\"staging\".\"contact\"",
      "created_at": 1711458073.9675865
    },
    "source.my_nesso_project.staging.account": {
      "database": "nesso",
      "schema": "staging",
      "name": "account",
      "resource_type": "source",
      "package_name": "my_nesso_project",
      "path": "models/sources/staging/staging.yml",
      "original_file_path": "models/sources/staging/staging.yml",
      "unique_id": "source.my_nesso_project.staging.account",
      "fqn": ["my_nesso_project", "sources", "staging", "staging", "account"],
      "source_name": "staging",
      "source_description": "The input layer to the data modelling project.",
      "loader": "",
      "identifier": "account",
      "quoting": {
        "database": null,
        "schema": null,
        "identifier": null,
        "column": null
      },
      "loaded_at_field": "_viadot_downloaded_at_utc::timestamp",
      "freshness": {
        "warn_after": {
          "count": 24,
          "period": "hour"
        },
        "error_after": {
          "count": 48,
          "period": "hour"
        },
        "filter": null
      },
      "external": null,
      "description": "## `account` table\n\n### \ud83d\udcdd Details\n-\n\n### \ud83d\udcda External docs\n-",
      "columns": {
        "id": {
          "name": "id",
          "description": "",
          "meta": {},
          "data_type": "BIGINT",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "email": {
          "name": "email",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "mobile": {
          "name": "mobile",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "country": {
          "name": "country",
          "description": "",
          "meta": {},
          "data_type": "CHARACTER VARYING(256)",
          "constraints": [],
          "quote": true,
          "tags": []
        },
        "_viadot_downloaded_at_utc": {
          "name": "_viadot_downloaded_at_utc",
          "description": "",
          "meta": {},
          "data_type": "TIMESTAMP_NS",
          "constraints": [],
          "quote": true,
          "tags": []
        }
      },
      "meta": {
        "owners": [
          {
            "type": "Technical owner",
            "email": "None"
          },
          {
            "type": "Business owner",
            "email": "None"
          }
        ],
        "domains": [],
        "true_source": [],
        "SLA": "24 hours"
      },
      "source_meta": {},
      "tags": [],
      "config": {
        "enabled": true
      },
      "patch_path": null,
      "unrendered_config": {},
      "relation_name": "\"nesso\".\"staging\".\"account\"",
      "created_at": 1711458073.9678516
    }
  },
  "macros": {
    "macro.my_nesso_project.hash": {
      "name": "hash",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/hash_column.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/hash_column.sql",
      "unique_id": "macro.my_nesso_project.hash",
      "macro_sql": "{%- macro hash(field) -%} {{ return(adapter.dispatch(\"hash\", \"dbt\")(field)) }} {%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.my_nesso_project.default__hash"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.8041039,
      "supported_languages": null
    },
    "macro.my_nesso_project.default__hash": {
      "name": "default__hash",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/hash_column.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/hash_column.sql",
      "unique_id": "macro.my_nesso_project.default__hash",
      "macro_sql": "{%- macro default__hash(field) -%}\n    md5(cast({{ adapter.quote(field) }} as {{ api.Column.translate_type(\"string\") }}))\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.8045254,
      "supported_languages": null
    },
    "macro.my_nesso_project.databricks__hash": {
      "name": "databricks__hash",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/hash_column.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/hash_column.sql",
      "unique_id": "macro.my_nesso_project.databricks__hash",
      "macro_sql": "{%- macro databricks__hash(field) -%}\n    sha2(cast({{ adapter.quote(field) }} as {{ api.Column.translate_type(\"string\") }}), 256)\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.8048182,
      "supported_languages": null
    },
    "macro.my_nesso_project.sqlserver__hash": {
      "name": "sqlserver__hash",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/hash_column.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/hash_column.sql",
      "unique_id": "macro.my_nesso_project.sqlserver__hash",
      "macro_sql": "{%- macro sqlserver__hash(field) -%}\n    HASHBYTES(\n        'SHA2_256', cast({{ adapter.quote(field) }} as {{ api.Column.translate_type(\"string\") }})\n    )\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.8051467,
      "supported_languages": null
    },
    "macro.my_nesso_project.create_description_markdown": {
      "name": "create_description_markdown",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/create_description_markdown.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/create_description_markdown.sql",
      "unique_id": "macro.my_nesso_project.create_description_markdown",
      "macro_sql": "{% macro create_description_markdown(relation_name=none, docs_name=none, schema=none) %}\n\n    {% if docs_name is none %} {% set docs_name = schema + \"_\" + relation_name %} {% endif %}\n\n    {% if execute %}\n        {{ print(\"{% docs \" + docs_name + \" %}\") }}\n        {{ print(\"## `\" + relation_name + \"` table\") }}\n\n        {{ print(\"\") }}\n\n        {{ print(\"### \ud83d\udcdd Details\") }}\n        {{ print(\"-\") }}\n\n        {{ print(\"\") }}\n\n        {{ print(\"### \ud83d\udcda External docs\") }}\n        {{ print(\"-\") }}\n        {{ print(\"{% enddocs %}\") }}\n    {%- endif -%}\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.806953,
      "supported_languages": null
    },
    "macro.my_nesso_project.print_profile_docs": {
      "name": "print_profile_docs",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/dbt_profiler.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/dbt_profiler.sql",
      "unique_id": "macro.my_nesso_project.print_profile_docs",
      "macro_sql": "{% macro print_profile_docs(\n    relation=none,\n    relation_name=none,\n    docs_name=none,\n    schema=none,\n    database=none,\n    exclude_measures=[],\n    include_columns=[],\n    exclude_columns=[],\n    max_rows=none,\n    max_columns=13,\n    max_column_width=30,\n    max_precision=none\n) %}\n    {%- set results = get_profile_table(\n        relation=relation,\n        relation_name=relation_name,\n        schema=schema,\n        database=database,\n        exclude_measures=exclude_measures,\n        include_columns=include_columns,\n        exclude_columns=exclude_columns,\n    ) -%}\n\n    {% if docs_name is none %} {% set docs_name = schema + \"_\" + relation_name %} {% endif %}\n\n    {% if execute %}\n        {{ print(\"{% docs \" + docs_name + \"  %}\") }}\n        {{ print(\"## `\" + relation_name + \"` table\") }}\n\n        {{ print(\"\") }}\n\n        {{ print(\"### \ud83d\udcdd Details\") }}\n        {{ print(\"-\") }}\n\n        {{ print(\"\") }}\n\n        {{ print(\"### \ud83d\udcca Profiling\") }}\n        {% do results.print_table(\n            max_rows=max_rows,\n            max_columns=max_columns,\n            max_column_width=max_column_width,\n            max_precision=max_precision,\n        ) %}\n\n        {{ print(\"\") }}\n\n        {{ print(\"### \ud83d\udcda External docs\") }}\n        {{ print(\"-\") }}\n        {{ print(\"{% enddocs %}\") }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": ["macro.my_nesso_project.get_profile_table"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.8356276,
      "supported_languages": null
    },
    "macro.my_nesso_project.get_profile_table": {
      "name": "get_profile_table",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/dbt_profiler.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/dbt_profiler.sql",
      "unique_id": "macro.my_nesso_project.get_profile_table",
      "macro_sql": "{% macro get_profile_table(\n    relation=none,\n    relation_name=none,\n    schema=none,\n    database=none,\n    exclude_measures=[],\n    include_columns=[],\n    exclude_columns=[]\n) %}\n\n    {%- set relation = dbt_profiler.get_relation(\n        relation=relation, relation_name=relation_name, schema=schema, database=database\n    ) -%}\n    {%- set profile_sql = get_profile(\n        relation=relation,\n        exclude_measures=exclude_measures,\n        include_columns=include_columns,\n        exclude_columns=exclude_columns,\n    ) -%}\n    {{ log(profile_sql, info=False) }}\n    {% set results = run_query(profile_sql) %}\n    {% set results = results.rename(results.column_names | map(\"lower\")) %}\n    {% do return(results) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.get_relation",
          "macro.my_nesso_project.get_profile",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.8369079,
      "supported_languages": null
    },
    "macro.my_nesso_project.databricks__type_string": {
      "name": "databricks__type_string",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/dbt_profiler.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/dbt_profiler.sql",
      "unique_id": "macro.my_nesso_project.databricks__type_string",
      "macro_sql": "\n\n\n{%- macro databricks__type_string() -%} string {%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.837046,
      "supported_languages": null
    },
    "macro.my_nesso_project.get_profile": {
      "name": "get_profile",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/dbt_profiler.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/dbt_profiler.sql",
      "unique_id": "macro.my_nesso_project.get_profile",
      "macro_sql": "{% macro get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[]) %}\n    {{\n        return(\n            adapter.dispatch(\"get_profile\", macro_namespace=\"dbt_profiler\")(\n                relation, exclude_measures, include_columns, exclude_columns\n            )\n        )\n    }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.my_nesso_project.default__get_profile"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.8375778,
      "supported_languages": null
    },
    "macro.my_nesso_project.default__get_profile": {
      "name": "default__get_profile",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/dbt_profiler.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/dbt_profiler.sql",
      "unique_id": "macro.my_nesso_project.default__get_profile",
      "macro_sql": "{% macro default__get_profile(\n    relation, exclude_measures=[], include_columns=[], exclude_columns=[]\n) %}\n\n    {%- if include_columns and exclude_columns -%}\n        {{\n            exceptions.raise_compiler_error(\n                \"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\"\n            )\n        }}\n    {%- endif -%}\n\n    {%- set all_measures = [\n        \"row_count\",\n        \"not_null_proportion\",\n        \"distinct_proportion\",\n        \"distinct_count\",\n        \"is_unique\",\n        \"min\",\n        \"max\",\n        \"avg\",\n        \"std_dev_population\",\n        \"std_dev_sample\",\n    ] -%}\n\n    {%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n    {{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n    {% if execute %}\n        {% do dbt_profiler.assert_relation_exists(relation) %}\n\n        {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n        {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n        {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n        {{ log(\"Relation columns: \" ~ relation_column_names | join(\", \"), info=False) }}\n\n        {%- if include_columns -%}\n            {%- set profile_column_names = (\n                relation_column_names | select(\"in\", include_columns) | list\n            ) -%}\n        {%- elif exclude_columns -%}\n            {%- set profile_column_names = (\n                relation_column_names | reject(\"in\", exclude_columns) | list\n            ) -%}\n        {%- else -%} {%- set profile_column_names = relation_column_names -%}\n        {%- endif -%}\n\n        {{ log(\"Profile columns: \" ~ profile_column_names | join(\", \"), info=False) }}\n\n        {% set information_schema_columns = run_query(\n            dbt_profiler.select_from_information_schema_columns(relation)\n        ) %}\n        {% set information_schema_columns = information_schema_columns.rename(\n            information_schema_columns.column_names | map(\"lower\")\n        ) %}\n        {% set information_schema_data_types = (\n            information_schema_columns.columns[\"data_type\"].values() | map(\"lower\") | list\n        ) %}\n        {% set information_schema_column_names = (\n            information_schema_columns.columns[\"column_name\"].values()\n            | map(\"lower\")\n            | list\n        ) %}\n        {% set data_type_map = {} %}\n        {% for column_name in information_schema_column_names %}\n            {% do data_type_map.update(\n                {column_name: information_schema_data_types[loop.index - 1]}\n            ) %}\n        {% endfor %}\n        {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n        {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            cast(count(*) as numeric) as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            sum(case when {{ adapter.quote(column_name) }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) / cast(count(*) as numeric) as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) = count(*) as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type) %}cast(min({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }}){% else %}null{% endif %} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type) %}cast(max({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }}){% else %}null{% endif %} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}avg({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as avg,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}stddev_pop({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}stddev_samp({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by _column_position asc\n        {% endset %}\n\n        {% do return(profile_sql) %}\n    {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.assert_relation_exists",
          "macro.dbt.run_query",
          "macro.dbt_profiler.select_from_information_schema_columns",
          "macro.dbt_profiler.is_numeric_dtype",
          "macro.dbt_profiler.is_date_or_time_dtype",
          "macro.dbt_profiler.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.8446453,
      "supported_languages": null
    },
    "macro.my_nesso_project.databricks__get_profile": {
      "name": "databricks__get_profile",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/dbt_profiler.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/dbt_profiler.sql",
      "unique_id": "macro.my_nesso_project.databricks__get_profile",
      "macro_sql": "{% macro databricks__get_profile(\n    relation, exclude_measures=[], include_columns=[], exclude_columns=[]\n) %}\n\n    {%- if include_columns and exclude_columns -%}\n        {{\n            exceptions.raise_compiler_error(\n                \"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\"\n            )\n        }}\n    {%- endif -%}\n\n    {%- set all_measures = [\n        \"row_count\",\n        \"not_null_proportion\",\n        \"distinct_proportion\",\n        \"distinct_count\",\n        \"is_unique\",\n        \"min\",\n        \"max\",\n        \"avg\",\n        \"std_dev_population\",\n        \"std_dev_sample\",\n    ] -%}\n\n    {%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n    {{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n    {% if execute %}\n        {% do dbt_profiler.assert_relation_exists(relation) %}\n\n        {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n        {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n        {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n        {{ log(\"Relation columns: \" ~ relation_column_names | join(\", \"), info=False) }}\n\n        {%- if include_columns -%}\n            {%- set profile_column_names = (\n                relation_column_names | select(\"in\", include_columns) | list\n            ) -%}\n        {%- elif exclude_columns -%}\n            {%- set profile_column_names = (\n                relation_column_names | reject(\"in\", exclude_columns) | list\n            ) -%}\n        {%- else -%} {%- set profile_column_names = relation_column_names -%}\n        {%- endif -%}\n\n        {{ log(\"Profile columns: \" ~ profile_column_names | join(\", \"), info=False) }}\n\n        {# Get column metadata. #}\n        {% call statement(\"table_metadata\", fetch_result=True) -%}\n    describe table extended {{ relation.schema }}.{{ relation.identifier }}\n  {% endcall %}\n  {% set columns_metadata = load_result('table_metadata').table %}\n  {% set columns_metadata = columns_metadata.rename(columns_metadata.column_names | map('lower')) %}\n\n  {% set data_types = columns_metadata.columns['data_type'].values() | map('lower') | list %}\n  {% set column_names = columns_metadata.columns['col_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in column_names %}\n    {% do data_type_map.update({column_name: data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            cast(count(*) as numeric) as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            sum(case when {{ adapter.quote(column_name) }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) / cast(count(*) as numeric) as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) = count(*) as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type) %}cast(min({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }}){% else %}null{% endif %} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type) %}cast(max({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }}){% else %}null{% endif %} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}avg({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as avg,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}stddev_pop({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}stddev_samp({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  {% endset %}\n\n  {# {{ print(profile_sql) }} #}\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.assert_relation_exists",
          "macro.dbt.statement",
          "macro.dbt_profiler.is_numeric_dtype",
          "macro.dbt_profiler.is_date_or_time_dtype",
          "macro.dbt_profiler.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.8519063,
      "supported_languages": null
    },
    "macro.my_nesso_project.generate_column_yaml": {
      "name": "generate_column_yaml",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/generate_model_yaml_boilerplate.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/generate_model_yaml_boilerplate.sql",
      "unique_id": "macro.my_nesso_project.generate_column_yaml",
      "macro_sql": "{% macro generate_column_yaml(\n    column,\n    model_yaml,\n    columns_metadata_dict,\n    parent_column_name=\"\",\n    include_pii_tag=True,\n    include_data_types=True,\n    snakecase_columns=True\n) %}\n    {{ log(\"Generating YAML for column '\" ~ column.name ~ \"'...\") }}\n    {% if parent_column_name %} {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %} {% set column_name = column.name %}\n    {% endif %}\n\n    {% set column_metadata_dict = columns_metadata_dict.get(column.name, {}) %}\n    {% if include_pii_tag %} {% set tags = column_metadata_dict.get(\"tags\", []) %}\n    {% else %}\n        {% set tags = column_metadata_dict.get(\"tags\", []) | reject(\"equalto\", \"PII\") | list %}\n    {% endif %}\n\n    {% if snakecase_columns %}\n        {% do model_yaml.append(\"      - name: \" ~ adapter.quote(snake_case(column.name))) %}\n    {% else %} {% do model_yaml.append(\"      - name: \" ~ adapter.quote(column.name)) %}\n    {% endif %}\n    {% do model_yaml.append(\"        quote: true\") %}\n    {% if include_data_types %}\n        {% do model_yaml.append(\n            \"        data_type: \" ~ (column.data_type | upper)\n        ) %}\n    {% endif %}\n    {% do model_yaml.append(\n        '        description: \"' ~ column_metadata_dict.get(\"description\", \"\") ~ '\"'\n    ) %}\n    {% do model_yaml.append(\"        # tests:\") %}\n    {% do model_yaml.append(\"          # - unique\") %}\n    {% do model_yaml.append(\"          # - not_null\") %}\n    {% do model_yaml.append(\"        tags: \" ~ tags) %}\n    {% do model_yaml.append(\"\") %}\n\n    {% if column.fields | length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = generate_column_yaml(\n                child_column,\n                model_yaml,\n                column_metadata_dict,\n                parent_column_name=column_name,\n            ) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.my_nesso_project.snake_case"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.859862,
      "supported_languages": null
    },
    "macro.my_nesso_project.generate_model_yaml": {
      "name": "generate_model_yaml",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/generate_model_yaml_boilerplate.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/generate_model_yaml_boilerplate.sql",
      "unique_id": "macro.my_nesso_project.generate_model_yaml",
      "macro_sql": "{% macro generate_model_yaml(\n    model_name,\n    technical_owner=\"None\",\n    business_owner=\"None\",\n    domains=[],\n    source_systems=[],\n    tags=[],\n    upstream_metadata=True,\n    include_sla=True,\n    include_pii_tag=False,\n    include_data_types=True,\n    snakecase_columns=True,\n    base_model_prefix=none,\n    bootstrapped_base_model=False\n) %}\n    {# \nGenerate model YAML template.\n\nArgs:\n    model_name (str): The name of the model for which to generate the template.\n    technical_owner (str, optional): The technical owner of the model.\n    business_owner (str, optional): The business owner of the model.\n    domains (List[str]): The domains the model belongs to.\n    source_systems (List[str]): Sources from which the table originates, e.g., SQL Server, BigQuery, etc.\n    tags (List[str]): The tags to attach to the model.\n    upstream_metadata (bool, optional): Whether to inherit upstream model metadata.\n    include_sla (bool, optional): Whether to include the SLA meta key.\n    include_pii_tag (bool, optional): Whether to include the PII tag.\n    include_data_types (bool, optional): Whether to include the data types of column.\n    This may be useful when PII columns are already masked in the base model.\n    snakecase_columns (bool, optional): Whether to standardize upstream column names\n        to snakecase in the model.\n    base_model_prefix (str, optional): Prefix to apply to the name of the base model.\n        Defaults to empty string (no prefix).\n    bootstrapped_base_model (bool, optional): Determines whether the base model was built using \n        the `base_model bootstrap` command.\n#}  \n    \n    {# Set to True to enable debugging. #}\n    {% set info=False %}\n\n    {{\n        log(\n            \"generate_model_yaml | Generating model YAML for model '\"\n            ~ model_name\n            ~ \"'...\",\n            info=info\n        )\n    }}\n\n    {% if upstream_metadata %}\n        {% set upstream_model_metadata = get_parent_source_or_model_metadata(model_name) %}\n        {{\n            log(\n                \"generate_model_yaml | Got upstream model metadata:\\n\\n\"\n                ~ upstream_model_metadata\n                ~ \"\\n\",\n                info=info\n            )\n        }}\n        {# {% set metadata_resolved = resolve_upstream_metadata(upstream_models_metadata) %}\n        {{\n            log(\n                \"generate_model_yaml()  | Resolved upstream metadata: \\n\\n\"\n                ~ metadata_resolved\n                ~ \"\\n\",\n                info=info\n            )\n        }} #}\n    {% else %}\n        {# {% set metadata_resolved = {} %} #}\n        {% set upstream_model_metadata = {} %}\n    {% endif %}\n    \n    \n    {% set dependencies = get_model_dependencies(model_name) %}\n    {% set upstream_model_type = dependencies[\"type\"] %}\n\n    {% if base_model_prefix is none %}\n        {% set base_model_prefix = \"\" %}\n    {% else %}\n        {% if base_model_prefix and not base_model_prefix.endswith(\"_\") %}\n            {% set base_model_prefix = base_model_prefix ~ \"_\" %}\n        {% endif %}\n        {% set model_name = base_model_prefix ~ model_name %}\n    {% endif %}\n\n    {{ log(\"generate_model_yaml | Base model prefix: \" ~ base_model_prefix, info=info) }}\n\n    {# Table metadata. #}\n    {% set model_yaml = [] %}\n    {% do model_yaml.append(\"version: 2\") %}\n    {% do model_yaml.append(\"\") %}\n    {% do model_yaml.append(\"models:\") %}\n\n    {% do model_yaml.append(\"  - name: \" ~ model_name | lower) %}\n\n    {% if upstream_model_type == \"source\" %}\n        {% do model_yaml.append(\"    description: Base model of the `\" ~ model_name | replace(base_model_prefix, \"\") ~ \"` table.\") %}\n    {% else %} {% do model_yaml.append('    description: \"\"') %}\n    {% endif %}\n\n    {# {% set tags = metadata_resolved.get(\"tags\", tags) %}\n\n    {% if tags %}\n        {% do model_yaml.append('    config:')%}\n        {% do model_yaml.append('      tags: ' ~ tags)%}\n    {% endif %} #}\n\n    {{ log(\"generate_model_yaml | Adding meta key...\", info=info) }}\n\n    {% do model_yaml.append(\"    meta:\") %}\n    {% if upstream_model_metadata %}\n        {% set meta = upstream_model_metadata.get(\"meta\", {}) %}\n        {# {% set meta = metadata_resolved.get(\"meta\", {}) %} #}\n    {% else %} {% set meta = {} %}\n    {% endif %}\n\n    {# Extract owners from metadata. #}\n    {# Jinja forgets variables defined in loops -- but it has a concept of namespace as a workaround. #}\n    {% set ns = namespace(technical_owner=technical_owner, business_owner=business_owner) %} \n\n    {{ log(\"generate_model_yaml | Getting owner metadata...\", info=info) }}\n\n    {% if (technical_owner == \"None\" or business_owner == \"None\") and meta %}\n\n        {% for owner_meta in meta.get(\"owners\") %}\n            {% set typ = owner_meta.get(\"type\") %}\n            {% set email = owner_meta.get(\"email\") %}\n\n            {% if typ == \"Technical owner\" %}\n                {# {{ print(\"Setting technical owner to \" ~ email)}} #}\n                {% if not technical_owner or technical_owner == \"None\" %}\n                    {% set ns.technical_owner = email %}\n                {% endif %}\n            {% elif typ == \"Business owner\" %}\n                {# {{ print(\"Setting business owner to \" ~ email)}} #}\n                {% if not business_owner or business_owner == \"None\" %}\n                    {% set ns.business_owner = email %}\n                {% endif %}\n            {% endif %}\n\n        {% endfor %}\n    {% endif %}\n\n    {% do model_yaml.append(\"      owners:\") %}\n    {% do model_yaml.append(\"        - type: Technical owner\") %}\n    {% do model_yaml.append(\"          email: \" ~ ns.technical_owner) %}\n    {% do model_yaml.append(\"        - type: Business owner\") %}\n    {% do model_yaml.append(\"          email: \" ~ ns.business_owner) %}\n    {% do model_yaml.append(\"      domains: \" ~ meta.get(\"domains\", domains)) %}\n    {% do model_yaml.append(\"      true_source: \" ~ meta.get(\"true_source\", source_systems)) %}\n\n    {% if include_sla %}\n        {% do model_yaml.append(\"      SLA: \" ~ meta.get(\"SLA\", \"24 hours\")) %}\n    {% endif %}\n\n    {{ log(\"generate_model_yaml | Meta key added.\", info=info) }}\n\n    {% do model_yaml.append(\"    columns:\") %}\n\n    {# Separates base models created using bootstrap command\n     because they can multiple parent sources and models. #}\n    {% if upstream_model_type == \"source\" and not bootstrapped_base_model %}\n        {% set schema = dependencies[\"node\"].split(\".\")[-2] %}\n        {% set relation = source(schema, model_name | replace(base_model_prefix, \"\")) %}\n    {% else %} {% set relation = ref(model_name) %}\n    {% endif %}\n\n    {{ log(\"generate_model_yaml| Retrieving the list of columns...\", info=info) }}\n\n    {%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n    {# Column metadata. #}\n    {% if meta %}\n        {{ log(\"generate_model_yaml | Retrieving column metadata...\", info=info) }}\n        {% set columns_metadata_dict = (\n            get_parent_source_or_model_column_metadata(\n                model_name | replace(base_model_prefix, \"\")\n            )\n            if upstream_metadata\n            else {}\n        ) %}\n        {{\n            log(\n                \"generate_model_yaml | Successfully retrieved column metadata:\\n\"\n                ~ columns_metadata_dict,\n                info=info\n            )\n        }}\n    {% else %} {% set columns_metadata_dict = {} %}\n    {% endif %}\n\n    {{ log(\"generate_model_yaml | Generating column YAML...\", info=info) }}\n    {% for column in columns %}\n        {{ \n            log(\n                \"generate_model_yaml()  | Generating YAML for column: \"\n                ~ column,\n                info=info\n            )\n        }}\n        {% set model_yaml = generate_column_yaml(\n            column,\n            model_yaml,\n            columns_metadata_dict,\n            include_data_types=include_data_types,\n            include_pii_tag=False,\n            snakecase_columns=True,\n        ) %}\n        {{ log(\"generate_model_yaml()  | Generated YAML: \" ~ model_yaml, info=info) }}\n    {% endfor %}\n    {{ log(\"generate_model_yaml | Successfully generated column YAML.\", info=info) }}\n \n    {%- if execute -%}\n\n        {%- set joined = model_yaml | join(\"\\n\") -%}\n\n        {{ print(joined) }}\n        {{ log(\"generate_model_yaml()  | Final metadata:\\n\\n\" ~ joined, info=info) }}\n\n        {%- do return(joined) -%}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.my_nesso_project.get_parent_source_or_model_metadata",
          "macro.my_nesso_project.get_model_dependencies",
          "macro.my_nesso_project.get_parent_source_or_model_column_metadata",
          "macro.my_nesso_project.generate_column_yaml"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.8682132,
      "supported_languages": null
    },
    "macro.my_nesso_project.resolve_upstream_metadata": {
      "name": "resolve_upstream_metadata",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/generate_model_yaml_boilerplate.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/generate_model_yaml_boilerplate.sql",
      "unique_id": "macro.my_nesso_project.resolve_upstream_metadata",
      "macro_sql": "{% macro resolve_upstream_metadata(metadata) %}\n+    {# Set to True to enable logging to console #}\n+    {% set info = False %}\n+    {# \n+    Merge upstream metadata using the following logic:\n+    - fields of type string are taken from the first model in the list\n+    - fields of type list are merged together\n+    - for dict fields, same rules are applied to their subfields\n+    #}\n+\n+    {{ log(\"resolve_upstream_metadata()  | Got metadata:\\n\\n\" ~ metadata ~ \"\\n\", info=info) }}\n+\n+    {% set metadata_resolved = {} %}\n+    {% for model_name in metadata %}\n+        {{ log(\"resolve_upstream_metadata()  | Processing model '\" ~ model_name ~ \"'...\", info=info) }}\n+        {% set model_metadata = metadata[model_name] %}\n+\n+        {{ log(\"resolve_upstream_metadata()  | Got model metadata: \\n\\n\" ~ model_metadata ~ \"\\n\", info=info) }}\n+\n+        {% for field in model_metadata %}\n+            {# Workaround because dbt jinja doesn't have the `continue` loop control. #}\n+            {% set continue_tracker = namespace(should_continue = True) %}\n+            {% set field_content = model_metadata[field] %}\n+            {% if field not in metadata_resolved %}\n+                {% do metadata_resolved.update({field: field_content}) %}\n+            {% else %}\n+                {% if field_content is string %}\n+                    {# String - keep the value from the first encountered upstream,\n+                    as there's no way to decide which is the correct one. #}\n+\n+                    {{ log(\"resolve_upstream_metadata()  | String field found: \" ~ field ~ \": \" ~ field_content, info=info) }}\n+                    \n+                    {% set continue_tracker.should_continue = False %}\n+                {% elif field_content is mapping and continue_tracker.should_continue %}\n+                    {# A dictionary - merge the keys. #}\n+\n+                    {{ log(\"resolve_upstream_metadata()  | Dict field found: \" ~ field ~ \": \" ~ field_content, info=info) }}\n+\n+                    {% for subfield in field_content %}\n+                        {% set subfield_content = field_content[subfield] %}\n+                        {% set continue_tracker2 = namespace(should_continue = True) %}\n+                        {# Each key in the dictionary can also be a string, \n+                        list, or dict. We apply the same rules as to top-level fields.#}\n+                        {% if subfield_content is string %}\n+                            {% set continue_tracker2.should_continue = False %}\n+                        {% elif subfield_content is mapping and continue_tracker2.should_continue %}\n+                            {% do metadata_resolved[field].update({subfield: subfield_content}) %}\n+                        {% elif subfield_content is iterable and continue_tracker2.should_continue %}\n+                            {% for key in subfield_content %}\n+                                {% if key not in metadata_resolved[field][subfield] %}\n+                                    {% do metadata_resolved[field][subfield].append(key) %}\n+                                {% endif %}\n+                            {% endfor %}\n+                        {% else %}\n+                            {% do metadata_resolved[field].update({subfield: model_metadata[field]}) %}  \n+                        {% endif %}\n+                    {% endfor %}\n+                {% elif field_content is iterable and continue_tracker.should_continue %}\n+                    {# A list - append all unique items into the final list. #}\n+                    \n+                    {{ log(\"resolve_upstream_metadata()  | List field found: \" ~ field ~ \": \" ~ field_content, info=info) }}\n+\n+                    {% for key in field_content %}\n+                        {% if key not in metadata_resolved[field] %}\n+                            {% do metadata_resolved[field].append(key) %}\n+                        {% endif %}\n+                    {% endfor %}\n+                {% else %}\n+                    {% do metadata_resolved.update({field: model_metadata[field]}) %}                \n+                {% endif %}\n+            {% endif %}\n+        {% endfor %}\n+    {% endfor %}\n+\n+    {{ log(\"resolve_upstream_metadata()  | Resolved metadata:\\n\\n\" ~ metadata_resolved ~ \"\\n\", info=info) }}\n+\n+    {% do return(metadata_resolved) %}\n+\n+{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.8731985,
      "supported_languages": null
    },
    "macro.my_nesso_project.get_tables_in_schema": {
      "name": "get_tables_in_schema",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/generate_source_yaml_boilerplate.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/generate_source_yaml_boilerplate.sql",
      "unique_id": "macro.my_nesso_project.get_tables_in_schema",
      "macro_sql": "{% macro get_tables_in_schema(\n    schema_name,\n    database_name=target.database,\n    table_pattern=\"%\",\n    exclude=\"\",\n    print_result=False\n) %}\n\n    {% set tables = dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude,\n    ) %}\n\n    {% set table_list = tables | map(attribute=\"identifier\") %}\n\n    {% if print_result %} {{ print(table_list | join(\",\")) }} {% endif %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.get_relations_by_pattern"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.877712,
      "supported_languages": null
    },
    "macro.my_nesso_project.generate_source": {
      "name": "generate_source",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/generate_source_yaml_boilerplate.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/generate_source_yaml_boilerplate.sql",
      "unique_id": "macro.my_nesso_project.generate_source",
      "macro_sql": "{% macro generate_source(\n    schema_name,\n    technical_owner=none,\n    business_owner=none,\n    domains=[],\n    source_systems=[],\n    database_name=target.database,\n    generate_columns=True,\n    include_descriptions=True,\n    include_data_types=True,\n    include_table_profiling=True,\n    include_sla=True,\n    include_freshness=True,\n    loaded_at_field=\"_viadot_downloaded_at_utc::timestamp\",\n    freshness={\n        \"warn_after\": \"{ count: 24, period: hour }\",\n        \"error_after\": \"{ count: 48, period: hour }\",\n    },\n    table_pattern=\"%\",\n    exclude=\"\",\n    name=schema_name,\n    table_names=None,\n    case_sensitive_cols=True\n) %}\n    {# The default table_pattern is adapted to the postgres database. Make sure it also matches the database you intend to use #}\n    ,\n\n    {% set sources_yaml = [] %}\n\n    {% if table_names is none %}\n        {% do sources_yaml.append(\"version: 2\") %}\n        {% do sources_yaml.append(\"\") %}\n        {% do sources_yaml.append(\"sources:\") %}\n        {% do sources_yaml.append(\"  - name: \" ~ name | lower) %}\n\n        {% if database_name != target.database %}\n            {% do sources_yaml.append(\"    database: \" ~ database_name | lower) %}\n        {% endif %}\n\n        {% do sources_yaml.append(\"    schema: \" ~ schema_name | lower) %}\n        {% if include_descriptions %}\n            {% do sources_yaml.append('    description: \"\"') %}\n        {% endif %}\n        {% do sources_yaml.append(\"\\n    tables:\") %}\n\n        {% set tables = get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n    {% else %} {% set tables = table_names %}\n\n    {% endif %}\n\n    {% if table_names %} {% do sources_yaml.append(\"\") %} {% endif %}\n\n    {% for table in tables %}\n        {% do sources_yaml.append(\"\\n      - name: \" ~ table | lower) %}\n        {% if include_descriptions %}\n            \n            {% if include_table_profiling %}\n                {# Note that the doc must already exist. You can generate it beforehand with dbt-profiler. #}\n                {% do sources_yaml.append('        description: ' ~ \"'\" ~ '{{ doc(\"' ~ schema_name ~ \"_\" ~ table ~ '\") }}'  ~ \"'\") %}\n            {% else %}\n                {% do sources_yaml.append('        description: \"\"') %}\n            {% endif %}\n\n        {% endif %}\n\n        {% if include_freshness %}\n            {% do sources_yaml.append(\"        loaded_at_field: \" ~ loaded_at_field) %}\n            {% do sources_yaml.append(\"        freshness:\") %}\n            {% do sources_yaml.append(\"          warn_after: \" ~ freshness.get(\"warn_after\", \"\")) %}\n            {% do sources_yaml.append(\n                \"          error_after: \" ~ freshness.get(\"error_after\", \"\")\n            ) %}\n        {% endif %}\n\n        {% do sources_yaml.append(\"        tags: []\") %}\n\n        {% do sources_yaml.append(\"        meta:\") %}\n        {% do sources_yaml.append(\"          owners:\") %}\n        {% do sources_yaml.append(\"            - type: Technical owner\") %}\n        {% do sources_yaml.append(\"              email: \" ~ technical_owner) %}\n        {% do sources_yaml.append(\"            - type: Business owner\") %}\n        {% do sources_yaml.append(\"              email: \" ~ business_owner) %}\n        {% do sources_yaml.append(\"          domains: \" ~ domains) %}\n        {% do sources_yaml.append(\"          true_source: \" ~ source_systems) %}\n\n        {% if include_sla %} {% do sources_yaml.append('          SLA: \"24 hours\"') %} {% endif %}\n\n        {% if generate_columns %}\n            {% do sources_yaml.append(\"        columns:\") %}\n\n            {% set table_relation = api.Relation.create(\n                database=database_name, schema=schema_name, identifier=table\n            ) %}\n\n            {% set columns = adapter.get_columns_in_relation(table_relation) %}\n            {% for column in columns %}\n                {% if case_sensitive_cols %}\n                    {% do sources_yaml.append(\"          - name: \" ~ adapter.quote(column.name)) %}\n                {% else %}\n                    {% do sources_yaml.append(\n                        \"          - name: \" ~ adapter.quote(column.name) | lower\n                    ) %}\n                {% endif %}\n                {% do sources_yaml.append(\"            quote: true\") %}\n                {% if include_data_types %}\n                    {% do sources_yaml.append(\n                        \"            data_type: \" ~ (column.data_type | upper)\n                    ) %}\n                {% endif %}\n                {% if include_descriptions %}\n                    {% do sources_yaml.append('            description: \"\"') %}\n                {% endif %}\n                {% do sources_yaml.append(\"            # tests:\") %}\n                {% do sources_yaml.append(\"              # - unique\") %}\n                {% do sources_yaml.append(\"              # - not_null\") %}\n                {% do sources_yaml.append(\"            tags: []\") %}\n            {% endfor %}\n        {% endif %}\n\n    {% endfor %}\n\n    {% if execute %}\n\n        {% set joined = sources_yaml | join(\"\\n\") %} {{ print(joined) }} {% do return(joined) %}\n\n    {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.my_nesso_project.get_tables_in_schema"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.8845384,
      "supported_languages": null
    },
    "macro.my_nesso_project.generate_schema_name": {
      "name": "generate_schema_name",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/get_custom_schema.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/get_custom_schema.sql",
      "unique_id": "macro.my_nesso_project.generate_schema_name",
      "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ generate_schema_name_for_env(custom_schema_name, node) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.generate_schema_name_for_env"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.8848908,
      "supported_languages": null
    },
    "macro.my_nesso_project.get_table_columns": {
      "name": "get_table_columns",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/get_table_columns.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/get_table_columns.sql",
      "unique_id": "macro.my_nesso_project.get_table_columns",
      "macro_sql": "{%- macro get_table_columns(schema_name, table_name, database_name=target.database) -%}\n\n    {% set table_relation = api.Relation.create(\n                schema=schema_name, identifier=table_name, database=database_name\n            ) %}\n\n    {% set columns = adapter.get_columns_in_relation(table_relation) %}\n\n\n    {% set columns_dict  = {} %}\n    {% for column in columns %}\n        {% set column_name = column.name %}\n        {% set data_type = column.data_type | upper %}\n        {% do columns_dict.update({column_name: data_type})%}\n    {% endfor %}\n\n    {% if execute %}\n\n        {{ print(columns_dict) }} {% do return(columns_dict) %}\n\n    {% endif %}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.8862143,
      "supported_languages": null
    },
    "macro.my_nesso_project.get_source_pii_columns": {
      "name": "get_source_pii_columns",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/get_source_pii_columns.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/get_source_pii_columns.sql",
      "unique_id": "macro.my_nesso_project.get_source_pii_columns",
      "macro_sql": "{% macro get_source_pii_columns(dbt_project, schema, table) %}\n\n    {% if execute %}\n\n        {% set meta_columns = [] %}\n        {% set fqname = \"source\" ~ \".\" ~ dbt_project ~ \".\" ~ schema ~ \".\" ~ table %}\n        {% set columns = graph.sources[fqname][\"columns\"] %}\n\n        {% for column in columns %}\n            {% if \"PII\" in graph.sources[fqname][\"columns\"][column][\"tags\"] %}\n                {% do meta_columns.append(column) %}\n            {% endif %}\n        {% endfor %}\n\n        {{ return(meta_columns) }}\n\n    {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.8876343,
      "supported_languages": null
    },
    "macro.my_nesso_project.generate_base_model": {
      "name": "generate_base_model",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/generate_base_model.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/generate_base_model.sql",
      "unique_id": "macro.my_nesso_project.generate_base_model",
      "macro_sql": "{% macro generate_base_model(\n    source_name, table_name, dbt_project, snakecase_columns=False, leading_commas=False\n) %}\n\n    {%- set source_relation = source(source_name, table_name) -%}\n\n    {%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n    {%- set column_names = columns | map(attribute=\"name\") -%}\n\n    {%- set base_model_sql -%}\nwith _masked as (\n    select {{ '\\n      ' ~ hash_source_pii_columns(table=table_name, schema=source_name, dbt_project=dbt_project ) | trim }}\n    from {{ \"{{ source(\" ~ '\"' ~ source_name ~ '\"' ~ \", \" ~ '\"' ~ table_name ~ '\"' ~ \") }}\" }}\n),\n\nrenamed as (\n    select\n    {%- if leading_commas -%}\n        {%- for column in column_names %}\n            {{\", \" if not loop.first}}\n            {% if snakecase_columns %}\n                {{ adapter.quote(column) ~ ' as ' ~ adapter.quote(snake_case(column)) }}\n            {% else %}\n                {{ adapter.quote(column) }}\n            {% endif %}\n        {%- endfor %}\n    {% else %}\n        {% for column in column_names %}\n            {%- if snakecase_columns -%}\n                {{ adapter.quote(column) ~ ' as ' ~ adapter.quote(snake_case(column)) }}\n            {%- else -%}\n                {{ adapter.quote(column) }}\n            {%- endif -%}\n            {{\",\" if not loop.last}}\n        {% endfor %}\n    {%- endif %}\n    from _masked\n)\n\nselect * from renamed\n    {%- endset -%}\n\n    {% if execute %} {{ print(base_model_sql) }} {% do return(base_model_sql) %} {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.my_nesso_project.hash_source_pii_columns",
          "macro.my_nesso_project.snake_case"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.8906016,
      "supported_languages": null
    },
    "macro.my_nesso_project.hash_source_pii_columns": {
      "name": "hash_source_pii_columns",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/hash_source_pii_columns.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/hash_source_pii_columns.sql",
      "unique_id": "macro.my_nesso_project.hash_source_pii_columns",
      "macro_sql": "{%- macro hash_source_pii_columns(dbt_project, schema, table=None) -%}\n\n    {%- set pii_columns = get_source_pii_columns(\n        dbt_project=dbt_project, schema=schema, table=table\n    ) -%}\n\n    {% for column in pii_columns %}\n        {{ hash(column) | indent(4) }} as {{ adapter.quote(column) }},\n        {{ \"\\n\" if not loop.last else \"\\n      \" }}\n    {%- endfor -%}\n    {{ dbt_utils.star(from=source(schema, table), except=pii_columns) | indent(4) | trim }}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.my_nesso_project.get_source_pii_columns",
          "macro.my_nesso_project.hash",
          "macro.dbt_utils.star"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.8916154,
      "supported_languages": null
    },
    "macro.my_nesso_project.generate_seed_schema_yaml": {
      "name": "generate_seed_schema_yaml",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/generate_seed_yaml_boilerplate.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/generate_seed_yaml_boilerplate.sql",
      "unique_id": "macro.my_nesso_project.generate_seed_schema_yaml",
      "macro_sql": "{% macro generate_seed_schema_yaml() %}\n\n    {% set yaml = [] %}\n    {% do yaml.append(\"version: 2\") %}\n    {% do yaml.append(\"\") %}\n    {% do yaml.append(\"seeds: []\") %}\n\n    {% if execute %}\n        {% set joined = yaml | join(\"\\n\") %} {{ print(joined) }} {% do return(joined) %}\n    {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.8944848,
      "supported_languages": null
    },
    "macro.my_nesso_project.generate_seed_yaml": {
      "name": "generate_seed_yaml",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/generate_seed_yaml_boilerplate.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/generate_seed_yaml_boilerplate.sql",
      "unique_id": "macro.my_nesso_project.generate_seed_yaml",
      "macro_sql": "{% macro generate_seed_yaml(\n    seed,\n    database_name=target.database,\n    schema_name=target.schema,\n    generate_columns=True,\n    include_tags=False,\n    include_owners=True,\n    technical_owner=\"\",\n    business_owner=\"\",\n    domains=[],\n    source_systems=[],\n    case_sensitive_cols=True\n) %}\n\n    {% set yaml = [] %}\n\n    {% do yaml.append(\"  - name: \" ~ seed | lower) %}\n    {% do yaml.append('    description: \"\"') %}\n\n    {% if include_tags %} {% do yaml.append(\"    tags: []\") %} {% endif %}\n\n    {% if include_owners %}\n        {% do yaml.append(\"    meta:\") %}\n        {% do yaml.append(\"      owners:\") %}\n        {% do yaml.append(\"        - type: Technical owner\") %}\n        {% do yaml.append(\"          email: \" ~ technical_owner) %}\n        {% do yaml.append(\"        - type: Business owner\") %}\n        {% do yaml.append(\"          email: \" ~ business_owner) %}\n        {% do yaml.append(\"      domains: \" ~ domains) %}\n        {% do yaml.append(\"      true_source: \" ~ source_systems) %}\n    {% endif %}\n\n    {% if generate_columns %}\n        {% do yaml.append(\"    columns:\") %}\n\n        {% set table_relation = api.Relation.create(\n            database=database_name, schema=schema_name, identifier=seed\n        ) %}\n        {% set columns = adapter.get_columns_in_relation(table_relation) %}\n        {% for column in columns %}\n            {% if case_sensitive_cols %}\n                {% do yaml.append(\"      - name: \" ~ column.name) %}\n                {% do yaml.append(\"        quote: true\") %}\n            {% else %} {% do yaml.append(\"      - name: \" ~ column.name | lower) %}\n            {% endif %}\n            {% do yaml.append('        description: \"\"') %}\n            {% do yaml.append(\"        # tests:\") %}\n            {% do yaml.append(\"          # - unique\") %}\n            {% do yaml.append(\"          # - not_null\") %}\n            {% do yaml.append(\"          # - accepted_values:\") %}\n            {% do yaml.append('          #   values: [\"value1\", \"value2\"]') %}\n        {% endfor %}\n\n    {% endif %}\n\n    {% if execute %}\n        {% set joined = yaml | join(\"\\n\") %} {{ print(joined) }} {% do return(joined) %}\n    {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.898067,
      "supported_languages": null
    },
    "macro.my_nesso_project.redshift__list_relations_without_caching": {
      "name": "redshift__list_relations_without_caching",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/redshift_external_tables_fix.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/redshift_external_tables_fix.sql",
      "unique_id": "macro.my_nesso_project.redshift__list_relations_without_caching",
      "macro_sql": "{% macro redshift__list_relations_without_caching(schema_relation) %}\n\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n        table_catalog as database,\n        table_name as name,\n        table_schema as schema,\n        'table' as type\n    from information_schema.tables\n    where table_schema ilike '{{ schema_relation.schema }}'\n    and table_type = 'BASE TABLE'\n    union all\n    select\n      table_catalog as database,\n      table_name as name,\n      table_schema as schema,\n      case\n        when view_definition ilike '%create materialized view%'\n          then 'materialized_view'\n        else 'view'\n      end as type\n    from information_schema.views\n    where table_schema ilike '{{ schema_relation.schema }}'\n    union all\n    select \n        redshift_database_name as database,\n        tablename as name,\n        schemaname as schema,\n        'table' as type\n    from svv_external_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n\n  {{ return(load_result('list_relations_without_caching').table) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.89888,
      "supported_languages": null
    },
    "macro.my_nesso_project.snake_case": {
      "name": "snake_case",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/codegen_helpers.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/codegen_helpers.sql",
      "unique_id": "macro.my_nesso_project.snake_case",
      "macro_sql": "{%- macro snake_case(s) -%} {{ s | replace(\" \", \"_\") | replace(\"-\", \"_\") | lower }} {%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9019034,
      "supported_languages": null
    },
    "macro.my_nesso_project.get_model_dependencies": {
      "name": "get_model_dependencies",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/codegen_helpers.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/codegen_helpers.sql",
      "unique_id": "macro.my_nesso_project.get_model_dependencies",
      "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {# Set to True to enable logging #}\n    {% set info=False %}\n\n    {{ \n        log(\n            \"get_model_dependencies | Getting upstream dependencies for model '\"\n            ~ model_name\n            ~ \"'...\",\n            info=info\n        )\n    }}\n\n    {% set upstream_fqns = [] %}\n\n    {{ log(\"get_model_dependencies | Checking upstream models...\", info=info) }}\n    {% for node in graph.nodes.values() | selectattr(\"name\", \"equalto\", model_name) %}\n        {% if node.depends_on.nodes and not \"source.\" in node.depends_on.nodes[0] %}\n            {# The node depends on another model. #}\n            {{ \n                log(\n                    \"get_model_dependencies | Got the following dependencies: \"\n                    ~ node.depends_on.nodes\n                    ~ \".\",\n                    info=info\n                )\n            }}\n            {{ return({\"type\": \"model\", \"nodes\": node.depends_on.nodes}) }}\n        {% endif %}\n    {% endfor %}\n\n    {{ log(\"get_model_dependencies | Checking upstream source...\", info=info) }}\n    {% for node in graph.sources.values() | selectattr(\"name\", \"equalto\", model_name) %}\n        {{ \n            log(\n                \"get_model_dependencies | Got the following dependencies: \" ~ node, info=info\n            )\n        }}\n        {{ return({\"type\": \"source\", \"node\": node.unique_id}) }}\n    {% endfor %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9037673,
      "supported_languages": null
    },
    "macro.my_nesso_project.get_source_or_model_column_metadata": {
      "name": "get_source_or_model_column_metadata",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/codegen_helpers.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/codegen_helpers.sql",
      "unique_id": "macro.my_nesso_project.get_source_or_model_column_metadata",
      "macro_sql": "{% macro get_source_or_model_column_metadata(model_name, model_type=\"model\") %}\n    {# \nGet column metadata (description and tags) for a model or source.\n\nReturns: Dict[str, Dict[str, Any]]\n\nExample:\n>>> dbt run-operation get_source_or_model_column_metadata --args '{\"model_name\": \"c4c_contact\", \"model_type\": \"model\"}'\n>>> {\"id\": {\"description\": \"A\", \"tags\": []}}\n#}\n    {% if model_type == \"model\" %} {% set nodes = graph.nodes.values() %}\n    {% else %} {% set nodes = graph.sources.values() %}\n    {% endif %}\n\n    {% set columns_metadata_dict = {} %}\n    {% for node in nodes | selectattr(\"name\", \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do columns_metadata_dict.update(\n                {\n                    col_name: {\n                        \"description\": col_values.description,\n                        \"tags\": col_values.tags,\n                    }\n                }\n            ) %}\n        {% endfor %}\n    {% endfor %}\n\n    {{ return(columns_metadata_dict) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9050193,
      "supported_languages": null
    },
    "macro.my_nesso_project.get_parent_source_or_model_column_metadata": {
      "name": "get_parent_source_or_model_column_metadata",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/codegen_helpers.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/codegen_helpers.sql",
      "unique_id": "macro.my_nesso_project.get_parent_source_or_model_column_metadata",
      "macro_sql": "{% macro get_parent_source_or_model_column_metadata(model_name) %}\n    {# \nGet column metadata (description and tags) for the model's or source's\nparent source or model.\n\nThis is useful for automatically populating YAML files of downstream models\nwith the information already provided in upstream (for example, if a view\nuses a field from a source amd this field's description is already available \nin the source's YAML file).\n\nNote that if the same column name exists in multiple upstream models, \nthe description will be overwritten at each loop and the final one\nwill be taken from the model that happens to be the last in the loop. \n\nReturns: Dict[str, Dict[str, Any]]\n\nExample:\n>>> dbt run-operation get_parent_source_or_model_column_metadata --args '{\"model_name\": \"c4c_contact\"}'\n>>> {\"id\": {\"description\": \"B\", \"tags\": []}}\n#}\n    {# Set to True to enable logging to console #}\n    {% set info = False %}\n\n    {{\n        log(\n            \"get_parent_source_or_model_column_metadata | Getting column-level metadata for \"\n            ~ model_type\n            ~ \" '\"\n            ~ model_name\n            ~ \"'...\",\n            info=info\n        )\n    }}\n\n    {% if execute %}\n        {% set dependencies = get_model_dependencies(model_name) %}\n        {% set model_type = dependencies[\"type\"] %}\n\n        {# Note we immediately return `column_metadata`, as outside the if/else, it's magically set to None. #}\n        {% if model_type == \"model\" %}\n            {% for full_model in dependencies[\"nodes\"] %}\n                {% set upstream_model_name = full_model.split(\".\")[-1] %}\n                {% set column_metadata = get_source_or_model_column_metadata(\n                    model_name=upstream_model_name, model_type=model_type\n                ) %}\n                {{\n                    log(\n                        \"get_parent_source_or_model_column_metadata()  | Got model column metadata:\\n\\n\"\n                        ~ column_metadata\n                        ~ \"\\n\",\n                        info=info\n                    )\n                }}\n                {{ return(column_metadata) }}\n            {% endfor %}\n        {% endif %}\n\n        {% if model_type == \"source\" %}\n            {% set upstream_model_name = dependencies[\"node\"].split(\".\")[-1] %}\n            {% set column_metadata = get_source_or_model_column_metadata(\n                model_name=upstream_model_name, model_type=model_type\n            ) %}\n            {{\n                log(\n                    \"get_parent_source_or_model_column_metadata()  | Got source column metadata:\\n\\n\"\n                    ~ column_metadata\n                    ~ \"\\n\",\n                    info=info\n                )\n            }}\n            {{ return(column_metadata) }}\n        {% endif %}\n\n    {% endif %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.my_nesso_project.get_model_dependencies",
          "macro.my_nesso_project.get_source_or_model_column_metadata"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9069552,
      "supported_languages": null
    },
    "macro.my_nesso_project.get_source_or_model_metadata": {
      "name": "get_source_or_model_metadata",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/codegen_helpers.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/codegen_helpers.sql",
      "unique_id": "macro.my_nesso_project.get_source_or_model_metadata",
      "macro_sql": "{% macro get_source_or_model_metadata(model_name, model_type=\"model\") %}\n    {# \nGet table metadata (description, tags, and meta) for a model or source.\n\nNote that if there are multiple upstream models, the metadata will\nbe overwritten at each loop and the final one will be taken from the model \nthat happens to be the last in the loop. \n\nReturns: Dict[str, Union[str, List[str], Dict[str, Any]]]\n\nExample:\n>>> dbt run-operation get_source_or_model_metadata --args '{\"model_name\": \"c4c_contact\", \"model_type\": \"model\"}'\n>>> {\"description\": \"A\", \"tags\": [], \"meta\": {\"owner\": js@example.com}}\n#}\n    {# Set to True to enable debugging #}\n    {% set info = False %}\n\n    {{ \n        log(\n            \"get_source_or_model_metadata()  | Getting model-level metadata for \" \n            ~ model_type \n            ~ \" '\" \n            ~ model_name \n            ~ \"'...\",\n            info=info\n        )\n    }}\n\n    {% if model_type == \"model\" %} {% set nodes = graph.nodes.values() %}\n    {% else %} {% set nodes = graph.sources.values() %}\n    {% endif %}\n\n    {% set table_metadata_dict = {} %}\n    {% for node in nodes | selectattr(\"name\", \"equalto\", model_name) %}\n        {{ log(node, info=info) }}\n        {% do table_metadata_dict.update(\n            {\"description\": node.description, \"tags\": node.tags, \"meta\": node.meta}\n        ) %}\n    {% endfor %}\n\n    {{\n        log(\n            \"get_source_or_model_metadata()  | Successfully retrieved model-level metadata for \"\n            ~ model_type\n            ~ \" '\"\n            ~ model_name\n            ~ \"':\\n\"\n            ~ table_metadata_dict,\n            info=info\n        )\n    }}\n\n    {{ return(table_metadata_dict) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.908675,
      "supported_languages": null
    },
    "macro.my_nesso_project.get_parent_source_or_model_metadata": {
      "name": "get_parent_source_or_model_metadata",
      "resource_type": "macro",
      "package_name": "my_nesso_project",
      "path": "dbt_packages/nesso_macros/macros/codegen_helpers.sql",
      "original_file_path": "dbt_packages/nesso_macros/macros/codegen_helpers.sql",
      "unique_id": "macro.my_nesso_project.get_parent_source_or_model_metadata",
      "macro_sql": "{% macro get_parent_source_or_model_metadata(model_name) %}\n{#\nGet table metadata (description, tags, and meta) for the model's parent\nsource(s) and/or model(s).\n\nThis is useful for automatically populating YAML files of downstream models\nwith the information already provided in upstream (eg. when defining\nbase views).\n\nReturns: Dict[str, Union[str, List[str], Dict[str, Any]]]\n\nExample:\n>>> dbt run-operation get_parent_source_or_model_metadata --args '{\"model_name\": \"c4c_contact\"}'\n>>> {\"description\": \"B\", \"tags\": [], \"meta\": {\"owner\": js@example.com}}\n#}\n    {% if execute %}\n\n        {# Set to True to enable debugging. #}\n        {% set info=False %}\n\n        {{ log(\"get_parent_source_or_model_metadata | Getting upstream metadata...\", info=info) }}\n\n        {% set dependencies = get_model_dependencies(model_name) %}\n        {{\n            log(\n                \"get_parent_source_or_model_metadata()  | Got the following dependencies: \"\n                ~ dependencies,\n                info=info\n            )\n        }}\n        {% set model_type = dependencies[\"type\"] %}\n        \n        {# Note we immediately return `model_metadata`, as outside the if/else, it's magically set to None. #}\n        {% if model_type == \"model\" %}\n            {% for full_model in dependencies[\"nodes\"] %}\n                {% set model_name = full_model.split(\".\")[-1] %}\n                {% set model_metadata = get_source_or_model_metadata(\n                    model_name, model_type=model_type\n                ) %}\n                {% do return(model_metadata) %}\n            {% endfor %}\n        {% elif model_type == \"source\" %}\n            {% set model_name = dependencies[\"node\"].split(\".\")[-1] %}\n            {% set model_metadata = get_source_or_model_metadata(\n                model_name, model_type=model_type\n            ) %}\n            {{\n                log(\n                    \"get_parent_source_or_model_metadata| Got the following upstream sources:\\n\"\n                    ~ model_metadata,\n                    info=info\n                )\n            }}\n            {% do return(model_metadata) %}\n        {% else %} \n            {{\n                log(\n                    \"get_parent_source_or_model_metadata| Incorrect model type (\"\n                    ~ model_type\n                    ~ \").\",\n                    info=info\n                )\n            }}\n            {% set model_metadata = {} %}\n            {% do return(model_metadata) %}\n        {% endif %}\n\n        {{ log(\"get_parent_source_or_model_metadata | Finishing...\", info=info) }}\n        {{ log(\"\", info=info) }}\n\n    {% endif %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.my_nesso_project.get_model_dependencies",
          "macro.my_nesso_project.get_source_or_model_metadata"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.910998,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns": {
      "name": "duckdb__alter_relation_add_remove_columns",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/columns.sql",
      "original_file_path": "macros/columns.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns",
      "macro_sql": "{% macro duckdb__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n    {% for column in add_columns %}\n      {% set sql -%}\n         alter {{ relation.type }} {{ relation }} add column\n           {{ column.name }} {{ column.data_type }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n  {% if remove_columns %}\n    {% for column in remove_columns %}\n      {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n          {{ column.name }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9124444,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__snapshot_merge_sql": {
      "name": "duckdb__snapshot_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/snapshot_helper.sql",
      "original_file_path": "macros/snapshot_helper.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__snapshot_merge_sql",
      "macro_sql": "{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }} as DBT_INTERNAL_TARGET\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = DBT_INTERNAL_TARGET.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and DBT_INTERNAL_TARGET.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9136496,
      "supported_languages": null
    },
    "macro.dbt_duckdb.build_snapshot_staging_table": {
      "name": "build_snapshot_staging_table",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/snapshot_helper.sql",
      "original_file_path": "macros/snapshot_helper.sql",
      "unique_id": "macro.dbt_duckdb.build_snapshot_staging_table",
      "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.make_temp_relation",
          "macro.dbt.snapshot_staging_table",
          "macro.dbt.statement",
          "macro.dbt.create_table_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9142869,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__post_snapshot": {
      "name": "duckdb__post_snapshot",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/snapshot_helper.sql",
      "original_file_path": "macros/snapshot_helper.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__post_snapshot",
      "macro_sql": "{% macro duckdb__post_snapshot(staging_relation) %}\n    {% do return(drop_relation(staging_relation)) %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.drop_relation"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.914514,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__create_schema": {
      "name": "duckdb__create_schema",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__create_schema",
      "macro_sql": "{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    {% set sql %}\n        select type from duckdb_databases()\n        where database_name='{{ relation.database }}'\n        and type='sqlite'\n    {% endset %}\n    {% set results = run_query(sql) %}\n    {% if results|length == 0 %}\n        create schema if not exists {{ relation.without_identifier() }}\n    {% else %}\n        {% if relation.schema!='main' %}\n            {{ exceptions.raise_compiler_error(\n                \"Schema must be 'main' when writing to sqlite \"\n                ~ \"instead got \" ~ relation.schema\n            )}}\n        {% endif %}\n    {% endif %}\n  {%- endcall -%}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement", "macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9227583,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__drop_schema": {
      "name": "duckdb__drop_schema",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__drop_schema",
      "macro_sql": "{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {%- endcall -%}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9230433,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__list_schemas": {
      "name": "duckdb__list_schemas",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__list_schemas",
      "macro_sql": "{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from system.information_schema.schemata\n    {% if database is not none %}\n    where catalog_name = '{{ database }}'\n    {% endif %}\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9234731,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__check_schema_exists": {
      "name": "duckdb__check_schema_exists",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__check_schema_exists",
      "macro_sql": "{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from system.information_schema.schemata\n        where schema_name = '{{ schema }}'\n        and catalog_name = '{{ information_schema.database }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.923937,
      "supported_languages": null
    },
    "macro.dbt_duckdb.get_column_names": {
      "name": "get_column_names",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.get_column_names",
      "macro_sql": "{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.924471,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__create_table_as": {
      "name": "duckdb__create_table_as",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__create_table_as",
      "macro_sql": "{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(compiled_code) }}\n    {% endif %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% if contract_config.enforced and not temporary %}\n    {#-- DuckDB doesnt support constraints on temp tables --#}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }} (\n      {{ get_select_subquery(compiled_code) }}\n    );\n  {% else %}\n    as (\n      {{ compiled_code }}\n    );\n  {% endif %}\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_assert_columns_equivalent",
          "macro.dbt.get_table_columns_and_constraints",
          "macro.dbt_duckdb.get_column_names",
          "macro.dbt.get_select_subquery",
          "macro.dbt_duckdb.py_write_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9260561,
      "supported_languages": null
    },
    "macro.dbt_duckdb.py_write_table": {
      "name": "py_write_table",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.py_write_table",
      "macro_sql": "{% macro py_write_table(temporary, relation, compiled_code) -%}\n{{ compiled_code }}\n\ndef materialize(df, con):\n    try:\n        import pyarrow\n        pyarrow_available = True\n    except ImportError:\n        pyarrow_available = False\n    finally:\n        if pyarrow_available and isinstance(df, pyarrow.Table):\n            # https://github.com/duckdb/duckdb/issues/6584\n            import pyarrow.dataset\n    con.execute('create table {{ relation }} as select * from df')\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9263368,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__create_view_as": {
      "name": "duckdb__create_view_as",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__create_view_as",
      "macro_sql": "{% macro duckdb__create_view_as(relation, sql) -%}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.get_assert_columns_equivalent"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9269922,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__get_columns_in_relation": {
      "name": "duckdb__get_columns_in_relation",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__get_columns_in_relation",
      "macro_sql": "{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from system.information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n      {% if relation.schema %}\n      and table_schema = '{{ relation.schema }}'\n      {% endif %}\n      {% if relation.database %}\n      and table_catalog = '{{ relation.database }}'\n      {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt.sql_convert_columns_in_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9277601,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__list_relations_without_caching": {
      "name": "duckdb__list_relations_without_caching",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__list_relations_without_caching",
      "macro_sql": "{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from system.information_schema.tables\n    where table_schema = '{{ schema_relation.schema }}'\n    and table_catalog = '{{ schema_relation.database }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9282615,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__drop_relation": {
      "name": "duckdb__drop_relation",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__drop_relation",
      "macro_sql": "{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9286013,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__rename_relation": {
      "name": "duckdb__rename_relation",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__rename_relation",
      "macro_sql": "{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9290712,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__make_temp_relation": {
      "name": "duckdb__make_temp_relation",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__make_temp_relation",
      "macro_sql": "{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.py_current_timestring"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9296649,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__current_timestamp": {
      "name": "duckdb__current_timestamp",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__current_timestamp",
      "macro_sql": "{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.929784,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__snapshot_string_as_time": {
      "name": "duckdb__snapshot_string_as_time",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__snapshot_string_as_time",
      "macro_sql": "{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9300454,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__snapshot_get_time": {
      "name": "duckdb__snapshot_get_time",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__snapshot_get_time",
      "macro_sql": "{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.current_timestamp"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9301984,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__get_incremental_default_sql": {
      "name": "duckdb__get_incremental_default_sql",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_default_sql",
      "macro_sql": "{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.get_incremental_delete_insert_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9304547,
      "supported_languages": null
    },
    "macro.dbt_duckdb.location_exists": {
      "name": "location_exists",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.location_exists",
      "macro_sql": "{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.930708,
      "supported_languages": null
    },
    "macro.dbt_duckdb.write_to_file": {
      "name": "write_to_file",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.write_to_file",
      "macro_sql": "{% macro write_to_file(relation, location, options) -%}\n  {% call statement('write_to_file') -%}\n    copy {{ relation }} to '{{ location }}' ({{ options }})\n  {%- endcall %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9310374,
      "supported_languages": null
    },
    "macro.dbt_duckdb.store_relation": {
      "name": "store_relation",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.store_relation",
      "macro_sql": "{% macro store_relation(plugin, relation, location, format, config) -%}\n  {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n  {% do adapter.store_relation(plugin, relation, column_list, location, format, config) %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9314718,
      "supported_languages": null
    },
    "macro.dbt_duckdb.render_write_options": {
      "name": "render_write_options",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_duckdb.render_write_options",
      "macro_sql": "{% macro render_write_options(config) -%}\n  {% set options = config.get('options', {}) %}\n  {% if options is not mapping %}\n    {% do exceptions.raise_compiler_error(\"The options argument must be a dictionary\") %}\n  {% endif %}\n\n  {% for k in options %}\n    {% set _ = options.update({k: render(options[k])}) %}\n  {% endfor %}\n\n  {# legacy top-level write options #}\n  {% if config.get('format') %}\n    {% set _ = options.update({'format': render(config.get('format'))}) %}\n  {% endif %}\n  {% if config.get('delimiter') %}\n    {% set _ = options.update({'delimiter': render(config.get('delimiter'))}) %}\n  {% endif %}\n\n  {% do return(options) %}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.93291,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql": {
      "name": "duckdb__get_delete_insert_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/incremental_helper.sql",
      "original_file_path": "macros/incremental_helper.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql",
      "macro_sql": "{% macro duckdb__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }} as DBT_INCREMENTAL_TARGET\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = DBT_INCREMENTAL_TARGET.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.get_quoted_csv"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9354093,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__get_catalog": {
      "name": "duckdb__get_catalog",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/catalog.sql",
      "original_file_path": "macros/catalog.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__get_catalog",
      "macro_sql": "{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    select\n        '{{ database }}' as table_database,\n        t.table_schema,\n        t.table_name,\n        t.table_type,\n        '' as table_comment,\n        c.column_name,\n        c.ordinal_position as column_index,\n        c.data_type column_type,\n        '' as column_comment,\n        '' as table_owner\n    FROM information_schema.tables t JOIN information_schema.columns c ON t.table_schema = c.table_schema AND t.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(t.table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    AND t.table_type IN ('BASE TABLE', 'VIEW')\n    ORDER BY\n        t.table_schema,\n        t.table_name,\n        c.ordinal_position\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9363058,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__get_binding_char": {
      "name": "duckdb__get_binding_char",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/seed.sql",
      "original_file_path": "macros/seed.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__get_binding_char",
      "macro_sql": "{% macro duckdb__get_binding_char() %}\n  {{ return(adapter.get_binding_char()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.938082,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__get_batch_size": {
      "name": "duckdb__get_batch_size",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/seed.sql",
      "original_file_path": "macros/seed.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__get_batch_size",
      "macro_sql": "{% macro duckdb__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.938265,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__load_csv_rows": {
      "name": "duckdb__load_csv_rows",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/seed.sql",
      "original_file_path": "macros/seed.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__load_csv_rows",
      "macro_sql": "{% macro duckdb__load_csv_rows(model, agate_table) %}\n    {% if config.get('fast', true) %}\n        {% set seed_file_path = adapter.get_seed_file_path(model) %}\n        {% set delimiter = config.get('delimiter', ',') %}\n        {% set sql %}\n          COPY {{ this.render() }} FROM '{{ seed_file_path }}' (FORMAT CSV, HEADER TRUE, DELIMITER '{{ delimiter }}')\n        {% endset %}\n        {% do adapter.add_query(sql, abridge_sql_log=True) %}\n        {{ return(sql) }}\n    {% endif %}\n\n    {% set batch_size = get_batch_size() %}\n    {% set agate_table = adapter.convert_datetimes_to_strs(agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    {{ get_binding_char() }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_batch_size",
          "macro.dbt.get_seed_column_quoted_csv",
          "macro.dbt.get_binding_char"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9410715,
      "supported_languages": null
    },
    "macro.dbt_duckdb.materialization_external_duckdb": {
      "name": "materialization_external_duckdb",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/materializations/external.sql",
      "original_file_path": "macros/materializations/external.sql",
      "unique_id": "macro.dbt_duckdb.materialization_external_duckdb",
      "macro_sql": "{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set location = render(config.get('location', default=external_location(this, config))) -%})\n  {%- set rendered_options = render_write_options(config) -%}\n  {%- set format = config.get('format', 'parquet') -%}\n  {%- set write_options = adapter.external_write_options(location, rendered_options) -%}\n  {%- set read_location = adapter.external_read_location(location, rendered_options) -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- write an temp relation into file\n  {{ write_to_file(temp_relation, location, write_options) }}\n  -- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    create or replace view {{ intermediate_relation }} as (\n        select * from '{{ read_location }}'\n    );\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {%- set plugin_name = config.get('plugin') -%}\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {%- set partition_columns = config.get('partition_columns', []) -%}\n  {% if plugin_name is not none or glue_register is true %}\n    {% if glue_register %}\n      {# legacy hack to set the glue database name, deprecate this #}\n      {%- set plugin_name = 'glue|' ~ config.get('glue_database', 'default') -%}\n    {% endif %}\n    {% do store_relation(plugin_name, target_relation, location, format, config) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "depends_on": {
        "macros": [
          "macro.dbt_duckdb.external_location",
          "macro.dbt_duckdb.render_write_options",
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt_duckdb.write_to_file",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
          "macro.dbt_duckdb.store_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9479668,
      "supported_languages": ["sql", "python"]
    },
    "macro.dbt_duckdb.materialization_incremental_duckdb": {
      "name": "materialization_incremental_duckdb",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/materializations/incremental.sql",
      "original_file_path": "macros/materializations/incremental.sql",
      "unique_id": "macro.dbt_duckdb.materialization_incremental_duckdb",
      "macro_sql": "{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n  -- only create temp tables if using local duckdb, as it is not currently supported for remote databases\n  {%- set temporary = not adapter.is_motherduck() -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if not temporary %}\n      -- if not using a temporary table we will update the temp relation to use a different temp schema (\"dbt_temp\" by default)\n      {% set temp_relation = temp_relation.incorporate(path=adapter.get_temp_relation_path(this)) %}\n      {% do run_query(create_schema(temp_relation)) %}\n      -- then drop the temp relation after we insert the incremental data into the target relation\n      {% do to_drop.append(temp_relation) %}\n    {% endif %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(temporary, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.should_full_refresh",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.create_table_as",
          "macro.dbt.run_query",
          "macro.dbt.create_schema",
          "macro.dbt.statement",
          "macro.dbt.process_schema_changes",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9566796,
      "supported_languages": ["sql", "python"]
    },
    "macro.dbt_duckdb.materialization_table_duckdb": {
      "name": "materialization_table_duckdb",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/materializations/table.sql",
      "original_file_path": "macros/materializations/table.sql",
      "unique_id": "macro.dbt_duckdb.materialization_table_duckdb",
      "macro_sql": "{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt.create_indexes",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9604917,
      "supported_languages": ["sql", "python"]
    },
    "macro.dbt_duckdb.duckdb__listagg": {
      "name": "duckdb__listagg",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/utils/listagg.sql",
      "original_file_path": "macros/utils/listagg.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__listagg",
      "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if limit_num -%}\n    list_aggr(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        'string_agg',\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9613912,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__split_part": {
      "name": "duckdb__split_part",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/utils/splitpart.sql",
      "original_file_path": "macros/utils/splitpart.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__split_part",
      "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n    string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ]\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9617295,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__datediff": {
      "name": "duckdb__datediff",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/utils/datediff.sql",
      "original_file_path": "macros/utils/datediff.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__datediff",
      "macro_sql": "{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n    date_diff('{{ datepart }}', {{ first_date }}::timestamp, {{ second_date}}::timestamp )\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9620335,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__any_value": {
      "name": "duckdb__any_value",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/utils/any_value.sql",
      "original_file_path": "macros/utils/any_value.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__any_value",
      "macro_sql": "{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9622262,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__dateadd": {
      "name": "duckdb__dateadd",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/utils/dateadd.sql",
      "original_file_path": "macros/utils/dateadd.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__dateadd",
      "macro_sql": "{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    date_add({{ from_date_or_timestamp }}, interval ({{ interval }}) {{ datepart }})\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9625213,
      "supported_languages": null
    },
    "macro.dbt_duckdb.duckdb__last_day": {
      "name": "duckdb__last_day",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/utils/lastday.sql",
      "original_file_path": "macros/utils/lastday.sql",
      "unique_id": "macro.dbt_duckdb.duckdb__last_day",
      "macro_sql": "{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.dateadd",
          "macro.dbt.date_trunc",
          "macro.dbt.default_last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9632158,
      "supported_languages": null
    },
    "macro.dbt_duckdb.register_upstream_external_models": {
      "name": "register_upstream_external_models",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/utils/upstream.sql",
      "original_file_path": "macros/utils/upstream.sql",
      "unique_id": "macro.dbt_duckdb.register_upstream_external_models",
      "macro_sql": "{%- macro register_upstream_external_models() -%}\n{% if execute %}\n{% set upstream_nodes = {} %}\n{% set upstream_schemas = {} %}\n{% for node in selected_resources %}\n  {% for upstream_node in graph['nodes'][node]['depends_on']['nodes'] %}\n    {% if upstream_node not in upstream_nodes and upstream_node not in selected_resources %}\n      {% do upstream_nodes.update({upstream_node: None}) %}\n      {% set upstream = graph['nodes'].get(upstream_node) %}\n      {% if upstream\n         and upstream.resource_type in ('model', 'seed')\n         and upstream.config.materialized=='external'\n      %}\n        {%- set upstream_rel = api.Relation.create(\n          database=upstream['database'],\n          schema=upstream['schema'],\n          identifier=upstream['alias']\n        ) -%}\n        {%- set location = upstream.config.get('location', external_location(upstream_rel, upstream.config)) -%}\n        {%- set rendered_options = render_write_options(upstream.config) -%}\n        {%- set upstream_location = adapter.external_read_location(location, rendered_options) -%}\n        {% if upstream_rel.schema not in upstream_schemas %}\n          {% call statement('main', language='sql') -%}\n            create schema if not exists {{ upstream_rel.schema }}\n          {%- endcall %}\n          {% do upstream_schemas.update({upstream_rel.schema: None}) %}\n        {% endif %}\n        {% call statement('main', language='sql') -%}\n          create or replace view {{ upstream_rel }} as (\n            select * from '{{ upstream_location }}'\n          );\n        {%- endcall %}\n      {%- endif %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n{% do adapter.commit() %}\n{% endif %}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_duckdb.external_location",
          "macro.dbt_duckdb.render_write_options",
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9666445,
      "supported_languages": null
    },
    "macro.dbt_duckdb.external_location": {
      "name": "external_location",
      "resource_type": "macro",
      "package_name": "dbt_duckdb",
      "path": "macros/utils/external_location.sql",
      "original_file_path": "macros/utils/external_location.sql",
      "unique_id": "macro.dbt_duckdb.external_location",
      "macro_sql": "{%- macro external_location(relation, config) -%}\n  {%- if config.get('options', {}).get('partition_by') is none -%}\n    {%- set format = config.get('format', 'parquet') -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}.{{ format }}\n  {%- else -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}\n  {%- endif -%}\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9675128,
      "supported_languages": null
    },
    "macro.dbt.resolve_model_name": {
      "name": "resolve_model_name",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "unique_id": "macro.dbt.resolve_model_name",
      "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__resolve_model_name"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9693503,
      "supported_languages": null
    },
    "macro.dbt.default__resolve_model_name": {
      "name": "default__resolve_model_name",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "unique_id": "macro.dbt.default__resolve_model_name",
      "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.969627,
      "supported_languages": null
    },
    "macro.dbt.build_ref_function": {
      "name": "build_ref_function",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "unique_id": "macro.dbt.build_ref_function",
      "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.resolve_model_name"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.970907,
      "supported_languages": null
    },
    "macro.dbt.build_source_function": {
      "name": "build_source_function",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "unique_id": "macro.dbt.build_source_function",
      "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.resolve_model_name"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9715781,
      "supported_languages": null
    },
    "macro.dbt.build_config_dict": {
      "name": "build_config_dict",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "unique_id": "macro.dbt.build_config_dict",
      "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.972495,
      "supported_languages": null
    },
    "macro.dbt.py_script_postfix": {
      "name": "py_script_postfix",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "unique_id": "macro.dbt.py_script_postfix",
      "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.build_ref_function",
          "macro.dbt.build_source_function",
          "macro.dbt.build_config_dict",
          "macro.dbt.resolve_model_name",
          "macro.dbt.is_incremental",
          "macro.dbt.py_script_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.973296,
      "supported_languages": null
    },
    "macro.dbt.py_script_comment": {
      "name": "py_script_comment",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "unique_id": "macro.dbt.py_script_comment",
      "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9734125,
      "supported_languages": null
    },
    "macro.dbt.get_columns_in_relation": {
      "name": "get_columns_in_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.get_columns_in_relation",
      "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__get_columns_in_relation"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9758894,
      "supported_languages": null
    },
    "macro.dbt.default__get_columns_in_relation": {
      "name": "default__get_columns_in_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.default__get_columns_in_relation",
      "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9761302,
      "supported_languages": null
    },
    "macro.dbt.sql_convert_columns_in_relation": {
      "name": "sql_convert_columns_in_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.sql_convert_columns_in_relation",
      "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9765928,
      "supported_languages": null
    },
    "macro.dbt.get_empty_subquery_sql": {
      "name": "get_empty_subquery_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.get_empty_subquery_sql",
      "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_empty_subquery_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9769258,
      "supported_languages": null
    },
    "macro.dbt.default__get_empty_subquery_sql": {
      "name": "default__get_empty_subquery_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.default__get_empty_subquery_sql",
      "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9772277,
      "supported_languages": null
    },
    "macro.dbt.get_empty_schema_sql": {
      "name": "get_empty_schema_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.get_empty_schema_sql",
      "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_empty_schema_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9775486,
      "supported_languages": null
    },
    "macro.dbt.default__get_empty_schema_sql": {
      "name": "default__get_empty_schema_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.default__get_empty_schema_sql",
      "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9792736,
      "supported_languages": null
    },
    "macro.dbt.get_column_schema_from_query": {
      "name": "get_column_schema_from_query",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.get_column_schema_from_query",
      "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.get_empty_subquery_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9798021,
      "supported_languages": null
    },
    "macro.dbt.get_columns_in_query": {
      "name": "get_columns_in_query",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.get_columns_in_query",
      "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_columns_in_query"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9801123,
      "supported_languages": null
    },
    "macro.dbt.default__get_columns_in_query": {
      "name": "default__get_columns_in_query",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.default__get_columns_in_query",
      "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9806292,
      "supported_languages": null
    },
    "macro.dbt.alter_column_type": {
      "name": "alter_column_type",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.alter_column_type",
      "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__alter_column_type"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.981003,
      "supported_languages": null
    },
    "macro.dbt.default__alter_column_type": {
      "name": "default__alter_column_type",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.default__alter_column_type",
      "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.981881,
      "supported_languages": null
    },
    "macro.dbt.alter_relation_add_remove_columns": {
      "name": "alter_relation_add_remove_columns",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.alter_relation_add_remove_columns",
      "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.98225,
      "supported_languages": null
    },
    "macro.dbt.default__alter_relation_add_remove_columns": {
      "name": "default__alter_relation_add_remove_columns",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.default__alter_relation_add_remove_columns",
      "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.983509,
      "supported_languages": null
    },
    "macro.dbt.make_intermediate_relation": {
      "name": "make_intermediate_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.make_intermediate_relation",
      "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__make_intermediate_relation"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.98564,
      "supported_languages": null
    },
    "macro.dbt.default__make_intermediate_relation": {
      "name": "default__make_intermediate_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.default__make_intermediate_relation",
      "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__make_temp_relation"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9858835,
      "supported_languages": null
    },
    "macro.dbt.make_temp_relation": {
      "name": "make_temp_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.make_temp_relation",
      "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__make_temp_relation"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.98626,
      "supported_languages": null
    },
    "macro.dbt.default__make_temp_relation": {
      "name": "default__make_temp_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.default__make_temp_relation",
      "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9867983,
      "supported_languages": null
    },
    "macro.dbt.make_backup_relation": {
      "name": "make_backup_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.make_backup_relation",
      "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__make_backup_relation"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9872046,
      "supported_languages": null
    },
    "macro.dbt.default__make_backup_relation": {
      "name": "default__make_backup_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.default__make_backup_relation",
      "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9877315,
      "supported_languages": null
    },
    "macro.dbt.truncate_relation": {
      "name": "truncate_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.truncate_relation",
      "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__truncate_relation"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.988048,
      "supported_languages": null
    },
    "macro.dbt.default__truncate_relation": {
      "name": "default__truncate_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.default__truncate_relation",
      "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9882963,
      "supported_languages": null
    },
    "macro.dbt.get_or_create_relation": {
      "name": "get_or_create_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.get_or_create_relation",
      "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_or_create_relation"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9886632,
      "supported_languages": null
    },
    "macro.dbt.default__get_or_create_relation": {
      "name": "default__get_or_create_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.default__get_or_create_relation",
      "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9894717,
      "supported_languages": null
    },
    "macro.dbt.load_cached_relation": {
      "name": "load_cached_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.load_cached_relation",
      "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9898617,
      "supported_languages": null
    },
    "macro.dbt.load_relation": {
      "name": "load_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.load_relation",
      "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.load_cached_relation"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9900863,
      "supported_languages": null
    },
    "macro.dbt.alter_column_comment": {
      "name": "alter_column_comment",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "unique_id": "macro.dbt.alter_column_comment",
      "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__alter_column_comment"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9909303,
      "supported_languages": null
    },
    "macro.dbt.default__alter_column_comment": {
      "name": "default__alter_column_comment",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "unique_id": "macro.dbt.default__alter_column_comment",
      "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9911819,
      "supported_languages": null
    },
    "macro.dbt.alter_relation_comment": {
      "name": "alter_relation_comment",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "unique_id": "macro.dbt.alter_relation_comment",
      "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__alter_relation_comment"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9915135,
      "supported_languages": null
    },
    "macro.dbt.default__alter_relation_comment": {
      "name": "default__alter_relation_comment",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "unique_id": "macro.dbt.default__alter_relation_comment",
      "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9917657,
      "supported_languages": null
    },
    "macro.dbt.persist_docs": {
      "name": "persist_docs",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "unique_id": "macro.dbt.persist_docs",
      "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__persist_docs"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9921472,
      "supported_languages": null
    },
    "macro.dbt.default__persist_docs": {
      "name": "default__persist_docs",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "unique_id": "macro.dbt.default__persist_docs",
      "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt.alter_relation_comment",
          "macro.dbt.alter_column_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9929318,
      "supported_languages": null
    },
    "macro.dbt.collect_freshness": {
      "name": "collect_freshness",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/freshness.sql",
      "original_file_path": "macros/adapters/freshness.sql",
      "unique_id": "macro.dbt.collect_freshness",
      "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__collect_freshness"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9935231,
      "supported_languages": null
    },
    "macro.dbt.default__collect_freshness": {
      "name": "default__collect_freshness",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/freshness.sql",
      "original_file_path": "macros/adapters/freshness.sql",
      "unique_id": "macro.dbt.default__collect_freshness",
      "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9941256,
      "supported_languages": null
    },
    "macro.dbt.copy_grants": {
      "name": "copy_grants",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.copy_grants",
      "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__copy_grants"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.996004,
      "supported_languages": null
    },
    "macro.dbt.default__copy_grants": {
      "name": "default__copy_grants",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.default__copy_grants",
      "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.996179,
      "supported_languages": null
    },
    "macro.dbt.support_multiple_grantees_per_dcl_statement": {
      "name": "support_multiple_grantees_per_dcl_statement",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement",
      "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__support_multiple_grantees_per_dcl_statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.996425,
      "supported_languages": null
    },
    "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {
      "name": "default__support_multiple_grantees_per_dcl_statement",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement",
      "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9966264,
      "supported_languages": null
    },
    "macro.dbt.should_revoke": {
      "name": "should_revoke",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.should_revoke",
      "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.copy_grants"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9971359,
      "supported_languages": null
    },
    "macro.dbt.get_show_grant_sql": {
      "name": "get_show_grant_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.get_show_grant_sql",
      "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_show_grant_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9974346,
      "supported_languages": null
    },
    "macro.dbt.default__get_show_grant_sql": {
      "name": "default__get_show_grant_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.default__get_show_grant_sql",
      "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9975927,
      "supported_languages": null
    },
    "macro.dbt.get_grant_sql": {
      "name": "get_grant_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.get_grant_sql",
      "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_grant_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.997924,
      "supported_languages": null
    },
    "macro.dbt.default__get_grant_sql": {
      "name": "default__get_grant_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.default__get_grant_sql",
      "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9982288,
      "supported_languages": null
    },
    "macro.dbt.get_revoke_sql": {
      "name": "get_revoke_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.get_revoke_sql",
      "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_revoke_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9985805,
      "supported_languages": null
    },
    "macro.dbt.default__get_revoke_sql": {
      "name": "default__get_revoke_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.default__get_revoke_sql",
      "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9989767,
      "supported_languages": null
    },
    "macro.dbt.get_dcl_statement_list": {
      "name": "get_dcl_statement_list",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.get_dcl_statement_list",
      "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_dcl_statement_list"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458071.9993153,
      "supported_languages": null
    },
    "macro.dbt.default__get_dcl_statement_list": {
      "name": "default__get_dcl_statement_list",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.default__get_dcl_statement_list",
      "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.000666,
      "supported_languages": null
    },
    "macro.dbt.call_dcl_statements": {
      "name": "call_dcl_statements",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.call_dcl_statements",
      "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__call_dcl_statements"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0009596,
      "supported_languages": null
    },
    "macro.dbt.default__call_dcl_statements": {
      "name": "default__call_dcl_statements",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.default__call_dcl_statements",
      "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0013223,
      "supported_languages": null
    },
    "macro.dbt.apply_grants": {
      "name": "apply_grants",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.apply_grants",
      "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__apply_grants"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.001676,
      "supported_languages": null
    },
    "macro.dbt.default__apply_grants": {
      "name": "default__apply_grants",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.default__apply_grants",
      "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt.get_show_grant_sql",
          "macro.dbt.get_dcl_statement_list",
          "macro.dbt.call_dcl_statements"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0033882,
      "supported_languages": null
    },
    "macro.dbt.current_timestamp": {
      "name": "current_timestamp",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "unique_id": "macro.dbt.current_timestamp",
      "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__current_timestamp"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0040789,
      "supported_languages": null
    },
    "macro.dbt.default__current_timestamp": {
      "name": "default__current_timestamp",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "unique_id": "macro.dbt.default__current_timestamp",
      "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0043085,
      "supported_languages": null
    },
    "macro.dbt.snapshot_get_time": {
      "name": "snapshot_get_time",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "unique_id": "macro.dbt.snapshot_get_time",
      "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__snapshot_get_time"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.004519,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_get_time": {
      "name": "default__snapshot_get_time",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "unique_id": "macro.dbt.default__snapshot_get_time",
      "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.current_timestamp"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0046766,
      "supported_languages": null
    },
    "macro.dbt.current_timestamp_backcompat": {
      "name": "current_timestamp_backcompat",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "unique_id": "macro.dbt.current_timestamp_backcompat",
      "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__current_timestamp_backcompat"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0049481,
      "supported_languages": null
    },
    "macro.dbt.default__current_timestamp_backcompat": {
      "name": "default__current_timestamp_backcompat",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "unique_id": "macro.dbt.default__current_timestamp_backcompat",
      "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0050728,
      "supported_languages": null
    },
    "macro.dbt.current_timestamp_in_utc_backcompat": {
      "name": "current_timestamp_in_utc_backcompat",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat",
      "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0053542,
      "supported_languages": null
    },
    "macro.dbt.default__current_timestamp_in_utc_backcompat": {
      "name": "default__current_timestamp_in_utc_backcompat",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat",
      "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.current_timestamp_backcompat",
          "macro.dbt.default__current_timestamp_backcompat"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0056086,
      "supported_languages": null
    },
    "macro.dbt.validate_sql": {
      "name": "validate_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/validate_sql.sql",
      "original_file_path": "macros/adapters/validate_sql.sql",
      "unique_id": "macro.dbt.validate_sql",
      "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__validate_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0060096,
      "supported_languages": null
    },
    "macro.dbt.default__validate_sql": {
      "name": "default__validate_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/validate_sql.sql",
      "original_file_path": "macros/adapters/validate_sql.sql",
      "unique_id": "macro.dbt.default__validate_sql",
      "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.006343,
      "supported_languages": null
    },
    "macro.dbt.get_create_index_sql": {
      "name": "get_create_index_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "unique_id": "macro.dbt.get_create_index_sql",
      "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_create_index_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0073478,
      "supported_languages": null
    },
    "macro.dbt.default__get_create_index_sql": {
      "name": "default__get_create_index_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "unique_id": "macro.dbt.default__get_create_index_sql",
      "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0075884,
      "supported_languages": null
    },
    "macro.dbt.create_indexes": {
      "name": "create_indexes",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "unique_id": "macro.dbt.create_indexes",
      "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__create_indexes"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0078223,
      "supported_languages": null
    },
    "macro.dbt.default__create_indexes": {
      "name": "default__create_indexes",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "unique_id": "macro.dbt.default__create_indexes",
      "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0084178,
      "supported_languages": null
    },
    "macro.dbt.get_drop_index_sql": {
      "name": "get_drop_index_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "unique_id": "macro.dbt.get_drop_index_sql",
      "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_drop_index_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0087202,
      "supported_languages": null
    },
    "macro.dbt.default__get_drop_index_sql": {
      "name": "default__get_drop_index_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "unique_id": "macro.dbt.default__get_drop_index_sql",
      "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.008933,
      "supported_languages": null
    },
    "macro.dbt.get_show_indexes_sql": {
      "name": "get_show_indexes_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "unique_id": "macro.dbt.get_show_indexes_sql",
      "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_show_indexes_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.009169,
      "supported_languages": null
    },
    "macro.dbt.default__get_show_indexes_sql": {
      "name": "default__get_show_indexes_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "unique_id": "macro.dbt.default__get_show_indexes_sql",
      "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0094485,
      "supported_languages": null
    },
    "macro.dbt.create_schema": {
      "name": "create_schema",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "unique_id": "macro.dbt.create_schema",
      "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__create_schema"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.009969,
      "supported_languages": null
    },
    "macro.dbt.default__create_schema": {
      "name": "default__create_schema",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "unique_id": "macro.dbt.default__create_schema",
      "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0102503,
      "supported_languages": null
    },
    "macro.dbt.drop_schema": {
      "name": "drop_schema",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "unique_id": "macro.dbt.drop_schema",
      "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__drop_schema"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0105247,
      "supported_languages": null
    },
    "macro.dbt.default__drop_schema": {
      "name": "default__drop_schema",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "unique_id": "macro.dbt.default__drop_schema",
      "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.01081,
      "supported_languages": null
    },
    "macro.dbt.get_show_sql": {
      "name": "get_show_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/show.sql",
      "original_file_path": "macros/adapters/show.sql",
      "unique_id": "macro.dbt.get_show_sql",
      "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.get_limit_subquery_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0114985,
      "supported_languages": null
    },
    "macro.dbt.get_limit_subquery_sql": {
      "name": "get_limit_subquery_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/show.sql",
      "original_file_path": "macros/adapters/show.sql",
      "unique_id": "macro.dbt.get_limit_subquery_sql",
      "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_limit_subquery_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0117784,
      "supported_languages": null
    },
    "macro.dbt.default__get_limit_subquery_sql": {
      "name": "default__get_limit_subquery_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/show.sql",
      "original_file_path": "macros/adapters/show.sql",
      "unique_id": "macro.dbt.default__get_limit_subquery_sql",
      "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0119772,
      "supported_languages": null
    },
    "macro.dbt.get_catalog_relations": {
      "name": "get_catalog_relations",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.get_catalog_relations",
      "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_catalog_relations"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.015076,
      "supported_languages": null
    },
    "macro.dbt.default__get_catalog_relations": {
      "name": "default__get_catalog_relations",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.default__get_catalog_relations",
      "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0154586,
      "supported_languages": null
    },
    "macro.dbt.get_catalog": {
      "name": "get_catalog",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.get_catalog",
      "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__get_catalog"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.015793,
      "supported_languages": null
    },
    "macro.dbt.default__get_catalog": {
      "name": "default__get_catalog",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.default__get_catalog",
      "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0161824,
      "supported_languages": null
    },
    "macro.dbt.information_schema_name": {
      "name": "information_schema_name",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.information_schema_name",
      "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__information_schema_name"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.016455,
      "supported_languages": null
    },
    "macro.dbt.default__information_schema_name": {
      "name": "default__information_schema_name",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.default__information_schema_name",
      "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.016686,
      "supported_languages": null
    },
    "macro.dbt.list_schemas": {
      "name": "list_schemas",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.list_schemas",
      "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__list_schemas"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0169492,
      "supported_languages": null
    },
    "macro.dbt.default__list_schemas": {
      "name": "default__list_schemas",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.default__list_schemas",
      "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0173454,
      "supported_languages": null
    },
    "macro.dbt.check_schema_exists": {
      "name": "check_schema_exists",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.check_schema_exists",
      "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__check_schema_exists"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0176973,
      "supported_languages": null
    },
    "macro.dbt.default__check_schema_exists": {
      "name": "default__check_schema_exists",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.default__check_schema_exists",
      "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.replace", "macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.018226,
      "supported_languages": null
    },
    "macro.dbt.list_relations_without_caching": {
      "name": "list_relations_without_caching",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.list_relations_without_caching",
      "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__list_relations_without_caching"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0184965,
      "supported_languages": null
    },
    "macro.dbt.default__list_relations_without_caching": {
      "name": "default__list_relations_without_caching",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.default__list_relations_without_caching",
      "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.01874,
      "supported_languages": null
    },
    "macro.dbt.get_relations": {
      "name": "get_relations",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.get_relations",
      "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_relations"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0190268,
      "supported_languages": null
    },
    "macro.dbt.default__get_relations": {
      "name": "default__get_relations",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.default__get_relations",
      "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0192914,
      "supported_languages": null
    },
    "macro.dbt.get_relation_last_modified": {
      "name": "get_relation_last_modified",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.get_relation_last_modified",
      "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_relation_last_modified"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0196042,
      "supported_languages": null
    },
    "macro.dbt.default__get_relation_last_modified": {
      "name": "default__get_relation_last_modified",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.default__get_relation_last_modified",
      "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.019863,
      "supported_languages": null
    },
    "macro.dbt.generate_schema_name": {
      "name": "generate_schema_name",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/get_custom_name/get_custom_schema.sql",
      "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
      "unique_id": "macro.dbt.generate_schema_name",
      "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__generate_schema_name"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0205266,
      "supported_languages": null
    },
    "macro.dbt.default__generate_schema_name": {
      "name": "default__generate_schema_name",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/get_custom_name/get_custom_schema.sql",
      "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
      "unique_id": "macro.dbt.default__generate_schema_name",
      "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.020968,
      "supported_languages": null
    },
    "macro.dbt.generate_schema_name_for_env": {
      "name": "generate_schema_name_for_env",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/get_custom_name/get_custom_schema.sql",
      "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
      "unique_id": "macro.dbt.generate_schema_name_for_env",
      "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0214088,
      "supported_languages": null
    },
    "macro.dbt.generate_database_name": {
      "name": "generate_database_name",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/get_custom_name/get_custom_database.sql",
      "original_file_path": "macros/get_custom_name/get_custom_database.sql",
      "unique_id": "macro.dbt.generate_database_name",
      "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__generate_database_name"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0219374,
      "supported_languages": null
    },
    "macro.dbt.default__generate_database_name": {
      "name": "default__generate_database_name",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/get_custom_name/get_custom_database.sql",
      "original_file_path": "macros/get_custom_name/get_custom_database.sql",
      "unique_id": "macro.dbt.default__generate_database_name",
      "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0223157,
      "supported_languages": null
    },
    "macro.dbt.generate_alias_name": {
      "name": "generate_alias_name",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/get_custom_name/get_custom_alias.sql",
      "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
      "unique_id": "macro.dbt.generate_alias_name",
      "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__generate_alias_name"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0228853,
      "supported_languages": null
    },
    "macro.dbt.default__generate_alias_name": {
      "name": "default__generate_alias_name",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/get_custom_name/get_custom_alias.sql",
      "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
      "unique_id": "macro.dbt.default__generate_alias_name",
      "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.023471,
      "supported_languages": null
    },
    "macro.dbt.convert_datetime": {
      "name": "convert_datetime",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "unique_id": "macro.dbt.convert_datetime",
      "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0254562,
      "supported_languages": null
    },
    "macro.dbt.dates_in_range": {
      "name": "dates_in_range",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "unique_id": "macro.dbt.dates_in_range",
      "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.convert_datetime"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0273585,
      "supported_languages": null
    },
    "macro.dbt.partition_range": {
      "name": "partition_range",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "unique_id": "macro.dbt.partition_range",
      "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.dates_in_range"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0286102,
      "supported_languages": null
    },
    "macro.dbt.py_current_timestring": {
      "name": "py_current_timestring",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "unique_id": "macro.dbt.py_current_timestring",
      "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0289621,
      "supported_languages": null
    },
    "macro.dbt.statement": {
      "name": "statement",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/etc/statement.sql",
      "original_file_path": "macros/etc/statement.sql",
      "unique_id": "macro.dbt.statement",
      "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.031051,
      "supported_languages": null
    },
    "macro.dbt.noop_statement": {
      "name": "noop_statement",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/etc/statement.sql",
      "original_file_path": "macros/etc/statement.sql",
      "unique_id": "macro.dbt.noop_statement",
      "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0319781,
      "supported_languages": null
    },
    "macro.dbt.run_query": {
      "name": "run_query",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/etc/statement.sql",
      "original_file_path": "macros/etc/statement.sql",
      "unique_id": "macro.dbt.run_query",
      "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0324264,
      "supported_languages": null
    },
    "macro.dbt.default__test_unique": {
      "name": "default__test_unique",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/generic_test_sql/unique.sql",
      "original_file_path": "macros/generic_test_sql/unique.sql",
      "unique_id": "macro.dbt.default__test_unique",
      "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0327823,
      "supported_languages": null
    },
    "macro.dbt.default__test_not_null": {
      "name": "default__test_not_null",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/generic_test_sql/not_null.sql",
      "original_file_path": "macros/generic_test_sql/not_null.sql",
      "unique_id": "macro.dbt.default__test_not_null",
      "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.should_store_failures"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0332408,
      "supported_languages": null
    },
    "macro.dbt.default__test_relationships": {
      "name": "default__test_relationships",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/generic_test_sql/relationships.sql",
      "original_file_path": "macros/generic_test_sql/relationships.sql",
      "unique_id": "macro.dbt.default__test_relationships",
      "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0337026,
      "supported_languages": null
    },
    "macro.dbt.default__test_accepted_values": {
      "name": "default__test_accepted_values",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/generic_test_sql/accepted_values.sql",
      "original_file_path": "macros/generic_test_sql/accepted_values.sql",
      "unique_id": "macro.dbt.default__test_accepted_values",
      "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0344737,
      "supported_languages": null
    },
    "macro.dbt.set_sql_header": {
      "name": "set_sql_header",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/configs.sql",
      "original_file_path": "macros/materializations/configs.sql",
      "unique_id": "macro.dbt.set_sql_header",
      "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0349834,
      "supported_languages": null
    },
    "macro.dbt.should_full_refresh": {
      "name": "should_full_refresh",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/configs.sql",
      "original_file_path": "macros/materializations/configs.sql",
      "unique_id": "macro.dbt.should_full_refresh",
      "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0354319,
      "supported_languages": null
    },
    "macro.dbt.should_store_failures": {
      "name": "should_store_failures",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/configs.sql",
      "original_file_path": "macros/materializations/configs.sql",
      "unique_id": "macro.dbt.should_store_failures",
      "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0358763,
      "supported_languages": null
    },
    "macro.dbt.run_hooks": {
      "name": "run_hooks",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "unique_id": "macro.dbt.run_hooks",
      "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.037561,
      "supported_languages": null
    },
    "macro.dbt.make_hook_config": {
      "name": "make_hook_config",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "unique_id": "macro.dbt.make_hook_config",
      "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0379453,
      "supported_languages": null
    },
    "macro.dbt.before_begin": {
      "name": "before_begin",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "unique_id": "macro.dbt.before_begin",
      "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.make_hook_config"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.03818,
      "supported_languages": null
    },
    "macro.dbt.in_transaction": {
      "name": "in_transaction",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "unique_id": "macro.dbt.in_transaction",
      "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.make_hook_config"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.038476,
      "supported_languages": null
    },
    "macro.dbt.after_commit": {
      "name": "after_commit",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "unique_id": "macro.dbt.after_commit",
      "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.make_hook_config"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0386918,
      "supported_languages": null
    },
    "macro.dbt.get_where_subquery": {
      "name": "get_where_subquery",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/tests/where_subquery.sql",
      "original_file_path": "macros/materializations/tests/where_subquery.sql",
      "unique_id": "macro.dbt.get_where_subquery",
      "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_where_subquery"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.039237,
      "supported_languages": null
    },
    "macro.dbt.default__get_where_subquery": {
      "name": "default__get_where_subquery",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/tests/where_subquery.sql",
      "original_file_path": "macros/materializations/tests/where_subquery.sql",
      "unique_id": "macro.dbt.default__get_where_subquery",
      "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0397973,
      "supported_languages": null
    },
    "macro.dbt.get_test_sql": {
      "name": "get_test_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/tests/helpers.sql",
      "original_file_path": "macros/materializations/tests/helpers.sql",
      "unique_id": "macro.dbt.get_test_sql",
      "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_test_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0404356,
      "supported_languages": null
    },
    "macro.dbt.default__get_test_sql": {
      "name": "default__get_test_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/tests/helpers.sql",
      "original_file_path": "macros/materializations/tests/helpers.sql",
      "unique_id": "macro.dbt.default__get_test_sql",
      "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.04103,
      "supported_languages": null
    },
    "macro.dbt.materialization_test_default": {
      "name": "materialization_test_default",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/tests/test.sql",
      "original_file_path": "macros/materializations/tests/test.sql",
      "unique_id": "macro.dbt.materialization_test_default",
      "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.should_store_failures",
          "macro.dbt.statement",
          "macro.dbt.get_create_sql",
          "macro.dbt.get_test_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0447197,
      "supported_languages": ["sql"]
    },
    "macro.dbt.create_csv_table": {
      "name": "create_csv_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.create_csv_table",
      "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__create_csv_table"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0496247,
      "supported_languages": null
    },
    "macro.dbt.default__create_csv_table": {
      "name": "default__create_csv_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.default__create_csv_table",
      "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.05101,
      "supported_languages": null
    },
    "macro.dbt.reset_csv_table": {
      "name": "reset_csv_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.reset_csv_table",
      "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__reset_csv_table"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0513537,
      "supported_languages": null
    },
    "macro.dbt.default__reset_csv_table": {
      "name": "default__reset_csv_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.default__reset_csv_table",
      "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.create_csv_table"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0520751,
      "supported_languages": null
    },
    "macro.dbt.get_csv_sql": {
      "name": "get_csv_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.get_csv_sql",
      "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_csv_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0523882,
      "supported_languages": null
    },
    "macro.dbt.default__get_csv_sql": {
      "name": "default__get_csv_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.default__get_csv_sql",
      "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0525935,
      "supported_languages": null
    },
    "macro.dbt.get_binding_char": {
      "name": "get_binding_char",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.get_binding_char",
      "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__get_binding_char"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0528047,
      "supported_languages": null
    },
    "macro.dbt.default__get_binding_char": {
      "name": "default__get_binding_char",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.default__get_binding_char",
      "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0529766,
      "supported_languages": null
    },
    "macro.dbt.get_batch_size": {
      "name": "get_batch_size",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.get_batch_size",
      "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__get_batch_size"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0532641,
      "supported_languages": null
    },
    "macro.dbt.default__get_batch_size": {
      "name": "default__get_batch_size",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.default__get_batch_size",
      "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0534682,
      "supported_languages": null
    },
    "macro.dbt.get_seed_column_quoted_csv": {
      "name": "get_seed_column_quoted_csv",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.get_seed_column_quoted_csv",
      "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.054262,
      "supported_languages": null
    },
    "macro.dbt.load_csv_rows": {
      "name": "load_csv_rows",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.load_csv_rows",
      "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__load_csv_rows"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.054549,
      "supported_languages": null
    },
    "macro.dbt.default__load_csv_rows": {
      "name": "default__load_csv_rows",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.default__load_csv_rows",
      "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_batch_size",
          "macro.dbt.get_seed_column_quoted_csv",
          "macro.dbt.get_binding_char"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0565498,
      "supported_languages": null
    },
    "macro.dbt.materialization_seed_default": {
      "name": "materialization_seed_default",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/seed.sql",
      "original_file_path": "macros/materializations/seeds/seed.sql",
      "unique_id": "macro.dbt.materialization_seed_default",
      "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "depends_on": {
        "macros": [
          "macro.dbt.should_full_refresh",
          "macro.dbt.run_hooks",
          "macro.dbt.reset_csv_table",
          "macro.dbt.create_csv_table",
          "macro.dbt.load_csv_rows",
          "macro.dbt.noop_statement",
          "macro.dbt.get_csv_sql",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0612874,
      "supported_languages": ["sql"]
    },
    "macro.dbt.snapshot_merge_sql": {
      "name": "snapshot_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/snapshot_merge.sql",
      "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
      "unique_id": "macro.dbt.snapshot_merge_sql",
      "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0619018,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_merge_sql": {
      "name": "default__snapshot_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/snapshot_merge.sql",
      "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
      "unique_id": "macro.dbt.default__snapshot_merge_sql",
      "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0623295,
      "supported_languages": null
    },
    "macro.dbt.materialization_snapshot_default": {
      "name": "materialization_snapshot_default",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/snapshot.sql",
      "original_file_path": "macros/materializations/snapshots/snapshot.sql",
      "unique_id": "macro.dbt.materialization_snapshot_default",
      "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_or_create_relation",
          "macro.dbt.run_hooks",
          "macro.dbt.strategy_dispatch",
          "macro.dbt.build_snapshot_table",
          "macro.dbt.create_table_as",
          "macro.dbt.build_snapshot_staging_table",
          "macro.dbt.create_columns",
          "macro.dbt.snapshot_merge_sql",
          "macro.dbt.statement",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes",
          "macro.dbt.post_snapshot"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0699165,
      "supported_languages": ["sql"]
    },
    "macro.dbt.strategy_dispatch": {
      "name": "strategy_dispatch",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "unique_id": "macro.dbt.strategy_dispatch",
      "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0742855,
      "supported_languages": null
    },
    "macro.dbt.snapshot_hash_arguments": {
      "name": "snapshot_hash_arguments",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "unique_id": "macro.dbt.snapshot_hash_arguments",
      "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__snapshot_hash_arguments"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.074553,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_hash_arguments": {
      "name": "default__snapshot_hash_arguments",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "unique_id": "macro.dbt.default__snapshot_hash_arguments",
      "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0749283,
      "supported_languages": null
    },
    "macro.dbt.snapshot_timestamp_strategy": {
      "name": "snapshot_timestamp_strategy",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "unique_id": "macro.dbt.snapshot_timestamp_strategy",
      "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.snapshot_hash_arguments"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0760298,
      "supported_languages": null
    },
    "macro.dbt.snapshot_string_as_time": {
      "name": "snapshot_string_as_time",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "unique_id": "macro.dbt.snapshot_string_as_time",
      "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0762947,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_string_as_time": {
      "name": "default__snapshot_string_as_time",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "unique_id": "macro.dbt.default__snapshot_string_as_time",
      "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0765827,
      "supported_languages": null
    },
    "macro.dbt.snapshot_check_all_get_existing_columns": {
      "name": "snapshot_check_all_get_existing_columns",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
      "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.get_columns_in_query"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0787218,
      "supported_languages": null
    },
    "macro.dbt.snapshot_check_strategy": {
      "name": "snapshot_check_strategy",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "unique_id": "macro.dbt.snapshot_check_strategy",
      "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.snapshot_get_time",
          "macro.dbt.snapshot_check_all_get_existing_columns",
          "macro.dbt.get_true_sql",
          "macro.dbt.snapshot_hash_arguments"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0808053,
      "supported_languages": null
    },
    "macro.dbt.create_columns": {
      "name": "create_columns",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.create_columns",
      "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__create_columns"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.084671,
      "supported_languages": null
    },
    "macro.dbt.default__create_columns": {
      "name": "default__create_columns",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.default__create_columns",
      "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0851166,
      "supported_languages": null
    },
    "macro.dbt.post_snapshot": {
      "name": "post_snapshot",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.post_snapshot",
      "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__post_snapshot"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.085432,
      "supported_languages": null
    },
    "macro.dbt.default__post_snapshot": {
      "name": "default__post_snapshot",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.default__post_snapshot",
      "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0855753,
      "supported_languages": null
    },
    "macro.dbt.get_true_sql": {
      "name": "get_true_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.get_true_sql",
      "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_true_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0858002,
      "supported_languages": null
    },
    "macro.dbt.default__get_true_sql": {
      "name": "default__get_true_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.default__get_true_sql",
      "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.085976,
      "supported_languages": null
    },
    "macro.dbt.snapshot_staging_table": {
      "name": "snapshot_staging_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.snapshot_staging_table",
      "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__snapshot_staging_table"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0862942,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_staging_table": {
      "name": "default__snapshot_staging_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.default__snapshot_staging_table",
      "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.snapshot_get_time"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0877678,
      "supported_languages": null
    },
    "macro.dbt.build_snapshot_table": {
      "name": "build_snapshot_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.build_snapshot_table",
      "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__build_snapshot_table"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0880618,
      "supported_languages": null
    },
    "macro.dbt.default__build_snapshot_table": {
      "name": "default__build_snapshot_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.default__build_snapshot_table",
      "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0884404,
      "supported_languages": null
    },
    "macro.dbt.build_snapshot_staging_table": {
      "name": "build_snapshot_staging_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.build_snapshot_staging_table",
      "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.make_temp_relation",
          "macro.dbt.snapshot_staging_table",
          "macro.dbt.statement",
          "macro.dbt.create_table_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0891027,
      "supported_languages": null
    },
    "macro.dbt.materialization_materialized_view_default": {
      "name": "materialization_materialized_view_default",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/materialized_view.sql",
      "original_file_path": "macros/materializations/models/materialized_view.sql",
      "unique_id": "macro.dbt.materialization_materialized_view_default",
      "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.materialized_view_setup",
          "macro.dbt.materialized_view_get_build_sql",
          "macro.dbt.materialized_view_execute_no_op",
          "macro.dbt.materialized_view_execute_build_sql",
          "macro.dbt.materialized_view_teardown"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0943735,
      "supported_languages": ["sql"]
    },
    "macro.dbt.materialized_view_setup": {
      "name": "materialized_view_setup",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/materialized_view.sql",
      "original_file_path": "macros/materializations/models/materialized_view.sql",
      "unique_id": "macro.dbt.materialized_view_setup",
      "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0950365,
      "supported_languages": null
    },
    "macro.dbt.materialized_view_teardown": {
      "name": "materialized_view_teardown",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/materialized_view.sql",
      "original_file_path": "macros/materializations/models/materialized_view.sql",
      "unique_id": "macro.dbt.materialized_view_teardown",
      "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.09542,
      "supported_languages": null
    },
    "macro.dbt.materialized_view_get_build_sql": {
      "name": "materialized_view_get_build_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/materialized_view.sql",
      "original_file_path": "macros/materializations/models/materialized_view.sql",
      "unique_id": "macro.dbt.materialized_view_get_build_sql",
      "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.should_full_refresh",
          "macro.dbt.get_create_materialized_view_as_sql",
          "macro.dbt.get_replace_sql",
          "macro.dbt.get_materialized_view_configuration_changes",
          "macro.dbt.refresh_materialized_view",
          "macro.dbt.get_alter_materialized_view_as_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0973876,
      "supported_languages": null
    },
    "macro.dbt.materialized_view_execute_no_op": {
      "name": "materialized_view_execute_no_op",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/materialized_view.sql",
      "original_file_path": "macros/materializations/models/materialized_view.sql",
      "unique_id": "macro.dbt.materialized_view_execute_no_op",
      "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0977635,
      "supported_languages": null
    },
    "macro.dbt.materialized_view_execute_build_sql": {
      "name": "materialized_view_execute_build_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/materialized_view.sql",
      "original_file_path": "macros/materializations/models/materialized_view.sql",
      "unique_id": "macro.dbt.materialized_view_execute_build_sql",
      "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.0987308,
      "supported_languages": null
    },
    "macro.dbt.materialization_table_default": {
      "name": "materialization_table_default",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/table.sql",
      "original_file_path": "macros/materializations/models/table.sql",
      "unique_id": "macro.dbt.materialization_table_default",
      "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.get_create_table_as_sql",
          "macro.dbt.create_indexes",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.102702,
      "supported_languages": ["sql"]
    },
    "macro.dbt.materialization_view_default": {
      "name": "materialization_view_default",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/view.sql",
      "original_file_path": "macros/materializations/models/view.sql",
      "unique_id": "macro.dbt.materialization_view_default",
      "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.run_hooks",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.statement",
          "macro.dbt.get_create_view_as_sql",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1066535,
      "supported_languages": ["sql"]
    },
    "macro.dbt.incremental_validate_on_schema_change": {
      "name": "incremental_validate_on_schema_change",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "unique_id": "macro.dbt.incremental_validate_on_schema_change",
      "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1121187,
      "supported_languages": null
    },
    "macro.dbt.check_for_schema_changes": {
      "name": "check_for_schema_changes",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "unique_id": "macro.dbt.check_for_schema_changes",
      "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1139607,
      "supported_languages": null
    },
    "macro.dbt.sync_column_schemas": {
      "name": "sync_column_schemas",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "unique_id": "macro.dbt.sync_column_schemas",
      "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.alter_relation_add_remove_columns",
          "macro.dbt.alter_column_type"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1159163,
      "supported_languages": null
    },
    "macro.dbt.process_schema_changes": {
      "name": "process_schema_changes",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "unique_id": "macro.dbt.process_schema_changes",
      "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.check_for_schema_changes",
          "macro.dbt.sync_column_schemas"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1172094,
      "supported_languages": null
    },
    "macro.dbt.get_merge_sql": {
      "name": "get_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "unique_id": "macro.dbt.get_merge_sql",
      "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1233573,
      "supported_languages": null
    },
    "macro.dbt.default__get_merge_sql": {
      "name": "default__get_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "unique_id": "macro.dbt.default__get_merge_sql",
      "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_quoted_csv",
          "macro.dbt.get_merge_update_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1259441,
      "supported_languages": null
    },
    "macro.dbt.get_delete_insert_merge_sql": {
      "name": "get_delete_insert_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "unique_id": "macro.dbt.get_delete_insert_merge_sql",
      "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1263351,
      "supported_languages": null
    },
    "macro.dbt.default__get_delete_insert_merge_sql": {
      "name": "default__get_delete_insert_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
      "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.get_quoted_csv"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1279113,
      "supported_languages": null
    },
    "macro.dbt.get_insert_overwrite_merge_sql": {
      "name": "get_insert_overwrite_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
      "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1283085,
      "supported_languages": null
    },
    "macro.dbt.default__get_insert_overwrite_merge_sql": {
      "name": "default__get_insert_overwrite_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
      "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.get_quoted_csv"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1293163,
      "supported_languages": null
    },
    "macro.dbt.materialization_incremental_default": {
      "name": "materialization_incremental_default",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/incremental.sql",
      "original_file_path": "macros/materializations/models/incremental/incremental.sql",
      "unique_id": "macro.dbt.materialization_incremental_default",
      "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.should_full_refresh",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.get_create_table_as_sql",
          "macro.dbt.run_query",
          "macro.dbt.process_schema_changes",
          "macro.dbt.statement",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1362484,
      "supported_languages": ["sql"]
    },
    "macro.dbt.get_incremental_append_sql": {
      "name": "get_incremental_append_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.get_incremental_append_sql",
      "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_incremental_append_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1375656,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_append_sql": {
      "name": "default__get_incremental_append_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.default__get_incremental_append_sql",
      "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.get_insert_into_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.137946,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_delete_insert_sql": {
      "name": "get_incremental_delete_insert_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.get_incremental_delete_insert_sql",
      "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1382306,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_delete_insert_sql": {
      "name": "default__get_incremental_delete_insert_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql",
      "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.get_delete_insert_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1386573,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_merge_sql": {
      "name": "get_incremental_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.get_incremental_merge_sql",
      "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_incremental_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.138932,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_merge_sql": {
      "name": "default__get_incremental_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.default__get_incremental_merge_sql",
      "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.get_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1394079,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_insert_overwrite_sql": {
      "name": "get_incremental_insert_overwrite_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql",
      "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.139687,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_insert_overwrite_sql": {
      "name": "default__get_incremental_insert_overwrite_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql",
      "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.get_insert_overwrite_merge_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1400712,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_default_sql": {
      "name": "get_incremental_default_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.get_incremental_default_sql",
      "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__get_incremental_default_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1403382,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_default_sql": {
      "name": "default__get_incremental_default_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.default__get_incremental_default_sql",
      "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.get_incremental_append_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.140572,
      "supported_languages": null
    },
    "macro.dbt.get_insert_into_sql": {
      "name": "get_insert_into_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.get_insert_into_sql",
      "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.get_quoted_csv"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.141023,
      "supported_languages": null
    },
    "macro.dbt.is_incremental": {
      "name": "is_incremental",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/is_incremental.sql",
      "original_file_path": "macros/materializations/models/incremental/is_incremental.sql",
      "unique_id": "macro.dbt.is_incremental",
      "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.should_full_refresh"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.141959,
      "supported_languages": null
    },
    "macro.dbt.get_quoted_csv": {
      "name": "get_quoted_csv",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "unique_id": "macro.dbt.get_quoted_csv",
      "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1437864,
      "supported_languages": null
    },
    "macro.dbt.diff_columns": {
      "name": "diff_columns",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "unique_id": "macro.dbt.diff_columns",
      "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1446285,
      "supported_languages": null
    },
    "macro.dbt.diff_column_data_types": {
      "name": "diff_column_data_types",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "unique_id": "macro.dbt.diff_column_data_types",
      "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1457114,
      "supported_languages": null
    },
    "macro.dbt.get_merge_update_columns": {
      "name": "get_merge_update_columns",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "unique_id": "macro.dbt.get_merge_update_columns",
      "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_merge_update_columns"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1461127,
      "supported_languages": null
    },
    "macro.dbt.default__get_merge_update_columns": {
      "name": "default__get_merge_update_columns",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "unique_id": "macro.dbt.default__get_merge_update_columns",
      "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1471882,
      "supported_languages": null
    },
    "macro.dbt.can_clone_table": {
      "name": "can_clone_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/clone/can_clone_table.sql",
      "original_file_path": "macros/materializations/models/clone/can_clone_table.sql",
      "unique_id": "macro.dbt.can_clone_table",
      "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__can_clone_table"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1475563,
      "supported_languages": null
    },
    "macro.dbt.default__can_clone_table": {
      "name": "default__can_clone_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/clone/can_clone_table.sql",
      "original_file_path": "macros/materializations/models/clone/can_clone_table.sql",
      "unique_id": "macro.dbt.default__can_clone_table",
      "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1477294,
      "supported_languages": null
    },
    "macro.dbt.materialization_clone_default": {
      "name": "materialization_clone_default",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/clone/clone.sql",
      "original_file_path": "macros/materializations/models/clone/clone.sql",
      "unique_id": "macro.dbt.materialization_clone_default",
      "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation",
          "macro.dbt.can_clone_table",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.statement",
          "macro.dbt.create_or_replace_clone",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1526177,
      "supported_languages": ["sql"]
    },
    "macro.dbt.create_or_replace_clone": {
      "name": "create_or_replace_clone",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/clone/create_or_replace_clone.sql",
      "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql",
      "unique_id": "macro.dbt.create_or_replace_clone",
      "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__create_or_replace_clone"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1531436,
      "supported_languages": null
    },
    "macro.dbt.default__create_or_replace_clone": {
      "name": "default__create_or_replace_clone",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/clone/create_or_replace_clone.sql",
      "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql",
      "unique_id": "macro.dbt.default__create_or_replace_clone",
      "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1533582,
      "supported_languages": null
    },
    "macro.dbt.listagg": {
      "name": "listagg",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/listagg.sql",
      "original_file_path": "macros/utils/listagg.sql",
      "unique_id": "macro.dbt.listagg",
      "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__listagg"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1541204,
      "supported_languages": null
    },
    "macro.dbt.default__listagg": {
      "name": "default__listagg",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/listagg.sql",
      "original_file_path": "macros/utils/listagg.sql",
      "unique_id": "macro.dbt.default__listagg",
      "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.154758,
      "supported_languages": null
    },
    "macro.dbt.array_append": {
      "name": "array_append",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/array_append.sql",
      "original_file_path": "macros/utils/array_append.sql",
      "unique_id": "macro.dbt.array_append",
      "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__array_append"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.155188,
      "supported_languages": null
    },
    "macro.dbt.default__array_append": {
      "name": "default__array_append",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/array_append.sql",
      "original_file_path": "macros/utils/array_append.sql",
      "unique_id": "macro.dbt.default__array_append",
      "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.155388,
      "supported_languages": null
    },
    "macro.dbt.split_part": {
      "name": "split_part",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/split_part.sql",
      "original_file_path": "macros/utils/split_part.sql",
      "unique_id": "macro.dbt.split_part",
      "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__split_part"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1560102,
      "supported_languages": null
    },
    "macro.dbt.default__split_part": {
      "name": "default__split_part",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/split_part.sql",
      "original_file_path": "macros/utils/split_part.sql",
      "unique_id": "macro.dbt.default__split_part",
      "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1562617,
      "supported_languages": null
    },
    "macro.dbt._split_part_negative": {
      "name": "_split_part_negative",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/split_part.sql",
      "original_file_path": "macros/utils/split_part.sql",
      "unique_id": "macro.dbt._split_part_negative",
      "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1566188,
      "supported_languages": null
    },
    "macro.dbt.string_literal": {
      "name": "string_literal",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/literal.sql",
      "original_file_path": "macros/utils/literal.sql",
      "unique_id": "macro.dbt.string_literal",
      "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt.default__string_literal"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.156974,
      "supported_languages": null
    },
    "macro.dbt.default__string_literal": {
      "name": "default__string_literal",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/literal.sql",
      "original_file_path": "macros/utils/literal.sql",
      "unique_id": "macro.dbt.default__string_literal",
      "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.157133,
      "supported_languages": null
    },
    "macro.dbt.datediff": {
      "name": "datediff",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/datediff.sql",
      "original_file_path": "macros/utils/datediff.sql",
      "unique_id": "macro.dbt.datediff",
      "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__datediff"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.157609,
      "supported_languages": null
    },
    "macro.dbt.default__datediff": {
      "name": "default__datediff",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/datediff.sql",
      "original_file_path": "macros/utils/datediff.sql",
      "unique_id": "macro.dbt.default__datediff",
      "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.157855,
      "supported_languages": null
    },
    "macro.dbt.date_trunc": {
      "name": "date_trunc",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/date_trunc.sql",
      "original_file_path": "macros/utils/date_trunc.sql",
      "unique_id": "macro.dbt.date_trunc",
      "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__date_trunc"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1582332,
      "supported_languages": null
    },
    "macro.dbt.default__date_trunc": {
      "name": "default__date_trunc",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/date_trunc.sql",
      "original_file_path": "macros/utils/date_trunc.sql",
      "unique_id": "macro.dbt.default__date_trunc",
      "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.158462,
      "supported_languages": null
    },
    "macro.dbt.any_value": {
      "name": "any_value",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/any_value.sql",
      "original_file_path": "macros/utils/any_value.sql",
      "unique_id": "macro.dbt.any_value",
      "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__any_value"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1588387,
      "supported_languages": null
    },
    "macro.dbt.default__any_value": {
      "name": "default__any_value",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/any_value.sql",
      "original_file_path": "macros/utils/any_value.sql",
      "unique_id": "macro.dbt.default__any_value",
      "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1592915,
      "supported_languages": null
    },
    "macro.dbt.bool_or": {
      "name": "bool_or",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/bool_or.sql",
      "original_file_path": "macros/utils/bool_or.sql",
      "unique_id": "macro.dbt.bool_or",
      "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__bool_or"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1596448,
      "supported_languages": null
    },
    "macro.dbt.default__bool_or": {
      "name": "default__bool_or",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/bool_or.sql",
      "original_file_path": "macros/utils/bool_or.sql",
      "unique_id": "macro.dbt.default__bool_or",
      "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1597996,
      "supported_languages": null
    },
    "macro.dbt.dateadd": {
      "name": "dateadd",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/dateadd.sql",
      "original_file_path": "macros/utils/dateadd.sql",
      "unique_id": "macro.dbt.dateadd",
      "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__dateadd"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.160293,
      "supported_languages": null
    },
    "macro.dbt.default__dateadd": {
      "name": "default__dateadd",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/dateadd.sql",
      "original_file_path": "macros/utils/dateadd.sql",
      "unique_id": "macro.dbt.default__dateadd",
      "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1605422,
      "supported_languages": null
    },
    "macro.dbt.array_concat": {
      "name": "array_concat",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/array_concat.sql",
      "original_file_path": "macros/utils/array_concat.sql",
      "unique_id": "macro.dbt.array_concat",
      "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__array_concat"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1609294,
      "supported_languages": null
    },
    "macro.dbt.default__array_concat": {
      "name": "default__array_concat",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/array_concat.sql",
      "original_file_path": "macros/utils/array_concat.sql",
      "unique_id": "macro.dbt.default__array_concat",
      "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.161128,
      "supported_languages": null
    },
    "macro.dbt.safe_cast": {
      "name": "safe_cast",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/safe_cast.sql",
      "original_file_path": "macros/utils/safe_cast.sql",
      "unique_id": "macro.dbt.safe_cast",
      "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__safe_cast"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1615262,
      "supported_languages": null
    },
    "macro.dbt.default__safe_cast": {
      "name": "default__safe_cast",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/safe_cast.sql",
      "original_file_path": "macros/utils/safe_cast.sql",
      "unique_id": "macro.dbt.default__safe_cast",
      "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1617336,
      "supported_languages": null
    },
    "macro.dbt.last_day": {
      "name": "last_day",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/last_day.sql",
      "original_file_path": "macros/utils/last_day.sql",
      "unique_id": "macro.dbt.last_day",
      "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__last_day"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1622396,
      "supported_languages": null
    },
    "macro.dbt.default_last_day": {
      "name": "default_last_day",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/last_day.sql",
      "original_file_path": "macros/utils/last_day.sql",
      "unique_id": "macro.dbt.default_last_day",
      "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1626341,
      "supported_languages": null
    },
    "macro.dbt.default__last_day": {
      "name": "default__last_day",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/last_day.sql",
      "original_file_path": "macros/utils/last_day.sql",
      "unique_id": "macro.dbt.default__last_day",
      "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default_last_day"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1628897,
      "supported_languages": null
    },
    "macro.dbt.get_powers_of_two": {
      "name": "get_powers_of_two",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/generate_series.sql",
      "original_file_path": "macros/utils/generate_series.sql",
      "unique_id": "macro.dbt.get_powers_of_two",
      "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_powers_of_two"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.163906,
      "supported_languages": null
    },
    "macro.dbt.default__get_powers_of_two": {
      "name": "default__get_powers_of_two",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/generate_series.sql",
      "original_file_path": "macros/utils/generate_series.sql",
      "unique_id": "macro.dbt.default__get_powers_of_two",
      "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.164624,
      "supported_languages": null
    },
    "macro.dbt.generate_series": {
      "name": "generate_series",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/generate_series.sql",
      "original_file_path": "macros/utils/generate_series.sql",
      "unique_id": "macro.dbt.generate_series",
      "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__generate_series"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1649115,
      "supported_languages": null
    },
    "macro.dbt.default__generate_series": {
      "name": "default__generate_series",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/generate_series.sql",
      "original_file_path": "macros/utils/generate_series.sql",
      "unique_id": "macro.dbt.default__generate_series",
      "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.get_powers_of_two"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1657271,
      "supported_languages": null
    },
    "macro.dbt.length": {
      "name": "length",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/length.sql",
      "original_file_path": "macros/utils/length.sql",
      "unique_id": "macro.dbt.length",
      "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__length"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1661098,
      "supported_languages": null
    },
    "macro.dbt.default__length": {
      "name": "default__length",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/length.sql",
      "original_file_path": "macros/utils/length.sql",
      "unique_id": "macro.dbt.default__length",
      "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.16627,
      "supported_languages": null
    },
    "macro.dbt.concat": {
      "name": "concat",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/concat.sql",
      "original_file_path": "macros/utils/concat.sql",
      "unique_id": "macro.dbt.concat",
      "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__concat"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1666167,
      "supported_languages": null
    },
    "macro.dbt.default__concat": {
      "name": "default__concat",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/concat.sql",
      "original_file_path": "macros/utils/concat.sql",
      "unique_id": "macro.dbt.default__concat",
      "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1669059,
      "supported_languages": null
    },
    "macro.dbt.right": {
      "name": "right",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/right.sql",
      "original_file_path": "macros/utils/right.sql",
      "unique_id": "macro.dbt.right",
      "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__right"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1673796,
      "supported_languages": null
    },
    "macro.dbt.default__right": {
      "name": "default__right",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/right.sql",
      "original_file_path": "macros/utils/right.sql",
      "unique_id": "macro.dbt.default__right",
      "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1676745,
      "supported_languages": null
    },
    "macro.dbt.escape_single_quotes": {
      "name": "escape_single_quotes",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/escape_single_quotes.sql",
      "original_file_path": "macros/utils/escape_single_quotes.sql",
      "unique_id": "macro.dbt.escape_single_quotes",
      "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__escape_single_quotes"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1681378,
      "supported_languages": null
    },
    "macro.dbt.default__escape_single_quotes": {
      "name": "default__escape_single_quotes",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/escape_single_quotes.sql",
      "original_file_path": "macros/utils/escape_single_quotes.sql",
      "unique_id": "macro.dbt.default__escape_single_quotes",
      "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1683912,
      "supported_languages": null
    },
    "macro.dbt.position": {
      "name": "position",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/position.sql",
      "original_file_path": "macros/utils/position.sql",
      "unique_id": "macro.dbt.position",
      "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__position"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1689882,
      "supported_languages": null
    },
    "macro.dbt.default__position": {
      "name": "default__position",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/position.sql",
      "original_file_path": "macros/utils/position.sql",
      "unique_id": "macro.dbt.default__position",
      "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1692753,
      "supported_languages": null
    },
    "macro.dbt.replace": {
      "name": "replace",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/replace.sql",
      "original_file_path": "macros/utils/replace.sql",
      "unique_id": "macro.dbt.replace",
      "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__replace"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.169902,
      "supported_languages": null
    },
    "macro.dbt.default__replace": {
      "name": "default__replace",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/replace.sql",
      "original_file_path": "macros/utils/replace.sql",
      "unique_id": "macro.dbt.default__replace",
      "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1702304,
      "supported_languages": null
    },
    "macro.dbt.get_intervals_between": {
      "name": "get_intervals_between",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/date_spine.sql",
      "original_file_path": "macros/utils/date_spine.sql",
      "unique_id": "macro.dbt.get_intervals_between",
      "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_intervals_between"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1715682,
      "supported_languages": null
    },
    "macro.dbt.default__get_intervals_between": {
      "name": "default__get_intervals_between",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/date_spine.sql",
      "original_file_path": "macros/utils/date_spine.sql",
      "unique_id": "macro.dbt.default__get_intervals_between",
      "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement", "macro.dbt.datediff"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1726625,
      "supported_languages": null
    },
    "macro.dbt.date_spine": {
      "name": "date_spine",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/date_spine.sql",
      "original_file_path": "macros/utils/date_spine.sql",
      "unique_id": "macro.dbt.date_spine",
      "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__date_spine"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1731026,
      "supported_languages": null
    },
    "macro.dbt.default__date_spine": {
      "name": "default__date_spine",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/date_spine.sql",
      "original_file_path": "macros/utils/date_spine.sql",
      "unique_id": "macro.dbt.default__date_spine",
      "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.generate_series",
          "macro.dbt.get_intervals_between",
          "macro.dbt.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.173668,
      "supported_languages": null
    },
    "macro.dbt.cast_bool_to_text": {
      "name": "cast_bool_to_text",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/cast_bool_to_text.sql",
      "original_file_path": "macros/utils/cast_bool_to_text.sql",
      "unique_id": "macro.dbt.cast_bool_to_text",
      "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__cast_bool_to_text"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.174192,
      "supported_languages": null
    },
    "macro.dbt.default__cast_bool_to_text": {
      "name": "default__cast_bool_to_text",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/cast_bool_to_text.sql",
      "original_file_path": "macros/utils/cast_bool_to_text.sql",
      "unique_id": "macro.dbt.default__cast_bool_to_text",
      "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1744945,
      "supported_languages": null
    },
    "macro.dbt.type_string": {
      "name": "type_string",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.type_string",
      "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt.default__type_string"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1759398,
      "supported_languages": null
    },
    "macro.dbt.default__type_string": {
      "name": "default__type_string",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.default__type_string",
      "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1762211,
      "supported_languages": null
    },
    "macro.dbt.type_timestamp": {
      "name": "type_timestamp",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.type_timestamp",
      "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt.default__type_timestamp"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1764665,
      "supported_languages": null
    },
    "macro.dbt.default__type_timestamp": {
      "name": "default__type_timestamp",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.default__type_timestamp",
      "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1768017,
      "supported_languages": null
    },
    "macro.dbt.type_float": {
      "name": "type_float",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.type_float",
      "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt.default__type_float"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1770585,
      "supported_languages": null
    },
    "macro.dbt.default__type_float": {
      "name": "default__type_float",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.default__type_float",
      "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1772861,
      "supported_languages": null
    },
    "macro.dbt.type_numeric": {
      "name": "type_numeric",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.type_numeric",
      "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt.default__type_numeric"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1776009,
      "supported_languages": null
    },
    "macro.dbt.default__type_numeric": {
      "name": "default__type_numeric",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.default__type_numeric",
      "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1778865,
      "supported_languages": null
    },
    "macro.dbt.type_bigint": {
      "name": "type_bigint",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.type_bigint",
      "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt.default__type_bigint"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1781456,
      "supported_languages": null
    },
    "macro.dbt.default__type_bigint": {
      "name": "default__type_bigint",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.default__type_bigint",
      "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1783795,
      "supported_languages": null
    },
    "macro.dbt.type_int": {
      "name": "type_int",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.type_int",
      "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt.default__type_int"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1786263,
      "supported_languages": null
    },
    "macro.dbt.default__type_int": {
      "name": "default__type_int",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.default__type_int",
      "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.178873,
      "supported_languages": null
    },
    "macro.dbt.type_boolean": {
      "name": "type_boolean",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.type_boolean",
      "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt.default__type_boolean"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1791332,
      "supported_languages": null
    },
    "macro.dbt.default__type_boolean": {
      "name": "default__type_boolean",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.default__type_boolean",
      "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1794696,
      "supported_languages": null
    },
    "macro.dbt.intersect": {
      "name": "intersect",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/intersect.sql",
      "original_file_path": "macros/utils/intersect.sql",
      "unique_id": "macro.dbt.intersect",
      "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__intersect"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1798964,
      "supported_languages": null
    },
    "macro.dbt.default__intersect": {
      "name": "default__intersect",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/intersect.sql",
      "original_file_path": "macros/utils/intersect.sql",
      "unique_id": "macro.dbt.default__intersect",
      "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1800406,
      "supported_languages": null
    },
    "macro.dbt.array_construct": {
      "name": "array_construct",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/array_construct.sql",
      "original_file_path": "macros/utils/array_construct.sql",
      "unique_id": "macro.dbt.array_construct",
      "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__array_construct"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1807265,
      "supported_languages": null
    },
    "macro.dbt.default__array_construct": {
      "name": "default__array_construct",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/array_construct.sql",
      "original_file_path": "macros/utils/array_construct.sql",
      "unique_id": "macro.dbt.default__array_construct",
      "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1812296,
      "supported_languages": null
    },
    "macro.dbt.except": {
      "name": "except",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/except.sql",
      "original_file_path": "macros/utils/except.sql",
      "unique_id": "macro.dbt.except",
      "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__except"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.181649,
      "supported_languages": null
    },
    "macro.dbt.default__except": {
      "name": "default__except",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/except.sql",
      "original_file_path": "macros/utils/except.sql",
      "unique_id": "macro.dbt.default__except",
      "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.181772,
      "supported_languages": null
    },
    "macro.dbt.hash": {
      "name": "hash",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/hash.sql",
      "original_file_path": "macros/utils/hash.sql",
      "unique_id": "macro.dbt.hash",
      "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.my_nesso_project.default__hash"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1821587,
      "supported_languages": null
    },
    "macro.dbt.default__hash": {
      "name": "default__hash",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/hash.sql",
      "original_file_path": "macros/utils/hash.sql",
      "unique_id": "macro.dbt.default__hash",
      "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1824245,
      "supported_languages": null
    },
    "macro.dbt.get_rename_sql": {
      "name": "get_rename_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/rename.sql",
      "original_file_path": "macros/relations/rename.sql",
      "unique_id": "macro.dbt.get_rename_sql",
      "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": ["macro.dbt.default__get_rename_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1835792,
      "supported_languages": null
    },
    "macro.dbt.default__get_rename_sql": {
      "name": "default__get_rename_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/rename.sql",
      "original_file_path": "macros/relations/rename.sql",
      "unique_id": "macro.dbt.default__get_rename_sql",
      "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.get_rename_view_sql",
          "macro.dbt.get_rename_table_sql",
          "macro.dbt.get_rename_materialized_view_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1845474,
      "supported_languages": null
    },
    "macro.dbt.rename_relation": {
      "name": "rename_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/rename.sql",
      "original_file_path": "macros/relations/rename.sql",
      "unique_id": "macro.dbt.rename_relation",
      "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__rename_relation"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1849978,
      "supported_languages": null
    },
    "macro.dbt.default__rename_relation": {
      "name": "default__rename_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/rename.sql",
      "original_file_path": "macros/relations/rename.sql",
      "unique_id": "macro.dbt.default__rename_relation",
      "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1855528,
      "supported_languages": null
    },
    "macro.dbt.get_create_intermediate_sql": {
      "name": "get_create_intermediate_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/create_intermediate.sql",
      "original_file_path": "macros/relations/create_intermediate.sql",
      "unique_id": "macro.dbt.get_create_intermediate_sql",
      "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": ["macro.dbt.default__get_create_intermediate_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1863039,
      "supported_languages": null
    },
    "macro.dbt.default__get_create_intermediate_sql": {
      "name": "default__get_create_intermediate_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/create_intermediate.sql",
      "original_file_path": "macros/relations/create_intermediate.sql",
      "unique_id": "macro.dbt.default__get_create_intermediate_sql",
      "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.get_drop_sql",
          "macro.dbt.get_create_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1868281,
      "supported_languages": null
    },
    "macro.dbt.get_drop_sql": {
      "name": "get_drop_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/drop.sql",
      "original_file_path": "macros/relations/drop.sql",
      "unique_id": "macro.dbt.get_drop_sql",
      "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": ["macro.dbt.default__get_drop_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1878767,
      "supported_languages": null
    },
    "macro.dbt.default__get_drop_sql": {
      "name": "default__get_drop_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/drop.sql",
      "original_file_path": "macros/relations/drop.sql",
      "unique_id": "macro.dbt.default__get_drop_sql",
      "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.drop_view",
          "macro.dbt.drop_table",
          "macro.dbt.drop_materialized_view"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1885355,
      "supported_languages": null
    },
    "macro.dbt.drop_relation": {
      "name": "drop_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/drop.sql",
      "original_file_path": "macros/relations/drop.sql",
      "unique_id": "macro.dbt.drop_relation",
      "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__drop_relation"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1888561,
      "supported_languages": null
    },
    "macro.dbt.default__drop_relation": {
      "name": "default__drop_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/drop.sql",
      "original_file_path": "macros/relations/drop.sql",
      "unique_id": "macro.dbt.default__drop_relation",
      "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1891785,
      "supported_languages": null
    },
    "macro.dbt.drop_relation_if_exists": {
      "name": "drop_relation_if_exists",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/drop.sql",
      "original_file_path": "macros/relations/drop.sql",
      "unique_id": "macro.dbt.drop_relation_if_exists",
      "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1894855,
      "supported_languages": null
    },
    "macro.dbt.get_replace_sql": {
      "name": "get_replace_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/replace.sql",
      "original_file_path": "macros/relations/replace.sql",
      "unique_id": "macro.dbt.get_replace_sql",
      "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_replace_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1905057,
      "supported_languages": null
    },
    "macro.dbt.default__get_replace_sql": {
      "name": "default__get_replace_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/replace.sql",
      "original_file_path": "macros/relations/replace.sql",
      "unique_id": "macro.dbt.default__get_replace_sql",
      "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_replace_view_sql",
          "macro.dbt.get_replace_table_sql",
          "macro.dbt.get_replace_materialized_view_sql",
          "macro.dbt.get_create_intermediate_sql",
          "macro.dbt.get_create_backup_sql",
          "macro.dbt.get_rename_intermediate_sql",
          "macro.dbt.get_drop_backup_sql",
          "macro.dbt.get_drop_sql",
          "macro.dbt.get_create_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1923814,
      "supported_languages": null
    },
    "macro.dbt.get_rename_intermediate_sql": {
      "name": "get_rename_intermediate_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/rename_intermediate.sql",
      "original_file_path": "macros/relations/rename_intermediate.sql",
      "unique_id": "macro.dbt.get_rename_intermediate_sql",
      "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": ["macro.dbt.default__get_rename_intermediate_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.192882,
      "supported_languages": null
    },
    "macro.dbt.default__get_rename_intermediate_sql": {
      "name": "default__get_rename_intermediate_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/rename_intermediate.sql",
      "original_file_path": "macros/relations/rename_intermediate.sql",
      "unique_id": "macro.dbt.default__get_rename_intermediate_sql",
      "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.get_rename_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1932275,
      "supported_languages": null
    },
    "macro.dbt.get_create_sql": {
      "name": "get_create_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/create.sql",
      "original_file_path": "macros/relations/create.sql",
      "unique_id": "macro.dbt.get_create_sql",
      "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": ["macro.dbt.default__get_create_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1938422,
      "supported_languages": null
    },
    "macro.dbt.default__get_create_sql": {
      "name": "default__get_create_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/create.sql",
      "original_file_path": "macros/relations/create.sql",
      "unique_id": "macro.dbt.default__get_create_sql",
      "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_create_view_as_sql",
          "macro.dbt.get_create_table_as_sql",
          "macro.dbt.get_create_materialized_view_as_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1945724,
      "supported_languages": null
    },
    "macro.dbt.get_create_backup_sql": {
      "name": "get_create_backup_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/create_backup.sql",
      "original_file_path": "macros/relations/create_backup.sql",
      "unique_id": "macro.dbt.get_create_backup_sql",
      "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": ["macro.dbt.default__get_create_backup_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1950872,
      "supported_languages": null
    },
    "macro.dbt.default__get_create_backup_sql": {
      "name": "default__get_create_backup_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/create_backup.sql",
      "original_file_path": "macros/relations/create_backup.sql",
      "unique_id": "macro.dbt.default__get_create_backup_sql",
      "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.make_backup_relation",
          "macro.dbt.get_drop_sql",
          "macro.dbt.get_rename_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.195489,
      "supported_languages": null
    },
    "macro.dbt.get_drop_backup_sql": {
      "name": "get_drop_backup_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/drop_backup.sql",
      "original_file_path": "macros/relations/drop_backup.sql",
      "unique_id": "macro.dbt.get_drop_backup_sql",
      "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": ["macro.dbt.default__get_drop_backup_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1959343,
      "supported_languages": null
    },
    "macro.dbt.default__get_drop_backup_sql": {
      "name": "default__get_drop_backup_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/drop_backup.sql",
      "original_file_path": "macros/relations/drop_backup.sql",
      "unique_id": "macro.dbt.default__get_drop_backup_sql",
      "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1962416,
      "supported_languages": null
    },
    "macro.dbt.get_rename_materialized_view_sql": {
      "name": "get_rename_materialized_view_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/materialized_view/rename.sql",
      "original_file_path": "macros/relations/materialized_view/rename.sql",
      "unique_id": "macro.dbt.get_rename_materialized_view_sql",
      "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_rename_materialized_view_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1966562,
      "supported_languages": null
    },
    "macro.dbt.default__get_rename_materialized_view_sql": {
      "name": "default__get_rename_materialized_view_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/materialized_view/rename.sql",
      "original_file_path": "macros/relations/materialized_view/rename.sql",
      "unique_id": "macro.dbt.default__get_rename_materialized_view_sql",
      "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1970127,
      "supported_languages": null
    },
    "macro.dbt.refresh_materialized_view": {
      "name": "refresh_materialized_view",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/materialized_view/refresh.sql",
      "original_file_path": "macros/relations/materialized_view/refresh.sql",
      "unique_id": "macro.dbt.refresh_materialized_view",
      "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__refresh_materialized_view"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.197473,
      "supported_languages": null
    },
    "macro.dbt.default__refresh_materialized_view": {
      "name": "default__refresh_materialized_view",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/materialized_view/refresh.sql",
      "original_file_path": "macros/relations/materialized_view/refresh.sql",
      "unique_id": "macro.dbt.default__refresh_materialized_view",
      "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.197676,
      "supported_languages": null
    },
    "macro.dbt.drop_materialized_view": {
      "name": "drop_materialized_view",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/materialized_view/drop.sql",
      "original_file_path": "macros/relations/materialized_view/drop.sql",
      "unique_id": "macro.dbt.drop_materialized_view",
      "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__drop_materialized_view"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1980803,
      "supported_languages": null
    },
    "macro.dbt.default__drop_materialized_view": {
      "name": "default__drop_materialized_view",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/materialized_view/drop.sql",
      "original_file_path": "macros/relations/materialized_view/drop.sql",
      "unique_id": "macro.dbt.default__drop_materialized_view",
      "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1982467,
      "supported_languages": null
    },
    "macro.dbt.get_replace_materialized_view_sql": {
      "name": "get_replace_materialized_view_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/materialized_view/replace.sql",
      "original_file_path": "macros/relations/materialized_view/replace.sql",
      "unique_id": "macro.dbt.get_replace_materialized_view_sql",
      "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_replace_materialized_view_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1986783,
      "supported_languages": null
    },
    "macro.dbt.default__get_replace_materialized_view_sql": {
      "name": "default__get_replace_materialized_view_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/materialized_view/replace.sql",
      "original_file_path": "macros/relations/materialized_view/replace.sql",
      "unique_id": "macro.dbt.default__get_replace_materialized_view_sql",
      "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1989007,
      "supported_languages": null
    },
    "macro.dbt.get_alter_materialized_view_as_sql": {
      "name": "get_alter_materialized_view_as_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/materialized_view/alter.sql",
      "original_file_path": "macros/relations/materialized_view/alter.sql",
      "unique_id": "macro.dbt.get_alter_materialized_view_as_sql",
      "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.1997306,
      "supported_languages": null
    },
    "macro.dbt.default__get_alter_materialized_view_as_sql": {
      "name": "default__get_alter_materialized_view_as_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/materialized_view/alter.sql",
      "original_file_path": "macros/relations/materialized_view/alter.sql",
      "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql",
      "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.200049,
      "supported_languages": null
    },
    "macro.dbt.get_materialized_view_configuration_changes": {
      "name": "get_materialized_view_configuration_changes",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/materialized_view/alter.sql",
      "original_file_path": "macros/relations/materialized_view/alter.sql",
      "unique_id": "macro.dbt.get_materialized_view_configuration_changes",
      "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_materialized_view_configuration_changes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2005033,
      "supported_languages": null
    },
    "macro.dbt.default__get_materialized_view_configuration_changes": {
      "name": "default__get_materialized_view_configuration_changes",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/materialized_view/alter.sql",
      "original_file_path": "macros/relations/materialized_view/alter.sql",
      "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes",
      "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2007234,
      "supported_languages": null
    },
    "macro.dbt.get_create_materialized_view_as_sql": {
      "name": "get_create_materialized_view_as_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/materialized_view/create.sql",
      "original_file_path": "macros/relations/materialized_view/create.sql",
      "unique_id": "macro.dbt.get_create_materialized_view_as_sql",
      "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2011094,
      "supported_languages": null
    },
    "macro.dbt.default__get_create_materialized_view_as_sql": {
      "name": "default__get_create_materialized_view_as_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/materialized_view/create.sql",
      "original_file_path": "macros/relations/materialized_view/create.sql",
      "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql",
      "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.201323,
      "supported_languages": null
    },
    "macro.dbt.get_table_columns_and_constraints": {
      "name": "get_table_columns_and_constraints",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/column/columns_spec_ddl.sql",
      "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
      "unique_id": "macro.dbt.get_table_columns_and_constraints",
      "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt.default__get_table_columns_and_constraints"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2025435,
      "supported_languages": null
    },
    "macro.dbt.default__get_table_columns_and_constraints": {
      "name": "default__get_table_columns_and_constraints",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/column/columns_spec_ddl.sql",
      "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
      "unique_id": "macro.dbt.default__get_table_columns_and_constraints",
      "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.table_columns_and_constraints"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2027445,
      "supported_languages": null
    },
    "macro.dbt.table_columns_and_constraints": {
      "name": "table_columns_and_constraints",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/column/columns_spec_ddl.sql",
      "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
      "unique_id": "macro.dbt.table_columns_and_constraints",
      "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2037225,
      "supported_languages": null
    },
    "macro.dbt.get_assert_columns_equivalent": {
      "name": "get_assert_columns_equivalent",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/column/columns_spec_ddl.sql",
      "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
      "unique_id": "macro.dbt.get_assert_columns_equivalent",
      "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt.default__get_assert_columns_equivalent"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.204004,
      "supported_languages": null
    },
    "macro.dbt.default__get_assert_columns_equivalent": {
      "name": "default__get_assert_columns_equivalent",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/column/columns_spec_ddl.sql",
      "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
      "unique_id": "macro.dbt.default__get_assert_columns_equivalent",
      "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.assert_columns_equivalent"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2042098,
      "supported_languages": null
    },
    "macro.dbt.assert_columns_equivalent": {
      "name": "assert_columns_equivalent",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/column/columns_spec_ddl.sql",
      "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
      "unique_id": "macro.dbt.assert_columns_equivalent",
      "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_column_schema_from_query",
          "macro.dbt.get_empty_schema_sql",
          "macro.dbt.format_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.206296,
      "supported_languages": null
    },
    "macro.dbt.format_columns": {
      "name": "format_columns",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/column/columns_spec_ddl.sql",
      "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
      "unique_id": "macro.dbt.format_columns",
      "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.codegen.format_column",
          "macro.dbt.default__format_column"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.206867,
      "supported_languages": null
    },
    "macro.dbt.default__format_column": {
      "name": "default__format_column",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/column/columns_spec_ddl.sql",
      "original_file_path": "macros/relations/column/columns_spec_ddl.sql",
      "unique_id": "macro.dbt.default__format_column",
      "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2074356,
      "supported_languages": null
    },
    "macro.dbt.get_rename_view_sql": {
      "name": "get_rename_view_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/view/rename.sql",
      "original_file_path": "macros/relations/view/rename.sql",
      "unique_id": "macro.dbt.get_rename_view_sql",
      "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_rename_view_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2078557,
      "supported_languages": null
    },
    "macro.dbt.default__get_rename_view_sql": {
      "name": "default__get_rename_view_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/view/rename.sql",
      "original_file_path": "macros/relations/view/rename.sql",
      "unique_id": "macro.dbt.default__get_rename_view_sql",
      "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2080746,
      "supported_languages": null
    },
    "macro.dbt.drop_view": {
      "name": "drop_view",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/view/drop.sql",
      "original_file_path": "macros/relations/view/drop.sql",
      "unique_id": "macro.dbt.drop_view",
      "macro_sql": "{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__drop_view"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2084463,
      "supported_languages": null
    },
    "macro.dbt.default__drop_view": {
      "name": "default__drop_view",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/view/drop.sql",
      "original_file_path": "macros/relations/view/drop.sql",
      "unique_id": "macro.dbt.default__drop_view",
      "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2086046,
      "supported_languages": null
    },
    "macro.dbt.get_replace_view_sql": {
      "name": "get_replace_view_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/view/replace.sql",
      "original_file_path": "macros/relations/view/replace.sql",
      "unique_id": "macro.dbt.get_replace_view_sql",
      "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_replace_view_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2096982,
      "supported_languages": null
    },
    "macro.dbt.default__get_replace_view_sql": {
      "name": "default__get_replace_view_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/view/replace.sql",
      "original_file_path": "macros/relations/view/replace.sql",
      "unique_id": "macro.dbt.default__get_replace_view_sql",
      "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2099397,
      "supported_languages": null
    },
    "macro.dbt.create_or_replace_view": {
      "name": "create_or_replace_view",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/view/replace.sql",
      "original_file_path": "macros/relations/view/replace.sql",
      "unique_id": "macro.dbt.create_or_replace_view",
      "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.run_hooks",
          "macro.dbt.handle_existing_table",
          "macro.dbt.should_full_refresh",
          "macro.dbt.statement",
          "macro.dbt.get_create_view_as_sql",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2116394,
      "supported_languages": null
    },
    "macro.dbt.handle_existing_table": {
      "name": "handle_existing_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/view/replace.sql",
      "original_file_path": "macros/relations/view/replace.sql",
      "unique_id": "macro.dbt.handle_existing_table",
      "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__handle_existing_table"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2119286,
      "supported_languages": null
    },
    "macro.dbt.default__handle_existing_table": {
      "name": "default__handle_existing_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/view/replace.sql",
      "original_file_path": "macros/relations/view/replace.sql",
      "unique_id": "macro.dbt.default__handle_existing_table",
      "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.212284,
      "supported_languages": null
    },
    "macro.dbt.get_create_view_as_sql": {
      "name": "get_create_view_as_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/view/create.sql",
      "original_file_path": "macros/relations/view/create.sql",
      "unique_id": "macro.dbt.get_create_view_as_sql",
      "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_create_view_as_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2128475,
      "supported_languages": null
    },
    "macro.dbt.default__get_create_view_as_sql": {
      "name": "default__get_create_view_as_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/view/create.sql",
      "original_file_path": "macros/relations/view/create.sql",
      "unique_id": "macro.dbt.default__get_create_view_as_sql",
      "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.create_view_as"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2130923,
      "supported_languages": null
    },
    "macro.dbt.create_view_as": {
      "name": "create_view_as",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/view/create.sql",
      "original_file_path": "macros/relations/view/create.sql",
      "unique_id": "macro.dbt.create_view_as",
      "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__create_view_as"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2133589,
      "supported_languages": null
    },
    "macro.dbt.default__create_view_as": {
      "name": "default__create_view_as",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/view/create.sql",
      "original_file_path": "macros/relations/view/create.sql",
      "unique_id": "macro.dbt.default__create_view_as",
      "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.get_assert_columns_equivalent"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2140079,
      "supported_languages": null
    },
    "macro.dbt.get_rename_table_sql": {
      "name": "get_rename_table_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/table/rename.sql",
      "original_file_path": "macros/relations/table/rename.sql",
      "unique_id": "macro.dbt.get_rename_table_sql",
      "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_rename_table_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2144306,
      "supported_languages": null
    },
    "macro.dbt.default__get_rename_table_sql": {
      "name": "default__get_rename_table_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/table/rename.sql",
      "original_file_path": "macros/relations/table/rename.sql",
      "unique_id": "macro.dbt.default__get_rename_table_sql",
      "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2146592,
      "supported_languages": null
    },
    "macro.dbt.drop_table": {
      "name": "drop_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/table/drop.sql",
      "original_file_path": "macros/relations/table/drop.sql",
      "unique_id": "macro.dbt.drop_table",
      "macro_sql": "{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__drop_table"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2150266,
      "supported_languages": null
    },
    "macro.dbt.default__drop_table": {
      "name": "default__drop_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/table/drop.sql",
      "original_file_path": "macros/relations/table/drop.sql",
      "unique_id": "macro.dbt.default__drop_table",
      "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.21519,
      "supported_languages": null
    },
    "macro.dbt.get_replace_table_sql": {
      "name": "get_replace_table_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/table/replace.sql",
      "original_file_path": "macros/relations/table/replace.sql",
      "unique_id": "macro.dbt.get_replace_table_sql",
      "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_replace_table_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2155597,
      "supported_languages": null
    },
    "macro.dbt.default__get_replace_table_sql": {
      "name": "default__get_replace_table_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/table/replace.sql",
      "original_file_path": "macros/relations/table/replace.sql",
      "unique_id": "macro.dbt.default__get_replace_table_sql",
      "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2159061,
      "supported_languages": null
    },
    "macro.dbt.get_create_table_as_sql": {
      "name": "get_create_table_as_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/table/create.sql",
      "original_file_path": "macros/relations/table/create.sql",
      "unique_id": "macro.dbt.get_create_table_as_sql",
      "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_create_table_as_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2169352,
      "supported_languages": null
    },
    "macro.dbt.default__get_create_table_as_sql": {
      "name": "default__get_create_table_as_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/table/create.sql",
      "original_file_path": "macros/relations/table/create.sql",
      "unique_id": "macro.dbt.default__get_create_table_as_sql",
      "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.create_table_as"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.217213,
      "supported_languages": null
    },
    "macro.dbt.create_table_as": {
      "name": "create_table_as",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/table/create.sql",
      "original_file_path": "macros/relations/table/create.sql",
      "unique_id": "macro.dbt.create_table_as",
      "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_duckdb.duckdb__create_table_as"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2179232,
      "supported_languages": null
    },
    "macro.dbt.default__create_table_as": {
      "name": "default__create_table_as",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/table/create.sql",
      "original_file_path": "macros/relations/table/create.sql",
      "unique_id": "macro.dbt.default__create_table_as",
      "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_assert_columns_equivalent",
          "macro.dbt.get_table_columns_and_constraints",
          "macro.dbt.get_select_subquery"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2189817,
      "supported_languages": null
    },
    "macro.dbt.default__get_column_names": {
      "name": "default__get_column_names",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/table/create.sql",
      "original_file_path": "macros/relations/table/create.sql",
      "unique_id": "macro.dbt.default__get_column_names",
      "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2197435,
      "supported_languages": null
    },
    "macro.dbt.get_select_subquery": {
      "name": "get_select_subquery",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/table/create.sql",
      "original_file_path": "macros/relations/table/create.sql",
      "unique_id": "macro.dbt.get_select_subquery",
      "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.default__get_select_subquery"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2200282,
      "supported_languages": null
    },
    "macro.dbt.default__get_select_subquery": {
      "name": "default__get_select_subquery",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/relations/table/create.sql",
      "original_file_path": "macros/relations/table/create.sql",
      "unique_id": "macro.dbt.default__get_select_subquery",
      "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_duckdb.get_column_names",
          "macro.dbt.default__get_column_names"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.220293,
      "supported_languages": null
    },
    "macro.dbt.test_unique": {
      "name": "test_unique",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "unique_id": "macro.dbt.test_unique",
      "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt.default__test_unique"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2209854,
      "supported_languages": null
    },
    "macro.dbt.test_not_null": {
      "name": "test_not_null",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "unique_id": "macro.dbt.test_not_null",
      "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt.default__test_not_null"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2213333,
      "supported_languages": null
    },
    "macro.dbt.test_accepted_values": {
      "name": "test_accepted_values",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "unique_id": "macro.dbt.test_accepted_values",
      "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt.default__test_accepted_values"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2217479,
      "supported_languages": null
    },
    "macro.dbt.test_relationships": {
      "name": "test_relationships",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "unique_id": "macro.dbt.test_relationships",
      "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt.default__test_relationships"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2221446,
      "supported_languages": null
    },
    "macro.codegen.generate_model_import_ctes": {
      "name": "generate_model_import_ctes",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/generate_model_import_ctes.sql",
      "original_file_path": "macros/generate_model_import_ctes.sql",
      "unique_id": "macro.codegen.generate_model_import_ctes",
      "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = false) %}\n\n    {%- if execute -%}\n    {%- set nodes = graph.nodes.values() -%}\n\n    {%- set model = (nodes\n        | selectattr('name', 'equalto', model_name) \n        | selectattr('resource_type', 'equalto', 'model')\n        | list).pop() -%}\n\n    {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n    {%- else -%}\n    {%- set model_raw_sql = '' -%}\n    {%- endif -%}\n\n    {#-\n\n        REGEX Explanations\n\n        # with_regex\n        - matches (start of file followed by anything then whitespace\n        or whitespace\n        or a comma) followed by the word with then a space   \n\n        # from_ref \n        - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n        # from_source \n        - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n        # from_var_1\n        - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n        # from_var_2\n        - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n        # from_table_1\n        - matches (from or join) followed by some spaces and then <something>.<something_else>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_2\n        - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_3\n        - matches (from or join) followed by some spaces and then <something>\n          where <something> is enclosed by (` or [ or \" or ')\n\n        # config block\n        - matches the start of the file followed by anything and then {{config(<something>)}}\n\n    -#}\n\n    {%- set re = modules.re -%}\n\n    {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n    {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n    {%- set from_regexes = {\n        'from_ref':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), ref, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)\n            \n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n        \n            ',\n        'from_source':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), source, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*source\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark\n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n\n            ',\n        'from_var_1':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n            \n            ',\n        'from_var_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n            \n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark            \n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)            \n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}            \n            (\\)\\s*}})\n            \n            ',\n        'from_table_1':\n            '(?ix)\n            \n            # first matching group\n            # from or join followed by at least 1 whitespace character            \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)\n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period\n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # seventh matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n\n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)            \n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period            \n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n\n            # seventh matching group\n            # at least 1 word character            \n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) \n            ([\\]`\\\"\\']?)\n            \n            # ninth matching group\n            # a period             \n            (\\.)\n            \n            # tenth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)             \n            ([\\[`\\\"\\']?)\n            \n            # eleventh matching group\n            # at least 1 word character   \n            (\\w+)\n\n            # twelfth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_3':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character             \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\'])\n            \n            # third matching group\n            # at least 1 word character or space \n            ([\\w ]+)\n\n            # fourth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\'])(?=\\s|$)\n            \n            ',\n        'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n    } -%}\n\n    {%- set from_list = [] -%}\n    {%- set config_list = [] -%}\n    {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n    {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n        {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n        {%- for match in all_regex_matches -%}\n\n            {%- if regex_name == 'config_block' -%}\n                {%- set match_tuple = (match|trim, regex_name) -%}\n                {%- do config_list.append(match_tuple) -%}\n            {%- elif regex_name == 'from_source' -%}    \n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = 'source_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%} \n            {%- elif regex_name == 'from_table_1' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}   \n            {%- elif regex_name == 'from_table_2' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}                     \n            {%- else -%}\n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = match[2]|trim|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n        {%- if regex_name == 'config_block' -%}\n        {%- elif regex_name == 'from_source' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%}            \n        {%- elif regex_name == 'from_table_1' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%}     \n        {%- elif regex_name == 'from_table_2' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n        {%- else -%}   \n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%}         \n        {% endif %}\n\n    {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n    {%- for config_obj in config_list -%}\n\n    {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n    {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n    select * from {{ from_obj[1] }}\n    {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n    -- CAUTION: It's best practice to create staging layer for raw sources\n    {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n    {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a var\n    {%- endif %}\n  \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n    {%- if leading_commas -%}\n        {%- set replace_with = '\\g<1>,' -%}\n    {%- else -%}\n        {%- set replace_with = '\\g<1>' -%}\n    {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ log(model_import_ctes, info=True) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.236276,
      "supported_languages": null
    },
    "macro.codegen.get_tables_in_schema": {
      "name": "get_tables_in_schema",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/generate_source.sql",
      "original_file_path": "macros/generate_source.sql",
      "unique_id": "macro.codegen.get_tables_in_schema",
      "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.get_relations_by_pattern"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2389948,
      "supported_languages": null
    },
    "macro.codegen.generate_source": {
      "name": "generate_source",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/generate_source.sql",
      "original_file_path": "macros/generate_source.sql",
      "unique_id": "macro.codegen.generate_source",
      "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, include_data_types=True, table_pattern='%', exclude='', name=schema_name, table_names=None, include_database=False, include_schema=False) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database or include_database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name or include_schema %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_data_types %}\n                {% do sources_yaml.append('            data_type: ' ~ codegen.data_type_format_source(column)) %}\n            {% endif %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.codegen.get_tables_in_schema",
          "macro.codegen.data_type_format_source"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2432053,
      "supported_languages": null
    },
    "macro.codegen.generate_base_model": {
      "name": "generate_base_model",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/generate_base_model.sql",
      "original_file_path": "macros/generate_base_model.sql",
      "unique_id": "macro.codegen.generate_base_model",
      "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n    {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2462223,
      "supported_languages": null
    },
    "macro.codegen.create_base_models": {
      "name": "create_base_models",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/create_base_models.sql",
      "original_file_path": "macros/create_base_models.sql",
      "unique_id": "macro.codegen.create_base_models",
      "macro_sql": "{% macro create_base_models(source_name, tables) %}\n\n{% set source_name = \"\"~ source_name ~\"\" %}\n\n{% set zsh_command_models = \"source dbt_packages/codegen/bash_scripts/base_model_creation.sh \"\"\"~ source_name ~\"\"\" \" %}\n\n{%- set models_array = [] -%}\n\n{% for t in tables %}\n    {% set help_command = zsh_command_models + t %}\n    {{ models_array.append(help_command) }}\n{% endfor %}\n\n{{ log(\"Run these commands in your shell to generate the models:\\n\" ~ models_array|join(' && \\n'), info=True) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.247253,
      "supported_languages": null
    },
    "macro.codegen.generate_column_yaml": {
      "name": "generate_column_yaml",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/generate_model_yaml.sql",
      "original_file_path": "macros/generate_model_yaml.sql",
      "unique_id": "macro.codegen.generate_column_yaml",
      "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types, parent_column_name=\"\") %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column_name  | lower ) %}\n    {% if include_data_types %}\n        {% do model_yaml.append('        data_type: ' ~ codegen.data_type_format_model(column)) %}\n    {% endif %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, include_data_types, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.codegen.data_type_format_model",
          "macro.codegen.generate_column_yaml"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2503564,
      "supported_languages": null
    },
    "macro.codegen.generate_model_yaml": {
      "name": "generate_model_yaml",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/generate_model_yaml.sql",
      "original_file_path": "macros/generate_model_yaml.sql",
      "unique_id": "macro.codegen.generate_model_yaml",
      "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False, include_data_types=True) %}\n\n    {% set model_yaml=[] %}\n\n    {% do model_yaml.append('version: 2') %}\n    {% do model_yaml.append('') %}\n    {% do model_yaml.append('models:') %}\n\n    {% if model_names is string %}\n        {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n    {% else %}\n        {% for model in model_names %}\n            {% do model_yaml.append('  - name: ' ~ model | lower) %}\n            {% do model_yaml.append('    description: \"\"') %}\n            {% do model_yaml.append('    columns:') %}\n\n            {% set relation=ref(model) %}\n            {%- set columns = adapter.get_columns_in_relation(relation) -%}\n            {% set column_desc_dict =  codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n            {% for column in columns %}\n                {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types) %}\n            {% endfor %}\n        {% endfor %}\n    {% endif %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.codegen.build_dict_column_descriptions",
          "macro.codegen.generate_column_yaml"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.252536,
      "supported_languages": null
    },
    "macro.codegen.get_model_dependencies": {
      "name": "get_model_dependencies",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/helpers/helpers.sql",
      "original_file_path": "macros/helpers/helpers.sql",
      "unique_id": "macro.codegen.get_model_dependencies",
      "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2542744,
      "supported_languages": null
    },
    "macro.codegen.add_model_column_descriptions_to_dict": {
      "name": "add_model_column_descriptions_to_dict",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/helpers/helpers.sql",
      "original_file_path": "macros/helpers/helpers.sql",
      "unique_id": "macro.codegen.add_model_column_descriptions_to_dict",
      "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2550848,
      "supported_languages": null
    },
    "macro.codegen.build_dict_column_descriptions": {
      "name": "build_dict_column_descriptions",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/helpers/helpers.sql",
      "original_file_path": "macros/helpers/helpers.sql",
      "unique_id": "macro.codegen.build_dict_column_descriptions",
      "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.codegen.get_model_dependencies",
          "macro.codegen.add_model_column_descriptions_to_dict"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2557795,
      "supported_languages": null
    },
    "macro.codegen.get_models": {
      "name": "get_models",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/helpers/helpers.sql",
      "original_file_path": "macros/helpers/helpers.sql",
      "unique_id": "macro.codegen.get_models",
      "macro_sql": "{% macro get_models(directory=None, prefix=None) %}\n    {% set model_names=[] %}\n    {% set models = graph.nodes.values() | selectattr('resource_type', \"equalto\", 'model') %}\n    {% if directory and prefix %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory and model.name.startswith(prefix) %}\n                {% do model_names.append(model.name) %}\n            {% endif %} \n        {% endfor %}\n    {% elif directory %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory %}\n                {% do model_names.append(model.name) %}\n            {% endif %}\n        {% endfor %}\n    {% elif prefix %}\n        {% for model in models if model.name.startswith(prefix) %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% else %}\n        {% for model in models %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% endif %}\n    {{ return(model_names) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2580016,
      "supported_languages": null
    },
    "macro.codegen.data_type_format_source": {
      "name": "data_type_format_source",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/helpers/helpers.sql",
      "original_file_path": "macros/helpers/helpers.sql",
      "unique_id": "macro.codegen.data_type_format_source",
      "macro_sql": "{% macro data_type_format_source(column) -%}\n  {{ return(adapter.dispatch('data_type_format_source', 'codegen')(column)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.codegen.default__data_type_format_source"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2582939,
      "supported_languages": null
    },
    "macro.codegen.default__data_type_format_source": {
      "name": "default__data_type_format_source",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/helpers/helpers.sql",
      "original_file_path": "macros/helpers/helpers.sql",
      "unique_id": "macro.codegen.default__data_type_format_source",
      "macro_sql": "{% macro default__data_type_format_source(column) %}\n    {% set formatted = codegen.format_column(column) %}\n    {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.codegen.format_column"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2586248,
      "supported_languages": null
    },
    "macro.codegen.data_type_format_model": {
      "name": "data_type_format_model",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/helpers/helpers.sql",
      "original_file_path": "macros/helpers/helpers.sql",
      "unique_id": "macro.codegen.data_type_format_model",
      "macro_sql": "{% macro data_type_format_model(column) -%}\n  {{ return(adapter.dispatch('data_type_format_model', 'codegen')(column)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.codegen.default__data_type_format_model"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2588959,
      "supported_languages": null
    },
    "macro.codegen.default__data_type_format_model": {
      "name": "default__data_type_format_model",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/helpers/helpers.sql",
      "original_file_path": "macros/helpers/helpers.sql",
      "unique_id": "macro.codegen.default__data_type_format_model",
      "macro_sql": "{% macro default__data_type_format_model(column) %}\n    {% set formatted = codegen.format_column(column) %}\n    {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.codegen.format_column"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2592497,
      "supported_languages": null
    },
    "macro.codegen.format_column": {
      "name": "format_column",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/vendored/dbt_core/format_column.sql",
      "original_file_path": "macros/vendored/dbt_core/format_column.sql",
      "unique_id": "macro.codegen.format_column",
      "macro_sql": "{% macro format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2598784,
      "supported_languages": null
    },
    "macro.dbt_profiler.print_profile": {
      "name": "print_profile",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/print_profile.sql",
      "original_file_path": "macros/print_profile.sql",
      "unique_id": "macro.dbt_profiler.print_profile",
      "macro_sql": "{% macro print_profile(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], max_rows=none, max_columns=13, max_column_width=30, max_precision=none, where_clause=none) %}\n\n{%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n\n{% if execute %}\n  {% do results.print_table(max_rows=max_rows, max_columns=max_columns, max_column_width=max_column_width, max_precision=max_precision) %}\n{% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_profiler.get_profile_table"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2610776,
      "supported_languages": null
    },
    "macro.dbt_profiler.type_string": {
      "name": "type_string",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.type_string",
      "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch(\"type_string\", macro_namespace=\"dbt_profiler\")()) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.default__type_string"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2624183,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__type_string": {
      "name": "default__type_string",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.default__type_string",
      "macro_sql": "{%- macro default__type_string() -%}\n  varchar\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2625406,
      "supported_languages": null
    },
    "macro.dbt_profiler.bigquery__type_string": {
      "name": "bigquery__type_string",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.bigquery__type_string",
      "macro_sql": "{%- macro bigquery__type_string() -%}\n  string\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2626708,
      "supported_languages": null
    },
    "macro.dbt_profiler.databricks__type_string": {
      "name": "databricks__type_string",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.databricks__type_string",
      "macro_sql": "{%- macro databricks__type_string() -%}\n  string\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2628047,
      "supported_languages": null
    },
    "macro.dbt_profiler.is_numeric_dtype": {
      "name": "is_numeric_dtype",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.is_numeric_dtype",
      "macro_sql": "\n\n{%- macro is_numeric_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_numeric_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.default__is_numeric_dtype"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2630851,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__is_numeric_dtype": {
      "name": "default__is_numeric_dtype",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.default__is_numeric_dtype",
      "macro_sql": "{%- macro default__is_numeric_dtype(dtype) -%}\n  {% set is_numeric = dtype.startswith(\"int\") or dtype.startswith(\"float\") or \"numeric\" in dtype or \"number\" in dtype or \"double\" in dtype or \"bigint\" in dtype %}\n  {% do return(is_numeric) %}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2636654,
      "supported_languages": null
    },
    "macro.dbt_profiler.sqlserver__is_numeric_dtype": {
      "name": "sqlserver__is_numeric_dtype",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.sqlserver__is_numeric_dtype",
      "macro_sql": "{%- macro sqlserver__is_numeric_dtype(dtype) -%}\n  {% set is_numeric = dtype in [\"decimal\", \"numeric\", \"bigint\" \"numeric\", \"smallint\", \"decimal\", \"int\", \"tinyint\", \"money\", \"float\", \"real\"]  %}\n  {% do return(is_numeric) %}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2641292,
      "supported_languages": null
    },
    "macro.dbt_profiler.is_logical_dtype": {
      "name": "is_logical_dtype",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.is_logical_dtype",
      "macro_sql": "\n\n{%- macro is_logical_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_logical_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.default__is_logical_dtype"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2644322,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__is_logical_dtype": {
      "name": "default__is_logical_dtype",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.default__is_logical_dtype",
      "macro_sql": "{%- macro default__is_logical_dtype(dtype) -%}\n  {% set is_bool = dtype.startswith(\"bool\") %}\n  {% do return(is_bool) %}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.264755,
      "supported_languages": null
    },
    "macro.dbt_profiler.is_date_or_time_dtype": {
      "name": "is_date_or_time_dtype",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.is_date_or_time_dtype",
      "macro_sql": "\n\n{%- macro is_date_or_time_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_date_or_time_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.default__is_date_or_time_dtype"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2650356,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__is_date_or_time_dtype": {
      "name": "default__is_date_or_time_dtype",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.default__is_date_or_time_dtype",
      "macro_sql": "{%- macro default__is_date_or_time_dtype(dtype) -%}\n  {% set is_date_or_time = dtype.startswith(\"timestamp\") or dtype.startswith(\"date\") %}\n  {% do return(is_date_or_time) %}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2653792,
      "supported_languages": null
    },
    "macro.dbt_profiler.is_struct_dtype": {
      "name": "is_struct_dtype",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.is_struct_dtype",
      "macro_sql": "\n\n{%- macro is_struct_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_struct_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.default__is_struct_dtype"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.265653,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__is_struct_dtype": {
      "name": "default__is_struct_dtype",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.default__is_struct_dtype",
      "macro_sql": "{%- macro default__is_struct_dtype(dtype) -%}\n  {% do return((dtype | lower).startswith('struct')) %}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.265906,
      "supported_languages": null
    },
    "macro.dbt_profiler.information_schema": {
      "name": "information_schema",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.information_schema",
      "macro_sql": "\n\n{%- macro information_schema(relation) -%}\n  {{ return(adapter.dispatch(\"information_schema\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.default__information_schema"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2662094,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__information_schema": {
      "name": "default__information_schema",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.default__information_schema",
      "macro_sql": "{%- macro default__information_schema(relation) -%}\n  {{ relation.information_schema() }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.information_schema"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2663915,
      "supported_languages": null
    },
    "macro.dbt_profiler.bigquery__information_schema": {
      "name": "bigquery__information_schema",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.bigquery__information_schema",
      "macro_sql": "{%- macro bigquery__information_schema(relation) -%}\n  {{ adapter.quote(relation.database) }}.{{ adapter.quote(relation.schema) }}.INFORMATION_SCHEMA\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2666745,
      "supported_languages": null
    },
    "macro.dbt_profiler.select_from_information_schema_columns": {
      "name": "select_from_information_schema_columns",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.select_from_information_schema_columns",
      "macro_sql": "\n\n{%- macro select_from_information_schema_columns(relation) -%}\n  {{ return(adapter.dispatch(\"select_from_information_schema_columns\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.default__select_from_information_schema_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2669525,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__select_from_information_schema_columns": {
      "name": "default__select_from_information_schema_columns",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.default__select_from_information_schema_columns",
      "macro_sql": "{%- macro default__select_from_information_schema_columns(relation) -%}\n  select\n    *\n  from {{ dbt_profiler.information_schema(relation) }}.COLUMNS\n  where lower(table_schema) = lower('{{ relation.schema }}') \n    and lower(table_name) = lower('{{ relation.identifier }}')\n  order by ordinal_position asc\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.information_schema"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.267242,
      "supported_languages": null
    },
    "macro.dbt_profiler.redshift__select_from_information_schema_columns": {
      "name": "redshift__select_from_information_schema_columns",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/cross_db_utils.sql",
      "original_file_path": "macros/cross_db_utils.sql",
      "unique_id": "macro.dbt_profiler.redshift__select_from_information_schema_columns",
      "macro_sql": "{%- macro redshift__select_from_information_schema_columns(relation) -%}\n  select\n    attr.attname::varchar as column_name,\n    type.typname::varchar as data_type,\n    class.relname::varchar as table_name,\n    namespace.nspname::varchar as table_schema\n  from pg_catalog.pg_attribute as attr\n  join pg_catalog.pg_type as type on (attr.atttypid = type.oid)\n  join pg_catalog.pg_class as class on (attr.attrelid = class.oid)\n  join pg_catalog.pg_namespace as namespace on (class.relnamespace = namespace.oid)\n  where lower(table_schema) = lower('{{ relation.schema }}') \n    and lower(table_name) = lower('{{ relation.identifier }}')\n    and attr.attnum > 0\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2675073,
      "supported_languages": null
    },
    "macro.dbt_profiler.get_relation": {
      "name": "get_relation",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/relation.sql",
      "original_file_path": "macros/relation.sql",
      "unique_id": "macro.dbt_profiler.get_relation",
      "macro_sql": "{% macro get_relation(relation=none, relation_name=none, schema=none, database=none) %}\n\n{% if relation is none and relation_name is none %}\n  {{ exceptions.raise_compiler_error(\"Either relation or relation_name must be specified.\") }}\n{% endif %}\n\n{% if relation is none %}\n  {% if schema is none %}\n    {% set schema = target.schema %}\n  {% endif %}\n\n  {% if database is none %}\n    {% set database = target.database %}\n  {% endif %}\n\n  {{ log(\"Get relation %s (database=%s, schema=%s)\" | format(adapter.quote(relation_name), adapter.quote(database), adapter.quote(schema)), info=False) }}\n\n  {%- \n  set relation = adapter.get_relation(\n    database=database,\n    schema=schema,\n    identifier=relation_name\n  ) \n  -%}\n  {% if relation is none %}\n    {{ exceptions.raise_compiler_error(\"Relation \" ~ adapter.quote(relation_name) ~ \" does not exist or not authorized.\") }}\n  {% endif %}\n{% endif %}\n\n{% do return(relation) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2698512,
      "supported_languages": null
    },
    "macro.dbt_profiler.assert_relation_exists": {
      "name": "assert_relation_exists",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/relation.sql",
      "original_file_path": "macros/relation.sql",
      "unique_id": "macro.dbt_profiler.assert_relation_exists",
      "macro_sql": "\n\n{%- macro assert_relation_exists(relation) -%}\n  {{ return(adapter.dispatch(\"assert_relation_exists\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.default__assert_relation_exists"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2702024,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__assert_relation_exists": {
      "name": "default__assert_relation_exists",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/relation.sql",
      "original_file_path": "macros/relation.sql",
      "unique_id": "macro.dbt_profiler.default__assert_relation_exists",
      "macro_sql": "{% macro default__assert_relation_exists(relation) %}\n\n{% do run_query(\"select * from \" ~ relation ~ \" limit 0\") %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2704377,
      "supported_languages": null
    },
    "macro.dbt_profiler.sqlserver__assert_relation_exists": {
      "name": "sqlserver__assert_relation_exists",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/relation.sql",
      "original_file_path": "macros/relation.sql",
      "unique_id": "macro.dbt_profiler.sqlserver__assert_relation_exists",
      "macro_sql": "{% macro sqlserver__assert_relation_exists(relation) %}\n\n{% do run_query(\"select top(0) * from \" ~ relation ~ \"\") %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2706752,
      "supported_languages": null
    },
    "macro.dbt_profiler.print_profile_docs": {
      "name": "print_profile_docs",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/print_profile_docs.sql",
      "original_file_path": "macros/print_profile_docs.sql",
      "unique_id": "macro.dbt_profiler.print_profile_docs",
      "macro_sql": "{% macro print_profile_docs(relation=none, relation_name=none, docs_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], max_rows=none, max_columns=13, max_column_width=30, max_precision=none, where_clause=none) %}\n\n{% if execute %}\n\n    {%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n    \n    {% if docs_name is none %}\n        {% set docs_name = 'dbt_profiler__' + relation_name %}\n    {% endif %}\n    \n    {%- set startdocs = '{% docs ' ~ docs_name ~ '  %}' -%}\n    {%- set enddocs = '{% enddocs %}' -%}\n    \n    {# Check if macro is called in dbt Cloud? #}\n    {%- if flags.WHICH == 'rpc' -%}\n        {%- set is_dbt_cloud = true -%}\n    {%- else -%}\n        {%- set is_dbt_cloud = false -%}\n    {%- endif -%}\n    \n    {% if not is_dbt_cloud %}\n    \n        {{ print(startdocs) }}\n        {% do results.print_table(max_rows=max_rows, max_columns=max_columns, max_column_width=max_column_width, max_precision=max_precision) %}\n        {{ print(enddocs) }}\n    \n    {% else %}\n    \n        {%- set profile_docs=[] -%}\n        {% do profile_docs.append(startdocs) -%}\n        {% do profile_docs.append('') %}\n    \n        {# Get header from column names #}\n        {%- set headers = results.column_names -%}\n        {%- set header = [] -%}\n        {%- set horizontal_line = [] -%}\n    \n        {% for i in range(0,headers|length) %}\n            {% do header.append(headers[i]) %}\n            {% do horizontal_line.append('---') %}\n        {% endfor %}\n        {% do profile_docs.append('| ' ~ header|join(' | ') ~ ' |') %}\n        {% do profile_docs.append('| ' ~ horizontal_line|join(' | ') ~ ' |') %}\n    \n        {# Get row values #}\n        {% for row in results.rows %}\n            {%- set list_row = [''] -%}\n            {% for val in row.values() %}\n                {% do list_row.append(val) %}\n            {% endfor %}\n            {% do profile_docs.append(list_row|join(' | ') ~ ' |') %}\n        {% endfor %}\n        {% do profile_docs.append('') %}\n        {% do profile_docs.append(enddocs) %}\n    \n        {# Join profile docs #}\n        {%- set joined = profile_docs | join ('\\n') -%}\n        {{ log(joined, info=True) }}\n        {% do return(joined) %}\n    \n    {% endif %}\n    \n{% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_profiler.get_profile_table"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2757168,
      "supported_languages": null
    },
    "macro.dbt_profiler.print_profile_schema": {
      "name": "print_profile_schema",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/print_profile_schema.sql",
      "original_file_path": "macros/print_profile_schema.sql",
      "unique_id": "macro.dbt_profiler.print_profile_schema",
      "macro_sql": "{% macro print_profile_schema(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], model_description=\"\", column_description=\"\", where_clause=none) %}\n\n{%- set column_dicts = [] -%}\n{%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n\n{% if execute %}\n  {% for row in results.rows %}\n\n    {% set row_dict = row.dict() %}\n    {% set column_name = row_dict.pop(\"column_name\") %}\n\n    {% set meta_dict = {} %}\n    {% for key, value in row_dict.items() %}\n      {% set column = results.columns.get(key) %}\n      {% do meta_dict.update({key: column.data_type.jsonify(value)}) %}\n    {% endfor %}\n\n    {% set column_dict = {\"name\": column_name, \"description\": column_description, \"meta\": meta_dict} %}\n    {% do column_dicts.append(column_dict) %}\n  {% endfor %}\n\n  {% set schema_dict = {\n    \"version\": 2,\n    \"models\": [\n      {\n        \"name\": relation_name,\n        \"description\": model_description,\n        \"columns\": column_dicts\n      }\n    ]\n  } %}\n  {% set schema_yaml = toyaml(schema_dict) %}\n\n  {{ log(schema_yaml, info=True) }}\n  {% do return(schema_dict) %}\n{% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_profiler.get_profile_table"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.2787693,
      "supported_languages": null
    },
    "macro.dbt_profiler.get_profile_table": {
      "name": "get_profile_table",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/get_profile_table.sql",
      "original_file_path": "macros/get_profile_table.sql",
      "unique_id": "macro.dbt_profiler.get_profile_table",
      "macro_sql": "{% macro get_profile_table(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none) %}\n\n{%- set relation = dbt_profiler.get_relation(\n  relation=relation,\n  relation_name=relation_name,\n  schema=schema,\n  database=database\n) -%}\n{%- set profile_sql = dbt_profiler.get_profile(relation=relation, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n{{ log(profile_sql, info=False) }}\n{% set results = run_query(profile_sql) %}\n{% set results = results.rename(results.column_names | map('lower')) %}\n{% do return(results) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.get_relation",
          "macro.dbt_profiler.get_profile",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.280125,
      "supported_languages": null
    },
    "macro.dbt_profiler.get_profile": {
      "name": "get_profile",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/get_profile.sql",
      "original_file_path": "macros/get_profile.sql",
      "unique_id": "macro.dbt_profiler.get_profile",
      "macro_sql": "{% macro get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n  {{ return(adapter.dispatch(\"get_profile\", macro_namespace=\"dbt_profiler\")(relation, exclude_measures, include_columns, exclude_columns, where_clause, group_by)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.my_nesso_project.default__get_profile"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.301033,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__get_profile": {
      "name": "default__get_profile",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/get_profile.sql",
      "original_file_path": "macros/get_profile.sql",
      "unique_id": "macro.dbt_profiler.default__get_profile",
      "macro_sql": "{% macro default__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"median\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {% set information_schema_columns = run_query(dbt_profiler.select_from_information_schema_columns(relation)) %}\n  {% set information_schema_columns = information_schema_columns.rename(information_schema_columns.column_names | map('lower')) %}\n  {% set information_schema_data_types = information_schema_columns.columns['data_type'].values() | map('lower') | list %}\n  {% set information_schema_column_names = information_schema_columns.columns['column_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in information_schema_column_names %}\n    {% do data_type_map.update({column_name: information_schema_data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select\n          {%- for group_by_column in group_by %}\n            {{ group_by_column }},\n          {%- endfor %}\n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_row_count(column_name, data_type) }} as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_not_null_proportion(column_name, data_type) }} as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_proportion(column_name, data_type) }} as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_count(column_name, data_type) }} as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_is_unique(column_name, data_type) }} as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_min(column_name, data_type) }} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_max(column_name, data_type) }} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_avg(column_name, data_type) }} as avg,\n          {%- endif %}\n          {% if \"median\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_median(column_name, data_type) }} as median,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_population(column_name, data_type) }} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_sample(column_name, data_type) }} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if group_by %}\n          group by {{ group_by | join(\", \") }}\n        {% endif %}\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      {%- for group_by_column in group_by %}\n        {{ group_by_column }},\n      {%- endfor %}\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by {% if group_by %}{{ group_by | join(\", \") }},{% endif %} _column_position asc\n  {% endset %}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.assert_relation_exists",
          "macro.dbt.run_query",
          "macro.dbt_profiler.select_from_information_schema_columns",
          "macro.dbt_profiler.measure_row_count",
          "macro.dbt_profiler.measure_not_null_proportion",
          "macro.dbt_profiler.measure_distinct_proportion",
          "macro.dbt_profiler.measure_distinct_count",
          "macro.dbt_profiler.measure_is_unique",
          "macro.dbt_profiler.measure_min",
          "macro.dbt_profiler.measure_max",
          "macro.dbt_profiler.measure_avg",
          "macro.dbt_profiler.measure_median",
          "macro.dbt_profiler.measure_std_dev_population",
          "macro.dbt_profiler.measure_std_dev_sample",
          "macro.dbt_profiler.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3607378,
      "supported_languages": null
    },
    "macro.dbt_profiler.databricks__get_profile": {
      "name": "databricks__get_profile",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/get_profile.sql",
      "original_file_path": "macros/get_profile.sql",
      "unique_id": "macro.dbt_profiler.databricks__get_profile",
      "macro_sql": "{% macro databricks__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"median\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=True) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {# Get column metadata. #}\n  {% call statement('table_metadata', fetch_result=True) -%}\n    describe table extended {{ relation.schema }}.{{ relation.identifier }}\n  {% endcall %}\n  {% set columns_metadata = load_result('table_metadata').table %}\n  {% set columns_metadata = columns_metadata.rename(columns_metadata.column_names | map('lower')) %}\n  \n  {% set data_types = columns_metadata.columns['data_type'].values() | map('lower') | list %}\n  {% set column_names = columns_metadata.columns['col_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in column_names %}\n    {% do data_type_map.update({column_name: data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          {%- for group_by_column in group_by %}\n            {{ group_by_column }},\n          {%- endfor %}\n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_row_count(column_name, data_type) }} as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_not_null_proportion(column_name, data_type) }} as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_proportion(column_name, data_type) }} as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_count(column_name, data_type) }} as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_is_unique(column_name, data_type) }} as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_min(column_name, data_type) }} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_max(column_name, data_type) }} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_avg(column_name, data_type) }} as avg,\n          {%- endif %}\n          {% if \"median\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_median(column_name, data_type) }} as median,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_population(column_name, data_type) }} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_sample(column_name, data_type) }} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if group_by %}\n          group by {{ group_by | join(\", \") }}\n        {% endif %}\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      {%- for group_by_column in group_by %}\n        {{ group_by_column }},\n      {%- endfor %}\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by {% if group_by %}{{ group_by | join(\", \") }},{% endif %} _column_position asc\n  {% endset %}\n\n  {# {{ print(profile_sql) }} #}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.assert_relation_exists",
          "macro.dbt.statement",
          "macro.dbt_profiler.measure_row_count",
          "macro.dbt_profiler.measure_not_null_proportion",
          "macro.dbt_profiler.measure_distinct_proportion",
          "macro.dbt_profiler.measure_distinct_count",
          "macro.dbt_profiler.measure_is_unique",
          "macro.dbt_profiler.measure_min",
          "macro.dbt_profiler.measure_max",
          "macro.dbt_profiler.measure_avg",
          "macro.dbt_profiler.measure_median",
          "macro.dbt_profiler.measure_std_dev_population",
          "macro.dbt_profiler.measure_std_dev_sample",
          "macro.dbt_profiler.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3681998,
      "supported_languages": null
    },
    "macro.dbt_profiler.sqlserver__get_profile": {
      "name": "sqlserver__get_profile",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/get_profile.sql",
      "original_file_path": "macros/get_profile.sql",
      "unique_id": "macro.dbt_profiler.sqlserver__get_profile",
      "macro_sql": "{% macro sqlserver__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"median\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {% set information_schema_columns = run_query(dbt_profiler.select_from_information_schema_columns(relation)) %}\n  {% set information_schema_columns = information_schema_columns.rename(information_schema_columns.column_names | map('lower')) %}\n  {% set information_schema_data_types = information_schema_columns.columns['data_type'].values() | map('lower') | list %}\n  {% set information_schema_column_names = information_schema_columns.columns['column_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in information_schema_column_names %}\n    {% do data_type_map.update({column_name: information_schema_data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          {%- for group_by_column in group_by %}\n            {{ group_by_column }},\n          {%- endfor %}\n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_row_count(column_name, data_type) }} as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_not_null_proportion(column_name, data_type) }} as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_proportion(column_name, data_type) }} as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_count(column_name, data_type) }} as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_is_unique(column_name, data_type) }} as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_min(column_name, data_type) }} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_max(column_name, data_type) }} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_avg(column_name, data_type) }} as avg,\n          {%- endif %}\n          {% if \"median\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_median(column_name, data_type) }} as median,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_population(column_name, data_type) }} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_sample(column_name, data_type) }} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if group_by %}\n          group by {{ group_by | join(\", \") }}\n        {% endif %}\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select top 100 percent\n      {%- for group_by_column in group_by %}\n        {{ group_by_column }},\n      {%- endfor %}\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by {% if group_by %}{{ group_by | join(\", \") }},{% endif %} _column_position asc\n  {% endset %}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.assert_relation_exists",
          "macro.dbt.run_query",
          "macro.dbt_profiler.select_from_information_schema_columns",
          "macro.dbt_profiler.measure_row_count",
          "macro.dbt_profiler.measure_not_null_proportion",
          "macro.dbt_profiler.measure_distinct_proportion",
          "macro.dbt_profiler.measure_distinct_count",
          "macro.dbt_profiler.measure_is_unique",
          "macro.dbt_profiler.measure_min",
          "macro.dbt_profiler.measure_max",
          "macro.dbt_profiler.measure_avg",
          "macro.dbt_profiler.measure_median",
          "macro.dbt_profiler.measure_std_dev_population",
          "macro.dbt_profiler.measure_std_dev_sample",
          "macro.dbt_profiler.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3756027,
      "supported_languages": null
    },
    "macro.dbt_profiler.measure_row_count": {
      "name": "measure_row_count",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.measure_row_count",
      "macro_sql": "\n\n{%- macro measure_row_count(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_row_count\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.default__measure_row_count"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.378875,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__measure_row_count": {
      "name": "default__measure_row_count",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.default__measure_row_count",
      "macro_sql": "{%- macro default__measure_row_count(column_name, data_type) -%}\ncast(count(*) as {{ dbt.type_numeric() }})\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": ["macro.dbt.type_numeric"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.379098,
      "supported_languages": null
    },
    "macro.dbt_profiler.measure_not_null_proportion": {
      "name": "measure_not_null_proportion",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.measure_not_null_proportion",
      "macro_sql": "\n\n{%- macro measure_not_null_proportion(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_not_null_proportion\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.default__measure_not_null_proportion"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3794582,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__measure_not_null_proportion": {
      "name": "default__measure_not_null_proportion",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.default__measure_not_null_proportion",
      "macro_sql": "{%- macro default__measure_not_null_proportion(column_name, data_type) -%}\nsum(case when {{ adapter.quote(column_name) }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }})\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": ["macro.dbt.type_numeric"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3797433,
      "supported_languages": null
    },
    "macro.dbt_profiler.measure_distinct_proportion": {
      "name": "measure_distinct_proportion",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.measure_distinct_proportion",
      "macro_sql": "\n\n{%- macro measure_distinct_proportion(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_distinct_proportion\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.default__measure_distinct_proportion"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.380061,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__measure_distinct_proportion": {
      "name": "default__measure_distinct_proportion",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.default__measure_distinct_proportion",
      "macro_sql": "{%- macro default__measure_distinct_proportion(column_name, data_type) -%}\n{%- if not dbt_profiler.is_struct_dtype(data_type) -%}\n    count(distinct {{ adapter.quote(column_name) }}) / cast(count(*) as {{ dbt.type_numeric() }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.is_struct_dtype",
          "macro.dbt.type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3805218,
      "supported_languages": null
    },
    "macro.dbt_profiler.measure_distinct_count": {
      "name": "measure_distinct_count",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.measure_distinct_count",
      "macro_sql": "\n\n{%- macro measure_distinct_count(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_distinct_count\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.default__measure_distinct_count"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3808389,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__measure_distinct_count": {
      "name": "default__measure_distinct_count",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.default__measure_distinct_count",
      "macro_sql": "{%- macro default__measure_distinct_count(column_name, data_type) -%}\n{%- if not dbt_profiler.is_struct_dtype(data_type) -%}\n    count(distinct {{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.is_struct_dtype",
          "macro.dbt.type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.381293,
      "supported_languages": null
    },
    "macro.dbt_profiler.measure_is_unique": {
      "name": "measure_is_unique",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.measure_is_unique",
      "macro_sql": "\n\n{%- macro measure_is_unique(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_is_unique\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.default__measure_is_unique"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3816156,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__measure_is_unique": {
      "name": "default__measure_is_unique",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.default__measure_is_unique",
      "macro_sql": "{%- macro default__measure_is_unique(column_name, data_type) -%}\n{%- if not dbt_profiler.is_struct_dtype(data_type) -%}\n    count(distinct {{ adapter.quote(column_name) }}) = count(*)\n{%- else -%}\n    null\n{%- endif -%}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.is_struct_dtype"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3819625,
      "supported_languages": null
    },
    "macro.dbt_profiler.sqlserver__measure_is_unique": {
      "name": "sqlserver__measure_is_unique",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.sqlserver__measure_is_unique",
      "macro_sql": "{%- macro sqlserver__measure_is_unique(column_name, data_type) -%}\ncase when count(distinct {{ adapter.quote(column_name) }}) = count(*) then 1 else 0 end\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3821807,
      "supported_languages": null
    },
    "macro.dbt_profiler.measure_min": {
      "name": "measure_min",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.measure_min",
      "macro_sql": "\n\n{%- macro measure_min(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_min\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.default__measure_min"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3824944,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__measure_min": {
      "name": "default__measure_min",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.default__measure_min",
      "macro_sql": "{%- macro default__measure_min(column_name, data_type) -%}\n{%- if (dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type)) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    cast(min({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }})\n{%- else -%}\n    cast(null as {{ dbt_profiler.type_string() }})\n{%- endif -%}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.is_numeric_dtype",
          "macro.dbt_profiler.is_date_or_time_dtype",
          "macro.dbt_profiler.is_struct_dtype",
          "macro.dbt_profiler.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3831537,
      "supported_languages": null
    },
    "macro.dbt_profiler.measure_max": {
      "name": "measure_max",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.measure_max",
      "macro_sql": "\n\n{%- macro measure_max(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_max\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.default__measure_max"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3834803,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__measure_max": {
      "name": "default__measure_max",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.default__measure_max",
      "macro_sql": "{%- macro default__measure_max(column_name, data_type) -%}\n{%- if (dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type)) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    cast(max({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }})\n{%- else -%}\n    cast(null as {{ dbt_profiler.type_string() }})\n{%- endif -%}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.is_numeric_dtype",
          "macro.dbt_profiler.is_date_or_time_dtype",
          "macro.dbt_profiler.is_struct_dtype",
          "macro.dbt_profiler.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3840673,
      "supported_languages": null
    },
    "macro.dbt_profiler.measure_avg": {
      "name": "measure_avg",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.measure_avg",
      "macro_sql": "\n\n{%- macro measure_avg(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_avg\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.default__measure_avg"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3844914,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__measure_avg": {
      "name": "default__measure_avg",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.default__measure_avg",
      "macro_sql": "{%- macro default__measure_avg(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    avg({{ adapter.quote(column_name) }})\n{%- elif dbt_profiler.is_logical_dtype(data_type) -%}\n    avg(case when {{ adapter.quote(column_name) }} then 1 else 0 end)\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.is_numeric_dtype",
          "macro.dbt_profiler.is_struct_dtype",
          "macro.dbt_profiler.is_logical_dtype",
          "macro.dbt.type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3851109,
      "supported_languages": null
    },
    "macro.dbt_profiler.redshift__measure_avg": {
      "name": "redshift__measure_avg",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.redshift__measure_avg",
      "macro_sql": "{%- macro redshift__measure_avg(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    avg({{ adapter.quote(column_name) }}::float)\n{%- elif dbt_profiler.is_logical_dtype(data_type) -%}\n    avg(case when {{ adapter.quote(column_name) }} then 1.0 else 0.0 end)\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.is_numeric_dtype",
          "macro.dbt_profiler.is_struct_dtype",
          "macro.dbt_profiler.is_logical_dtype",
          "macro.dbt.type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.385723,
      "supported_languages": null
    },
    "macro.dbt_profiler.measure_median": {
      "name": "measure_median",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.measure_median",
      "macro_sql": "\n\n{%- macro measure_median(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_median\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.default__measure_median"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3860383,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__measure_median": {
      "name": "default__measure_median",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.default__measure_median",
      "macro_sql": "{%- macro default__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    median({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.is_numeric_dtype",
          "macro.dbt_profiler.is_struct_dtype",
          "macro.dbt.type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3865314,
      "supported_languages": null
    },
    "macro.dbt_profiler.bigquery__measure_median": {
      "name": "bigquery__measure_median",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.bigquery__measure_median",
      "macro_sql": "{%- macro bigquery__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    APPROX_QUANTILES({{ adapter.quote(column_name) }}, 100)[OFFSET(50)]\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.is_numeric_dtype",
          "macro.dbt_profiler.is_struct_dtype",
          "macro.dbt.type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3870113,
      "supported_languages": null
    },
    "macro.dbt_profiler.postgres__measure_median": {
      "name": "postgres__measure_median",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.postgres__measure_median",
      "macro_sql": "{%- macro postgres__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    percentile_cont(0.5) within group (order by {{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.is_numeric_dtype",
          "macro.dbt_profiler.is_struct_dtype",
          "macro.dbt.type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3875391,
      "supported_languages": null
    },
    "macro.dbt_profiler.sql_server__measure_median": {
      "name": "sql_server__measure_median",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.sql_server__measure_median",
      "macro_sql": "{%- macro sql_server__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    percentile_cont({{ adapter.quote(column_name) }}, 0.5) over ()\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.is_numeric_dtype",
          "macro.dbt_profiler.is_struct_dtype",
          "macro.dbt.type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3880434,
      "supported_languages": null
    },
    "macro.dbt_profiler.measure_std_dev_population": {
      "name": "measure_std_dev_population",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.measure_std_dev_population",
      "macro_sql": "\n\n{%- macro measure_std_dev_population(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_std_dev_population\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.default__measure_std_dev_population"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3883843,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__measure_std_dev_population": {
      "name": "default__measure_std_dev_population",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.default__measure_std_dev_population",
      "macro_sql": "{%- macro default__measure_std_dev_population(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    stddev_pop({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.is_numeric_dtype",
          "macro.dbt_profiler.is_struct_dtype",
          "macro.dbt.type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3888483,
      "supported_languages": null
    },
    "macro.dbt_profiler.sqlserver__measure_std_dev_population": {
      "name": "sqlserver__measure_std_dev_population",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.sqlserver__measure_std_dev_population",
      "macro_sql": "{%- macro sqlserver__measure_std_dev_population(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) -%}\n    stdevp({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.is_numeric_dtype",
          "macro.dbt.type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3893209,
      "supported_languages": null
    },
    "macro.dbt_profiler.measure_std_dev_sample": {
      "name": "measure_std_dev_sample",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.measure_std_dev_sample",
      "macro_sql": "\n\n{%- macro measure_std_dev_sample(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_std_dev_sample\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_profiler.default__measure_std_dev_sample"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.389648,
      "supported_languages": null
    },
    "macro.dbt_profiler.default__measure_std_dev_sample": {
      "name": "default__measure_std_dev_sample",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.default__measure_std_dev_sample",
      "macro_sql": "{%- macro default__measure_std_dev_sample(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    stddev_samp({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.is_numeric_dtype",
          "macro.dbt_profiler.is_struct_dtype",
          "macro.dbt.type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3901353,
      "supported_languages": null
    },
    "macro.dbt_profiler.sqlserver__measure_std_dev_sample": {
      "name": "sqlserver__measure_std_dev_sample",
      "resource_type": "macro",
      "package_name": "dbt_profiler",
      "path": "macros/measures.sql",
      "original_file_path": "macros/measures.sql",
      "unique_id": "macro.dbt_profiler.sqlserver__measure_std_dev_sample",
      "macro_sql": "{%- macro sqlserver__measure_std_dev_sample(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) -%}\n    stdev({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.is_numeric_dtype",
          "macro.dbt.type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3905299,
      "supported_languages": null
    },
    "macro.dbt_utils.get_url_host": {
      "name": "get_url_host",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/web/get_url_host.sql",
      "original_file_path": "macros/web/get_url_host.sql",
      "unique_id": "macro.dbt_utils.get_url_host",
      "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_url_host"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3910437,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_url_host": {
      "name": "default__get_url_host",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/web/get_url_host.sql",
      "original_file_path": "macros/web/get_url_host.sql",
      "unique_id": "macro.dbt_utils.default__get_url_host",
      "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.split_part",
          "macro.dbt.replace",
          "macro.dbt.safe_cast",
          "macro.dbt.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3917823,
      "supported_languages": null
    },
    "macro.dbt_utils.get_url_path": {
      "name": "get_url_path",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/web/get_url_path.sql",
      "original_file_path": "macros/web/get_url_path.sql",
      "unique_id": "macro.dbt_utils.get_url_path",
      "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_url_path"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3924031,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_url_path": {
      "name": "default__get_url_path",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/web/get_url_path.sql",
      "original_file_path": "macros/web/get_url_path.sql",
      "unique_id": "macro.dbt_utils.default__get_url_path",
      "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.replace",
          "macro.dbt.position",
          "macro.dbt.split_part",
          "macro.dbt.right",
          "macro.dbt.length",
          "macro.dbt.safe_cast",
          "macro.dbt.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3934004,
      "supported_languages": null
    },
    "macro.dbt_utils.get_url_parameter": {
      "name": "get_url_parameter",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/web/get_url_parameter.sql",
      "original_file_path": "macros/web/get_url_parameter.sql",
      "unique_id": "macro.dbt_utils.get_url_parameter",
      "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_url_parameter"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3938522,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_url_parameter": {
      "name": "default__get_url_parameter",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/web/get_url_parameter.sql",
      "original_file_path": "macros/web/get_url_parameter.sql",
      "unique_id": "macro.dbt_utils.default__get_url_parameter",
      "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.split_part"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3943298,
      "supported_languages": null
    },
    "macro.dbt_utils.star": {
      "name": "star",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/star.sql",
      "original_file_path": "macros/sql/star.sql",
      "unique_id": "macro.dbt_utils.star",
      "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__star"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3957705,
      "supported_languages": null
    },
    "macro.dbt_utils.default__star": {
      "name": "default__star",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/star.sql",
      "original_file_path": "macros/sql/star.sql",
      "unique_id": "macro.dbt_utils.default__star",
      "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt_utils.get_filtered_columns_in_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3981001,
      "supported_languages": null
    },
    "macro.dbt_utils.safe_add": {
      "name": "safe_add",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/safe_add.sql",
      "original_file_path": "macros/sql/safe_add.sql",
      "unique_id": "macro.dbt_utils.safe_add",
      "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__safe_add"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3986766,
      "supported_languages": null
    },
    "macro.dbt_utils.default__safe_add": {
      "name": "default__safe_add",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/safe_add.sql",
      "original_file_path": "macros/sql/safe_add.sql",
      "unique_id": "macro.dbt_utils.default__safe_add",
      "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.3994849,
      "supported_languages": null
    },
    "macro.dbt_utils.pivot": {
      "name": "pivot",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/pivot.sql",
      "original_file_path": "macros/sql/pivot.sql",
      "unique_id": "macro.dbt_utils.pivot",
      "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__pivot"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4008021,
      "supported_languages": null
    },
    "macro.dbt_utils.default__pivot": {
      "name": "default__pivot",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/pivot.sql",
      "original_file_path": "macros/sql/pivot.sql",
      "unique_id": "macro.dbt_utils.default__pivot",
      "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.402139,
      "supported_languages": null
    },
    "macro.dbt_utils.nullcheck_table": {
      "name": "nullcheck_table",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/nullcheck_table.sql",
      "original_file_path": "macros/sql/nullcheck_table.sql",
      "unique_id": "macro.dbt_utils.nullcheck_table",
      "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__nullcheck_table"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4025846,
      "supported_languages": null
    },
    "macro.dbt_utils.default__nullcheck_table": {
      "name": "default__nullcheck_table",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/nullcheck_table.sql",
      "original_file_path": "macros/sql/nullcheck_table.sql",
      "unique_id": "macro.dbt_utils.default__nullcheck_table",
      "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt_utils.nullcheck"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4031084,
      "supported_languages": null
    },
    "macro.dbt_utils.get_filtered_columns_in_relation": {
      "name": "get_filtered_columns_in_relation",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_filtered_columns_in_relation.sql",
      "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql",
      "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation",
      "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.40381,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_filtered_columns_in_relation": {
      "name": "default__get_filtered_columns_in_relation",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_filtered_columns_in_relation.sql",
      "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql",
      "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation",
      "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.405013,
      "supported_languages": null
    },
    "macro.dbt_utils.unpivot": {
      "name": "unpivot",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/unpivot.sql",
      "original_file_path": "macros/sql/unpivot.sql",
      "unique_id": "macro.dbt_utils.unpivot",
      "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__unpivot"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4065828,
      "supported_languages": null
    },
    "macro.dbt_utils.default__unpivot": {
      "name": "default__unpivot",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/unpivot.sql",
      "original_file_path": "macros/sql/unpivot.sql",
      "unique_id": "macro.dbt_utils.default__unpivot",
      "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt.type_string",
          "macro.dbt.cast_bool_to_text"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4092047,
      "supported_languages": null
    },
    "macro.dbt_utils.union_relations": {
      "name": "union_relations",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/union.sql",
      "original_file_path": "macros/sql/union.sql",
      "unique_id": "macro.dbt_utils.union_relations",
      "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__union_relations"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4124496,
      "supported_languages": null
    },
    "macro.dbt_utils.default__union_relations": {
      "name": "default__union_relations",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/union.sql",
      "original_file_path": "macros/sql/union.sql",
      "unique_id": "macro.dbt_utils.default__union_relations",
      "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt.string_literal",
          "macro.dbt.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4177322,
      "supported_languages": null
    },
    "macro.dbt_utils.nullcheck": {
      "name": "nullcheck",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/nullcheck.sql",
      "original_file_path": "macros/sql/nullcheck.sql",
      "unique_id": "macro.dbt_utils.nullcheck",
      "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__nullcheck"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4182558,
      "supported_languages": null
    },
    "macro.dbt_utils.default__nullcheck": {
      "name": "default__nullcheck",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/nullcheck.sql",
      "original_file_path": "macros/sql/nullcheck.sql",
      "unique_id": "macro.dbt_utils.default__nullcheck",
      "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.418829,
      "supported_languages": null
    },
    "macro.dbt_utils.degrees_to_radians": {
      "name": "degrees_to_radians",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "unique_id": "macro.dbt_utils.degrees_to_radians",
      "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.42021,
      "supported_languages": null
    },
    "macro.dbt_utils.haversine_distance": {
      "name": "haversine_distance",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "unique_id": "macro.dbt_utils.haversine_distance",
      "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__haversine_distance"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4206603,
      "supported_languages": null
    },
    "macro.dbt_utils.default__haversine_distance": {
      "name": "default__haversine_distance",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "unique_id": "macro.dbt_utils.default__haversine_distance",
      "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4215434,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__haversine_distance": {
      "name": "bigquery__haversine_distance",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "unique_id": "macro.dbt_utils.bigquery__haversine_distance",
      "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.degrees_to_radians"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4227855,
      "supported_languages": null
    },
    "macro.dbt_utils.get_powers_of_two": {
      "name": "get_powers_of_two",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "unique_id": "macro.dbt_utils.get_powers_of_two",
      "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_powers_of_two"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4238052,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_powers_of_two": {
      "name": "default__get_powers_of_two",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "unique_id": "macro.dbt_utils.default__get_powers_of_two",
      "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4244285,
      "supported_languages": null
    },
    "macro.dbt_utils.generate_series": {
      "name": "generate_series",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "unique_id": "macro.dbt_utils.generate_series",
      "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__generate_series"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.424742,
      "supported_languages": null
    },
    "macro.dbt_utils.default__generate_series": {
      "name": "default__generate_series",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "unique_id": "macro.dbt_utils.default__generate_series",
      "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.get_powers_of_two"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.425584,
      "supported_languages": null
    },
    "macro.dbt_utils.get_relations_by_pattern": {
      "name": "get_relations_by_pattern",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_relations_by_pattern.sql",
      "original_file_path": "macros/sql/get_relations_by_pattern.sql",
      "unique_id": "macro.dbt_utils.get_relations_by_pattern",
      "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_relations_by_pattern"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4264586,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_relations_by_pattern": {
      "name": "default__get_relations_by_pattern",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_relations_by_pattern.sql",
      "original_file_path": "macros/sql/get_relations_by_pattern.sql",
      "unique_id": "macro.dbt_utils.default__get_relations_by_pattern",
      "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.get_tables_by_pattern_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.427812,
      "supported_languages": null
    },
    "macro.dbt_utils.surrogate_key": {
      "name": "surrogate_key",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/surrogate_key.sql",
      "original_file_path": "macros/sql/surrogate_key.sql",
      "unique_id": "macro.dbt_utils.surrogate_key",
      "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__surrogate_key"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4283848,
      "supported_languages": null
    },
    "macro.dbt_utils.default__surrogate_key": {
      "name": "default__surrogate_key",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/surrogate_key.sql",
      "original_file_path": "macros/sql/surrogate_key.sql",
      "unique_id": "macro.dbt_utils.default__surrogate_key",
      "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4287298,
      "supported_languages": null
    },
    "macro.dbt_utils.get_single_value": {
      "name": "get_single_value",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_single_value.sql",
      "original_file_path": "macros/sql/get_single_value.sql",
      "unique_id": "macro.dbt_utils.get_single_value",
      "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_single_value"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.429374,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_single_value": {
      "name": "default__get_single_value",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_single_value.sql",
      "original_file_path": "macros/sql/get_single_value.sql",
      "unique_id": "macro.dbt_utils.default__get_single_value",
      "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4306471,
      "supported_languages": null
    },
    "macro.dbt_utils.deduplicate": {
      "name": "deduplicate",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/deduplicate.sql",
      "original_file_path": "macros/sql/deduplicate.sql",
      "unique_id": "macro.dbt_utils.deduplicate",
      "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__deduplicate"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4315383,
      "supported_languages": null
    },
    "macro.dbt_utils.default__deduplicate": {
      "name": "default__deduplicate",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/deduplicate.sql",
      "original_file_path": "macros/sql/deduplicate.sql",
      "unique_id": "macro.dbt_utils.default__deduplicate",
      "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4318714,
      "supported_languages": null
    },
    "macro.dbt_utils.redshift__deduplicate": {
      "name": "redshift__deduplicate",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/deduplicate.sql",
      "original_file_path": "macros/sql/deduplicate.sql",
      "unique_id": "macro.dbt_utils.redshift__deduplicate",
      "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__deduplicate"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4321694,
      "supported_languages": null
    },
    "macro.dbt_utils.postgres__deduplicate": {
      "name": "postgres__deduplicate",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/deduplicate.sql",
      "original_file_path": "macros/sql/deduplicate.sql",
      "unique_id": "macro.dbt_utils.postgres__deduplicate",
      "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4324563,
      "supported_languages": null
    },
    "macro.dbt_utils.snowflake__deduplicate": {
      "name": "snowflake__deduplicate",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/deduplicate.sql",
      "original_file_path": "macros/sql/deduplicate.sql",
      "unique_id": "macro.dbt_utils.snowflake__deduplicate",
      "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4327059,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__deduplicate": {
      "name": "bigquery__deduplicate",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/deduplicate.sql",
      "original_file_path": "macros/sql/deduplicate.sql",
      "unique_id": "macro.dbt_utils.bigquery__deduplicate",
      "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4329596,
      "supported_languages": null
    },
    "macro.dbt_utils.safe_divide": {
      "name": "safe_divide",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/safe_divide.sql",
      "original_file_path": "macros/sql/safe_divide.sql",
      "unique_id": "macro.dbt_utils.safe_divide",
      "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__safe_divide"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4334013,
      "supported_languages": null
    },
    "macro.dbt_utils.default__safe_divide": {
      "name": "default__safe_divide",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/safe_divide.sql",
      "original_file_path": "macros/sql/safe_divide.sql",
      "unique_id": "macro.dbt_utils.default__safe_divide",
      "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4336119,
      "supported_languages": null
    },
    "macro.dbt_utils.get_intervals_between": {
      "name": "get_intervals_between",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "unique_id": "macro.dbt_utils.get_intervals_between",
      "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_intervals_between"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4344387,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_intervals_between": {
      "name": "default__get_intervals_between",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "unique_id": "macro.dbt_utils.default__get_intervals_between",
      "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement", "macro.dbt.datediff"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4353755,
      "supported_languages": null
    },
    "macro.dbt_utils.date_spine": {
      "name": "date_spine",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "unique_id": "macro.dbt_utils.date_spine",
      "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__date_spine"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4357202,
      "supported_languages": null
    },
    "macro.dbt_utils.default__date_spine": {
      "name": "default__date_spine",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "unique_id": "macro.dbt_utils.default__date_spine",
      "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.generate_series",
          "macro.dbt_utils.get_intervals_between",
          "macro.dbt.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4362435,
      "supported_languages": null
    },
    "macro.dbt_utils.get_tables_by_pattern_sql": {
      "name": "get_tables_by_pattern_sql",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql",
      "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4382353,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_tables_by_pattern_sql": {
      "name": "default__get_tables_by_pattern_sql",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql",
      "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.get_table_types_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4389074,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {
      "name": "bigquery__get_tables_by_pattern_sql",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql",
      "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils._bigquery__get_matching_schemata",
          "macro.dbt_utils.get_table_types_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4403434,
      "supported_languages": null
    },
    "macro.dbt_utils._bigquery__get_matching_schemata": {
      "name": "_bigquery__get_matching_schemata",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata",
      "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.run_query"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4411912,
      "supported_languages": null
    },
    "macro.dbt_utils.get_column_values": {
      "name": "get_column_values",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_column_values.sql",
      "original_file_path": "macros/sql/get_column_values.sql",
      "unique_id": "macro.dbt_utils.get_column_values",
      "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_column_values"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4425943,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_column_values": {
      "name": "default__get_column_values",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_column_values.sql",
      "original_file_path": "macros/sql/get_column_values.sql",
      "unique_id": "macro.dbt_utils.default__get_column_values",
      "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt.load_relation",
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4449048,
      "supported_languages": null
    },
    "macro.dbt_utils.group_by": {
      "name": "group_by",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/groupby.sql",
      "original_file_path": "macros/sql/groupby.sql",
      "unique_id": "macro.dbt_utils.group_by",
      "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__group_by"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4453251,
      "supported_languages": null
    },
    "macro.dbt_utils.default__group_by": {
      "name": "default__group_by",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/groupby.sql",
      "original_file_path": "macros/sql/groupby.sql",
      "unique_id": "macro.dbt_utils.default__group_by",
      "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4457357,
      "supported_languages": null
    },
    "macro.dbt_utils.get_tables_by_prefix_sql": {
      "name": "get_tables_by_prefix_sql",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_tables_by_prefix_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
      "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql",
      "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4462929,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_tables_by_prefix_sql": {
      "name": "default__get_tables_by_prefix_sql",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_tables_by_prefix_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
      "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql",
      "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.446711,
      "supported_languages": null
    },
    "macro.dbt_utils.get_query_results_as_dict": {
      "name": "get_query_results_as_dict",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_query_results_as_dict.sql",
      "original_file_path": "macros/sql/get_query_results_as_dict.sql",
      "unique_id": "macro.dbt_utils.get_query_results_as_dict",
      "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_query_results_as_dict"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4472563,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_query_results_as_dict": {
      "name": "default__get_query_results_as_dict",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_query_results_as_dict.sql",
      "original_file_path": "macros/sql/get_query_results_as_dict.sql",
      "unique_id": "macro.dbt_utils.default__get_query_results_as_dict",
      "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4481847,
      "supported_languages": null
    },
    "macro.dbt_utils.width_bucket": {
      "name": "width_bucket",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/width_bucket.sql",
      "original_file_path": "macros/sql/width_bucket.sql",
      "unique_id": "macro.dbt_utils.width_bucket",
      "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__width_bucket"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4491034,
      "supported_languages": null
    },
    "macro.dbt_utils.default__width_bucket": {
      "name": "default__width_bucket",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/width_bucket.sql",
      "original_file_path": "macros/sql/width_bucket.sql",
      "unique_id": "macro.dbt_utils.default__width_bucket",
      "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4497972,
      "supported_languages": null
    },
    "macro.dbt_utils.snowflake__width_bucket": {
      "name": "snowflake__width_bucket",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/width_bucket.sql",
      "original_file_path": "macros/sql/width_bucket.sql",
      "unique_id": "macro.dbt_utils.snowflake__width_bucket",
      "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.450101,
      "supported_languages": null
    },
    "macro.dbt_utils.get_table_types_sql": {
      "name": "get_table_types_sql",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_table_types_sql.sql",
      "original_file_path": "macros/sql/get_table_types_sql.sql",
      "unique_id": "macro.dbt_utils.get_table_types_sql",
      "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_table_types_sql"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4507492,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_table_types_sql": {
      "name": "default__get_table_types_sql",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_table_types_sql.sql",
      "original_file_path": "macros/sql/get_table_types_sql.sql",
      "unique_id": "macro.dbt_utils.default__get_table_types_sql",
      "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4509726,
      "supported_languages": null
    },
    "macro.dbt_utils.postgres__get_table_types_sql": {
      "name": "postgres__get_table_types_sql",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_table_types_sql.sql",
      "original_file_path": "macros/sql/get_table_types_sql.sql",
      "unique_id": "macro.dbt_utils.postgres__get_table_types_sql",
      "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4511783,
      "supported_languages": null
    },
    "macro.dbt_utils.databricks__get_table_types_sql": {
      "name": "databricks__get_table_types_sql",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_table_types_sql.sql",
      "original_file_path": "macros/sql/get_table_types_sql.sql",
      "unique_id": "macro.dbt_utils.databricks__get_table_types_sql",
      "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4513793,
      "supported_languages": null
    },
    "macro.dbt_utils.safe_subtract": {
      "name": "safe_subtract",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/safe_subtract.sql",
      "original_file_path": "macros/sql/safe_subtract.sql",
      "unique_id": "macro.dbt_utils.safe_subtract",
      "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__safe_subtract"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.451885,
      "supported_languages": null
    },
    "macro.dbt_utils.default__safe_subtract": {
      "name": "default__safe_subtract",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/safe_subtract.sql",
      "original_file_path": "macros/sql/safe_subtract.sql",
      "unique_id": "macro.dbt_utils.default__safe_subtract",
      "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4528308,
      "supported_languages": null
    },
    "macro.dbt_utils.generate_surrogate_key": {
      "name": "generate_surrogate_key",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/generate_surrogate_key.sql",
      "original_file_path": "macros/sql/generate_surrogate_key.sql",
      "unique_id": "macro.dbt_utils.generate_surrogate_key",
      "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__generate_surrogate_key"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4534998,
      "supported_languages": null
    },
    "macro.dbt_utils.default__generate_surrogate_key": {
      "name": "default__generate_surrogate_key",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/generate_surrogate_key.sql",
      "original_file_path": "macros/sql/generate_surrogate_key.sql",
      "unique_id": "macro.dbt_utils.default__generate_surrogate_key",
      "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.type_string",
          "macro.dbt.hash",
          "macro.dbt.concat"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4545825,
      "supported_languages": null
    },
    "macro.dbt_utils.get_relations_by_prefix": {
      "name": "get_relations_by_prefix",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_relations_by_prefix.sql",
      "original_file_path": "macros/sql/get_relations_by_prefix.sql",
      "unique_id": "macro.dbt_utils.get_relations_by_prefix",
      "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__get_relations_by_prefix"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4554498,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_relations_by_prefix": {
      "name": "default__get_relations_by_prefix",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_relations_by_prefix.sql",
      "original_file_path": "macros/sql/get_relations_by_prefix.sql",
      "unique_id": "macro.dbt_utils.default__get_relations_by_prefix",
      "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.get_tables_by_prefix_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.456764,
      "supported_languages": null
    },
    "macro.dbt_utils.pretty_log_format": {
      "name": "pretty_log_format",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/jinja_helpers/pretty_log_format.sql",
      "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
      "unique_id": "macro.dbt_utils.pretty_log_format",
      "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__pretty_log_format"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4571507,
      "supported_languages": null
    },
    "macro.dbt_utils.default__pretty_log_format": {
      "name": "default__pretty_log_format",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/jinja_helpers/pretty_log_format.sql",
      "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
      "unique_id": "macro.dbt_utils.default__pretty_log_format",
      "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.pretty_time"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4574757,
      "supported_languages": null
    },
    "macro.dbt_utils._is_ephemeral": {
      "name": "_is_ephemeral",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/jinja_helpers/_is_ephemeral.sql",
      "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql",
      "unique_id": "macro.dbt_utils._is_ephemeral",
      "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4586384,
      "supported_languages": null
    },
    "macro.dbt_utils.pretty_time": {
      "name": "pretty_time",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/jinja_helpers/pretty_time.sql",
      "original_file_path": "macros/jinja_helpers/pretty_time.sql",
      "unique_id": "macro.dbt_utils.pretty_time",
      "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__pretty_time"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.45904,
      "supported_languages": null
    },
    "macro.dbt_utils.default__pretty_time": {
      "name": "default__pretty_time",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/jinja_helpers/pretty_time.sql",
      "original_file_path": "macros/jinja_helpers/pretty_time.sql",
      "unique_id": "macro.dbt_utils.default__pretty_time",
      "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4593544,
      "supported_languages": null
    },
    "macro.dbt_utils.slugify": {
      "name": "slugify",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/jinja_helpers/slugify.sql",
      "original_file_path": "macros/jinja_helpers/slugify.sql",
      "unique_id": "macro.dbt_utils.slugify",
      "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4602587,
      "supported_languages": null
    },
    "macro.dbt_utils._is_relation": {
      "name": "_is_relation",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/jinja_helpers/_is_relation.sql",
      "original_file_path": "macros/jinja_helpers/_is_relation.sql",
      "unique_id": "macro.dbt_utils._is_relation",
      "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4608958,
      "supported_languages": null
    },
    "macro.dbt_utils.log_info": {
      "name": "log_info",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/jinja_helpers/log_info.sql",
      "original_file_path": "macros/jinja_helpers/log_info.sql",
      "unique_id": "macro.dbt_utils.log_info",
      "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__log_info"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.461291,
      "supported_languages": null
    },
    "macro.dbt_utils.default__log_info": {
      "name": "default__log_info",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/jinja_helpers/log_info.sql",
      "original_file_path": "macros/jinja_helpers/log_info.sql",
      "unique_id": "macro.dbt_utils.default__log_info",
      "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.pretty_log_format"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.461552,
      "supported_languages": null
    },
    "macro.dbt_utils.test_expression_is_true": {
      "name": "test_expression_is_true",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/expression_is_true.sql",
      "original_file_path": "macros/generic_tests/expression_is_true.sql",
      "unique_id": "macro.dbt_utils.test_expression_is_true",
      "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_expression_is_true"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.462126,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_expression_is_true": {
      "name": "default__test_expression_is_true",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/expression_is_true.sql",
      "original_file_path": "macros/generic_tests/expression_is_true.sql",
      "unique_id": "macro.dbt_utils.default__test_expression_is_true",
      "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.should_store_failures"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4626715,
      "supported_languages": null
    },
    "macro.dbt_utils.test_not_accepted_values": {
      "name": "test_not_accepted_values",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/not_accepted_values.sql",
      "original_file_path": "macros/generic_tests/not_accepted_values.sql",
      "unique_id": "macro.dbt_utils.test_not_accepted_values",
      "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_not_accepted_values"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4633808,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_not_accepted_values": {
      "name": "default__test_not_accepted_values",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/not_accepted_values.sql",
      "original_file_path": "macros/generic_tests/not_accepted_values.sql",
      "unique_id": "macro.dbt_utils.default__test_not_accepted_values",
      "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4640439,
      "supported_languages": null
    },
    "macro.dbt_utils.test_cardinality_equality": {
      "name": "test_cardinality_equality",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/cardinality_equality.sql",
      "original_file_path": "macros/generic_tests/cardinality_equality.sql",
      "unique_id": "macro.dbt_utils.test_cardinality_equality",
      "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_cardinality_equality"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4647448,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_cardinality_equality": {
      "name": "default__test_cardinality_equality",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/cardinality_equality.sql",
      "original_file_path": "macros/generic_tests/cardinality_equality.sql",
      "unique_id": "macro.dbt_utils.default__test_cardinality_equality",
      "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.except"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4653292,
      "supported_languages": null
    },
    "macro.dbt_utils.test_sequential_values": {
      "name": "test_sequential_values",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/sequential_values.sql",
      "original_file_path": "macros/generic_tests/sequential_values.sql",
      "unique_id": "macro.dbt_utils.test_sequential_values",
      "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_sequential_values"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.466438,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_sequential_values": {
      "name": "default__test_sequential_values",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/sequential_values.sql",
      "original_file_path": "macros/generic_tests/sequential_values.sql",
      "unique_id": "macro.dbt_utils.default__test_sequential_values",
      "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.slugify",
          "macro.dbt.type_timestamp",
          "macro.dbt.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4678504,
      "supported_languages": null
    },
    "macro.dbt_utils.test_not_null_proportion": {
      "name": "test_not_null_proportion",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/not_null_proportion.sql",
      "original_file_path": "macros/generic_tests/not_null_proportion.sql",
      "unique_id": "macro.dbt_utils.test_not_null_proportion",
      "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_not_null_proportion"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4686918,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_not_null_proportion": {
      "name": "default__test_not_null_proportion",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/not_null_proportion.sql",
      "original_file_path": "macros/generic_tests/not_null_proportion.sql",
      "unique_id": "macro.dbt_utils.default__test_not_null_proportion",
      "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4699876,
      "supported_languages": null
    },
    "macro.dbt_utils.test_recency": {
      "name": "test_recency",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/recency.sql",
      "original_file_path": "macros/generic_tests/recency.sql",
      "unique_id": "macro.dbt_utils.test_recency",
      "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_recency"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4710057,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_recency": {
      "name": "default__test_recency",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/recency.sql",
      "original_file_path": "macros/generic_tests/recency.sql",
      "unique_id": "macro.dbt_utils.default__test_recency",
      "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.dateadd",
          "macro.dbt.current_timestamp",
          "macro.dbt.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4723024,
      "supported_languages": null
    },
    "macro.dbt_utils.test_accepted_range": {
      "name": "test_accepted_range",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/accepted_range.sql",
      "original_file_path": "macros/generic_tests/accepted_range.sql",
      "unique_id": "macro.dbt_utils.test_accepted_range",
      "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_accepted_range"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4730878,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_accepted_range": {
      "name": "default__test_accepted_range",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/accepted_range.sql",
      "original_file_path": "macros/generic_tests/accepted_range.sql",
      "unique_id": "macro.dbt_utils.default__test_accepted_range",
      "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4738274,
      "supported_languages": null
    },
    "macro.dbt_utils.test_mutually_exclusive_ranges": {
      "name": "test_mutually_exclusive_ranges",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/mutually_exclusive_ranges.sql",
      "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql",
      "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges",
      "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4771938,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_mutually_exclusive_ranges": {
      "name": "default__test_mutually_exclusive_ranges",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/mutually_exclusive_ranges.sql",
      "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql",
      "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges",
      "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4799728,
      "supported_languages": null
    },
    "macro.dbt_utils.test_equality": {
      "name": "test_equality",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/equality.sql",
      "original_file_path": "macros/generic_tests/equality.sql",
      "unique_id": "macro.dbt_utils.test_equality",
      "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_equality"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.48103,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_equality": {
      "name": "default__test_equality",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/equality.sql",
      "original_file_path": "macros/generic_tests/equality.sql",
      "unique_id": "macro.dbt_utils.default__test_equality",
      "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt.except"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.482389,
      "supported_languages": null
    },
    "macro.dbt_utils.test_relationships_where": {
      "name": "test_relationships_where",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/relationships_where.sql",
      "original_file_path": "macros/generic_tests/relationships_where.sql",
      "unique_id": "macro.dbt_utils.test_relationships_where",
      "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_relationships_where"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4831986,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_relationships_where": {
      "name": "default__test_relationships_where",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/relationships_where.sql",
      "original_file_path": "macros/generic_tests/relationships_where.sql",
      "unique_id": "macro.dbt_utils.default__test_relationships_where",
      "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4837492,
      "supported_languages": null
    },
    "macro.dbt_utils.test_not_constant": {
      "name": "test_not_constant",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/not_constant.sql",
      "original_file_path": "macros/generic_tests/not_constant.sql",
      "unique_id": "macro.dbt_utils.test_not_constant",
      "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_not_constant"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4843416,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_not_constant": {
      "name": "default__test_not_constant",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/not_constant.sql",
      "original_file_path": "macros/generic_tests/not_constant.sql",
      "unique_id": "macro.dbt_utils.default__test_not_constant",
      "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4850676,
      "supported_languages": null
    },
    "macro.dbt_utils.test_at_least_one": {
      "name": "test_at_least_one",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/at_least_one.sql",
      "original_file_path": "macros/generic_tests/at_least_one.sql",
      "unique_id": "macro.dbt_utils.test_at_least_one",
      "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_at_least_one"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4859412,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_at_least_one": {
      "name": "default__test_at_least_one",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/at_least_one.sql",
      "original_file_path": "macros/generic_tests/at_least_one.sql",
      "unique_id": "macro.dbt_utils.default__test_at_least_one",
      "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4871364,
      "supported_languages": null
    },
    "macro.dbt_utils.test_unique_combination_of_columns": {
      "name": "test_unique_combination_of_columns",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/unique_combination_of_columns.sql",
      "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql",
      "unique_id": "macro.dbt_utils.test_unique_combination_of_columns",
      "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.488035,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_unique_combination_of_columns": {
      "name": "default__test_unique_combination_of_columns",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/unique_combination_of_columns.sql",
      "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql",
      "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns",
      "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4891157,
      "supported_languages": null
    },
    "macro.dbt_utils.test_not_empty_string": {
      "name": "test_not_empty_string",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/not_empty_string.sql",
      "original_file_path": "macros/generic_tests/not_empty_string.sql",
      "unique_id": "macro.dbt_utils.test_not_empty_string",
      "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_not_empty_string"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4898841,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_not_empty_string": {
      "name": "default__test_not_empty_string",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/not_empty_string.sql",
      "original_file_path": "macros/generic_tests/not_empty_string.sql",
      "unique_id": "macro.dbt_utils.default__test_not_empty_string",
      "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4903939,
      "supported_languages": null
    },
    "macro.dbt_utils.test_fewer_rows_than": {
      "name": "test_fewer_rows_than",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/fewer_rows_than.sql",
      "original_file_path": "macros/generic_tests/fewer_rows_than.sql",
      "unique_id": "macro.dbt_utils.test_fewer_rows_than",
      "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_fewer_rows_than"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4917734,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_fewer_rows_than": {
      "name": "default__test_fewer_rows_than",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/fewer_rows_than.sql",
      "original_file_path": "macros/generic_tests/fewer_rows_than.sql",
      "unique_id": "macro.dbt_utils.default__test_fewer_rows_than",
      "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.49367,
      "supported_languages": null
    },
    "macro.dbt_utils.test_equal_rowcount": {
      "name": "test_equal_rowcount",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/equal_rowcount.sql",
      "original_file_path": "macros/generic_tests/equal_rowcount.sql",
      "unique_id": "macro.dbt_utils.test_equal_rowcount",
      "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.default__test_equal_rowcount"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4949286,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_equal_rowcount": {
      "name": "default__test_equal_rowcount",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/equal_rowcount.sql",
      "original_file_path": "macros/generic_tests/equal_rowcount.sql",
      "unique_id": "macro.dbt_utils.default__test_equal_rowcount",
      "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4968016,
      "supported_languages": null
    },
    "macro.nesso_macros.hash": {
      "name": "hash",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/hash_column.sql",
      "original_file_path": "macros/hash_column.sql",
      "unique_id": "macro.nesso_macros.hash",
      "macro_sql": "{%- macro hash(field) -%} {{ return(adapter.dispatch(\"hash\", \"dbt\")(field)) }} {%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.my_nesso_project.default__hash"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4975836,
      "supported_languages": null
    },
    "macro.nesso_macros.default__hash": {
      "name": "default__hash",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/hash_column.sql",
      "original_file_path": "macros/hash_column.sql",
      "unique_id": "macro.nesso_macros.default__hash",
      "macro_sql": "{%- macro default__hash(field) -%}\n    md5(cast({{ adapter.quote(field) }} as {{ api.Column.translate_type(\"string\") }}))\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4979799,
      "supported_languages": null
    },
    "macro.nesso_macros.databricks__hash": {
      "name": "databricks__hash",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/hash_column.sql",
      "original_file_path": "macros/hash_column.sql",
      "unique_id": "macro.nesso_macros.databricks__hash",
      "macro_sql": "{%- macro databricks__hash(field) -%}\n    sha2(cast({{ adapter.quote(field) }} as {{ api.Column.translate_type(\"string\") }}), 256)\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4983213,
      "supported_languages": null
    },
    "macro.nesso_macros.sqlserver__hash": {
      "name": "sqlserver__hash",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/hash_column.sql",
      "original_file_path": "macros/hash_column.sql",
      "unique_id": "macro.nesso_macros.sqlserver__hash",
      "macro_sql": "{%- macro sqlserver__hash(field) -%}\n    HASHBYTES(\n        'SHA2_256', cast({{ adapter.quote(field) }} as {{ api.Column.translate_type(\"string\") }})\n    )\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.4986622,
      "supported_languages": null
    },
    "macro.nesso_macros.create_description_markdown": {
      "name": "create_description_markdown",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/create_description_markdown.sql",
      "original_file_path": "macros/create_description_markdown.sql",
      "unique_id": "macro.nesso_macros.create_description_markdown",
      "macro_sql": "{% macro create_description_markdown(relation_name=none, docs_name=none, schema=none) %}\n\n    {% if docs_name is none %} {% set docs_name = schema + \"_\" + relation_name %} {% endif %}\n\n    {% if execute %}\n        {{ print(\"{% docs \" + docs_name + \" %}\") }}\n        {{ print(\"## `\" + relation_name + \"` table\") }}\n\n        {{ print(\"\") }}\n\n        {{ print(\"### \ud83d\udcdd Details\") }}\n        {{ print(\"-\") }}\n\n        {{ print(\"\") }}\n\n        {{ print(\"### \ud83d\udcda External docs\") }}\n        {{ print(\"-\") }}\n        {{ print(\"{% enddocs %}\") }}\n    {%- endif -%}\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.500304,
      "supported_languages": null
    },
    "macro.nesso_macros.print_profile_docs": {
      "name": "print_profile_docs",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/dbt_profiler.sql",
      "original_file_path": "macros/dbt_profiler.sql",
      "unique_id": "macro.nesso_macros.print_profile_docs",
      "macro_sql": "{% macro print_profile_docs(\n    relation=none,\n    relation_name=none,\n    docs_name=none,\n    schema=none,\n    database=none,\n    exclude_measures=[],\n    include_columns=[],\n    exclude_columns=[],\n    max_rows=none,\n    max_columns=13,\n    max_column_width=30,\n    max_precision=none\n) %}\n    {%- set results = get_profile_table(\n        relation=relation,\n        relation_name=relation_name,\n        schema=schema,\n        database=database,\n        exclude_measures=exclude_measures,\n        include_columns=include_columns,\n        exclude_columns=exclude_columns,\n    ) -%}\n\n    {% if docs_name is none %} {% set docs_name = schema + \"_\" + relation_name %} {% endif %}\n\n    {% if execute %}\n        {{ print(\"{% docs \" + docs_name + \"  %}\") }}\n        {{ print(\"## `\" + relation_name + \"` table\") }}\n\n        {{ print(\"\") }}\n\n        {{ print(\"### \ud83d\udcdd Details\") }}\n        {{ print(\"-\") }}\n\n        {{ print(\"\") }}\n\n        {{ print(\"### \ud83d\udcca Profiling\") }}\n        {% do results.print_table(\n            max_rows=max_rows,\n            max_columns=max_columns,\n            max_column_width=max_column_width,\n            max_precision=max_precision,\n        ) %}\n\n        {{ print(\"\") }}\n\n        {{ print(\"### \ud83d\udcda External docs\") }}\n        {{ print(\"-\") }}\n        {{ print(\"{% enddocs %}\") }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": ["macro.nesso_macros.get_profile_table"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.5297084,
      "supported_languages": null
    },
    "macro.nesso_macros.get_profile_table": {
      "name": "get_profile_table",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/dbt_profiler.sql",
      "original_file_path": "macros/dbt_profiler.sql",
      "unique_id": "macro.nesso_macros.get_profile_table",
      "macro_sql": "{% macro get_profile_table(\n    relation=none,\n    relation_name=none,\n    schema=none,\n    database=none,\n    exclude_measures=[],\n    include_columns=[],\n    exclude_columns=[]\n) %}\n\n    {%- set relation = dbt_profiler.get_relation(\n        relation=relation, relation_name=relation_name, schema=schema, database=database\n    ) -%}\n    {%- set profile_sql = get_profile(\n        relation=relation,\n        exclude_measures=exclude_measures,\n        include_columns=include_columns,\n        exclude_columns=exclude_columns,\n    ) -%}\n    {{ log(profile_sql, info=False) }}\n    {% set results = run_query(profile_sql) %}\n    {% set results = results.rename(results.column_names | map(\"lower\")) %}\n    {% do return(results) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.get_relation",
          "macro.nesso_macros.get_profile",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.5312316,
      "supported_languages": null
    },
    "macro.nesso_macros.databricks__type_string": {
      "name": "databricks__type_string",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/dbt_profiler.sql",
      "original_file_path": "macros/dbt_profiler.sql",
      "unique_id": "macro.nesso_macros.databricks__type_string",
      "macro_sql": "\n\n\n{%- macro databricks__type_string() -%} string {%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.5314257,
      "supported_languages": null
    },
    "macro.nesso_macros.get_profile": {
      "name": "get_profile",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/dbt_profiler.sql",
      "original_file_path": "macros/dbt_profiler.sql",
      "unique_id": "macro.nesso_macros.get_profile",
      "macro_sql": "{% macro get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[]) %}\n    {{\n        return(\n            adapter.dispatch(\"get_profile\", macro_namespace=\"dbt_profiler\")(\n                relation, exclude_measures, include_columns, exclude_columns\n            )\n        )\n    }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.my_nesso_project.default__get_profile"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.5319006,
      "supported_languages": null
    },
    "macro.nesso_macros.default__get_profile": {
      "name": "default__get_profile",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/dbt_profiler.sql",
      "original_file_path": "macros/dbt_profiler.sql",
      "unique_id": "macro.nesso_macros.default__get_profile",
      "macro_sql": "{% macro default__get_profile(\n    relation, exclude_measures=[], include_columns=[], exclude_columns=[]\n) %}\n\n    {%- if include_columns and exclude_columns -%}\n        {{\n            exceptions.raise_compiler_error(\n                \"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\"\n            )\n        }}\n    {%- endif -%}\n\n    {%- set all_measures = [\n        \"row_count\",\n        \"not_null_proportion\",\n        \"distinct_proportion\",\n        \"distinct_count\",\n        \"is_unique\",\n        \"min\",\n        \"max\",\n        \"avg\",\n        \"std_dev_population\",\n        \"std_dev_sample\",\n    ] -%}\n\n    {%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n    {{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n    {% if execute %}\n        {% do dbt_profiler.assert_relation_exists(relation) %}\n\n        {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n        {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n        {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n        {{ log(\"Relation columns: \" ~ relation_column_names | join(\", \"), info=False) }}\n\n        {%- if include_columns -%}\n            {%- set profile_column_names = (\n                relation_column_names | select(\"in\", include_columns) | list\n            ) -%}\n        {%- elif exclude_columns -%}\n            {%- set profile_column_names = (\n                relation_column_names | reject(\"in\", exclude_columns) | list\n            ) -%}\n        {%- else -%} {%- set profile_column_names = relation_column_names -%}\n        {%- endif -%}\n\n        {{ log(\"Profile columns: \" ~ profile_column_names | join(\", \"), info=False) }}\n\n        {% set information_schema_columns = run_query(\n            dbt_profiler.select_from_information_schema_columns(relation)\n        ) %}\n        {% set information_schema_columns = information_schema_columns.rename(\n            information_schema_columns.column_names | map(\"lower\")\n        ) %}\n        {% set information_schema_data_types = (\n            information_schema_columns.columns[\"data_type\"].values() | map(\"lower\") | list\n        ) %}\n        {% set information_schema_column_names = (\n            information_schema_columns.columns[\"column_name\"].values()\n            | map(\"lower\")\n            | list\n        ) %}\n        {% set data_type_map = {} %}\n        {% for column_name in information_schema_column_names %}\n            {% do data_type_map.update(\n                {column_name: information_schema_data_types[loop.index - 1]}\n            ) %}\n        {% endfor %}\n        {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n        {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            cast(count(*) as numeric) as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            sum(case when {{ adapter.quote(column_name) }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) / cast(count(*) as numeric) as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) = count(*) as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type) %}cast(min({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }}){% else %}null{% endif %} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type) %}cast(max({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }}){% else %}null{% endif %} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}avg({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as avg,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}stddev_pop({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}stddev_samp({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by _column_position asc\n        {% endset %}\n\n        {% do return(profile_sql) %}\n    {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.assert_relation_exists",
          "macro.dbt.run_query",
          "macro.dbt_profiler.select_from_information_schema_columns",
          "macro.dbt_profiler.is_numeric_dtype",
          "macro.dbt_profiler.is_date_or_time_dtype",
          "macro.dbt_profiler.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.5395598,
      "supported_languages": null
    },
    "macro.nesso_macros.databricks__get_profile": {
      "name": "databricks__get_profile",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/dbt_profiler.sql",
      "original_file_path": "macros/dbt_profiler.sql",
      "unique_id": "macro.nesso_macros.databricks__get_profile",
      "macro_sql": "{% macro databricks__get_profile(\n    relation, exclude_measures=[], include_columns=[], exclude_columns=[]\n) %}\n\n    {%- if include_columns and exclude_columns -%}\n        {{\n            exceptions.raise_compiler_error(\n                \"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\"\n            )\n        }}\n    {%- endif -%}\n\n    {%- set all_measures = [\n        \"row_count\",\n        \"not_null_proportion\",\n        \"distinct_proportion\",\n        \"distinct_count\",\n        \"is_unique\",\n        \"min\",\n        \"max\",\n        \"avg\",\n        \"std_dev_population\",\n        \"std_dev_sample\",\n    ] -%}\n\n    {%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n    {{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n    {% if execute %}\n        {% do dbt_profiler.assert_relation_exists(relation) %}\n\n        {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n        {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n        {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n        {{ log(\"Relation columns: \" ~ relation_column_names | join(\", \"), info=False) }}\n\n        {%- if include_columns -%}\n            {%- set profile_column_names = (\n                relation_column_names | select(\"in\", include_columns) | list\n            ) -%}\n        {%- elif exclude_columns -%}\n            {%- set profile_column_names = (\n                relation_column_names | reject(\"in\", exclude_columns) | list\n            ) -%}\n        {%- else -%} {%- set profile_column_names = relation_column_names -%}\n        {%- endif -%}\n\n        {{ log(\"Profile columns: \" ~ profile_column_names | join(\", \"), info=False) }}\n\n        {# Get column metadata. #}\n        {% call statement(\"table_metadata\", fetch_result=True) -%}\n    describe table extended {{ relation.schema }}.{{ relation.identifier }}\n  {% endcall %}\n  {% set columns_metadata = load_result('table_metadata').table %}\n  {% set columns_metadata = columns_metadata.rename(columns_metadata.column_names | map('lower')) %}\n\n  {% set data_types = columns_metadata.columns['data_type'].values() | map('lower') | list %}\n  {% set column_names = columns_metadata.columns['col_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in column_names %}\n    {% do data_type_map.update({column_name: data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            cast(count(*) as numeric) as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            sum(case when {{ adapter.quote(column_name) }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) / cast(count(*) as numeric) as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            count(distinct {{ adapter.quote(column_name) }}) = count(*) as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type) %}cast(min({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }}){% else %}null{% endif %} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type) %}cast(max({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }}){% else %}null{% endif %} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}avg({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as avg,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}stddev_pop({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {% if dbt_profiler.is_numeric_dtype(data_type) %}stddev_samp({{ adapter.quote(column_name) }}){% else %}cast(null as numeric){% endif %} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by _column_position asc\n  {% endset %}\n\n  {# {{ print(profile_sql) }} #}\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_profiler.assert_relation_exists",
          "macro.dbt.statement",
          "macro.dbt_profiler.is_numeric_dtype",
          "macro.dbt_profiler.is_date_or_time_dtype",
          "macro.dbt_profiler.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.5474527,
      "supported_languages": null
    },
    "macro.nesso_macros.generate_column_yaml": {
      "name": "generate_column_yaml",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/generate_model_yaml_boilerplate.sql",
      "original_file_path": "macros/generate_model_yaml_boilerplate.sql",
      "unique_id": "macro.nesso_macros.generate_column_yaml",
      "macro_sql": "{% macro generate_column_yaml(\n    column,\n    model_yaml,\n    columns_metadata_dict,\n    parent_column_name=\"\",\n    include_pii_tag=True,\n    include_data_types=True,\n    snakecase_columns=True\n) %}\n    {{ log(\"Generating YAML for column '\" ~ column.name ~ \"'...\") }}\n    {% if parent_column_name %} {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %} {% set column_name = column.name %}\n    {% endif %}\n\n    {% set column_metadata_dict = columns_metadata_dict.get(column.name, {}) %}\n    {% if include_pii_tag %} {% set tags = column_metadata_dict.get(\"tags\", []) %}\n    {% else %}\n        {% set tags = column_metadata_dict.get(\"tags\", []) | reject(\"equalto\", \"PII\") | list %}\n    {% endif %}\n\n    {% if snakecase_columns %}\n        {% do model_yaml.append(\"      - name: \" ~ adapter.quote(snake_case(column.name))) %}\n    {% else %} {% do model_yaml.append(\"      - name: \" ~ adapter.quote(column.name)) %}\n    {% endif %}\n    {% do model_yaml.append(\"        quote: true\") %}\n    {% if include_data_types %}\n        {% do model_yaml.append(\n            \"        data_type: \" ~ (column.data_type | upper)\n        ) %}\n    {% endif %}\n    {% do model_yaml.append(\n        '        description: \"' ~ column_metadata_dict.get(\"description\", \"\") ~ '\"'\n    ) %}\n    {% do model_yaml.append(\"        # tests:\") %}\n    {% do model_yaml.append(\"          # - unique\") %}\n    {% do model_yaml.append(\"          # - not_null\") %}\n    {% do model_yaml.append(\"        tags: \" ~ tags) %}\n    {% do model_yaml.append(\"\") %}\n\n    {% if column.fields | length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = generate_column_yaml(\n                child_column,\n                model_yaml,\n                column_metadata_dict,\n                parent_column_name=column_name,\n            ) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.nesso_macros.snake_case"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.5560517,
      "supported_languages": null
    },
    "macro.nesso_macros.generate_model_yaml": {
      "name": "generate_model_yaml",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/generate_model_yaml_boilerplate.sql",
      "original_file_path": "macros/generate_model_yaml_boilerplate.sql",
      "unique_id": "macro.nesso_macros.generate_model_yaml",
      "macro_sql": "{% macro generate_model_yaml(\n    model_name,\n    technical_owner=\"None\",\n    business_owner=\"None\",\n    domains=[],\n    source_systems=[],\n    tags=[],\n    upstream_metadata=True,\n    include_sla=True,\n    include_pii_tag=False,\n    include_data_types=True,\n    snakecase_columns=True,\n    base_model_prefix=none,\n    bootstrapped_base_model=False\n) %}\n    {# \nGenerate model YAML template.\n\nArgs:\n    model_name (str): The name of the model for which to generate the template.\n    technical_owner (str, optional): The technical owner of the model.\n    business_owner (str, optional): The business owner of the model.\n    domains (List[str]): The domains the model belongs to.\n    source_systems (List[str]): Sources from which the table originates, e.g., SQL Server, BigQuery, etc.\n    tags (List[str]): The tags to attach to the model.\n    upstream_metadata (bool, optional): Whether to inherit upstream model metadata.\n    include_sla (bool, optional): Whether to include the SLA meta key.\n    include_pii_tag (bool, optional): Whether to include the PII tag.\n    include_data_types (bool, optional): Whether to include the data types of column.\n    This may be useful when PII columns are already masked in the base model.\n    snakecase_columns (bool, optional): Whether to standardize upstream column names\n        to snakecase in the model.\n    base_model_prefix (str, optional): Prefix to apply to the name of the base model.\n        Defaults to empty string (no prefix).\n    bootstrapped_base_model (bool, optional): Determines whether the base model was built using \n        the `base_model bootstrap` command.\n#}  \n    \n    {# Set to True to enable debugging. #}\n    {% set info=False %}\n\n    {{\n        log(\n            \"generate_model_yaml | Generating model YAML for model '\"\n            ~ model_name\n            ~ \"'...\",\n            info=info\n        )\n    }}\n\n    {% if upstream_metadata %}\n        {% set upstream_model_metadata = get_parent_source_or_model_metadata(model_name) %}\n        {{\n            log(\n                \"generate_model_yaml | Got upstream model metadata:\\n\\n\"\n                ~ upstream_model_metadata\n                ~ \"\\n\",\n                info=info\n            )\n        }}\n        {# {% set metadata_resolved = resolve_upstream_metadata(upstream_models_metadata) %}\n        {{\n            log(\n                \"generate_model_yaml()  | Resolved upstream metadata: \\n\\n\"\n                ~ metadata_resolved\n                ~ \"\\n\",\n                info=info\n            )\n        }} #}\n    {% else %}\n        {# {% set metadata_resolved = {} %} #}\n        {% set upstream_model_metadata = {} %}\n    {% endif %}\n    \n    \n    {% set dependencies = get_model_dependencies(model_name) %}\n    {% set upstream_model_type = dependencies[\"type\"] %}\n\n    {% if base_model_prefix is none %}\n        {% set base_model_prefix = \"\" %}\n    {% else %}\n        {% if base_model_prefix and not base_model_prefix.endswith(\"_\") %}\n            {% set base_model_prefix = base_model_prefix ~ \"_\" %}\n        {% endif %}\n        {% set model_name = base_model_prefix ~ model_name %}\n    {% endif %}\n\n    {{ log(\"generate_model_yaml | Base model prefix: \" ~ base_model_prefix, info=info) }}\n\n    {# Table metadata. #}\n    {% set model_yaml = [] %}\n    {% do model_yaml.append(\"version: 2\") %}\n    {% do model_yaml.append(\"\") %}\n    {% do model_yaml.append(\"models:\") %}\n\n    {% do model_yaml.append(\"  - name: \" ~ model_name | lower) %}\n\n    {% if upstream_model_type == \"source\" %}\n        {% do model_yaml.append(\"    description: Base model of the `\" ~ model_name | replace(base_model_prefix, \"\") ~ \"` table.\") %}\n    {% else %} {% do model_yaml.append('    description: \"\"') %}\n    {% endif %}\n\n    {# {% set tags = metadata_resolved.get(\"tags\", tags) %}\n\n    {% if tags %}\n        {% do model_yaml.append('    config:')%}\n        {% do model_yaml.append('      tags: ' ~ tags)%}\n    {% endif %} #}\n\n    {{ log(\"generate_model_yaml | Adding meta key...\", info=info) }}\n\n    {% do model_yaml.append(\"    meta:\") %}\n    {% if upstream_model_metadata %}\n        {% set meta = upstream_model_metadata.get(\"meta\", {}) %}\n        {# {% set meta = metadata_resolved.get(\"meta\", {}) %} #}\n    {% else %} {% set meta = {} %}\n    {% endif %}\n\n    {# Extract owners from metadata. #}\n    {# Jinja forgets variables defined in loops -- but it has a concept of namespace as a workaround. #}\n    {% set ns = namespace(technical_owner=technical_owner, business_owner=business_owner) %} \n\n    {{ log(\"generate_model_yaml | Getting owner metadata...\", info=info) }}\n\n    {% if (technical_owner == \"None\" or business_owner == \"None\") and meta %}\n\n        {% for owner_meta in meta.get(\"owners\") %}\n            {% set typ = owner_meta.get(\"type\") %}\n            {% set email = owner_meta.get(\"email\") %}\n\n            {% if typ == \"Technical owner\" %}\n                {# {{ print(\"Setting technical owner to \" ~ email)}} #}\n                {% if not technical_owner or technical_owner == \"None\" %}\n                    {% set ns.technical_owner = email %}\n                {% endif %}\n            {% elif typ == \"Business owner\" %}\n                {# {{ print(\"Setting business owner to \" ~ email)}} #}\n                {% if not business_owner or business_owner == \"None\" %}\n                    {% set ns.business_owner = email %}\n                {% endif %}\n            {% endif %}\n\n        {% endfor %}\n    {% endif %}\n\n    {% do model_yaml.append(\"      owners:\") %}\n    {% do model_yaml.append(\"        - type: Technical owner\") %}\n    {% do model_yaml.append(\"          email: \" ~ ns.technical_owner) %}\n    {% do model_yaml.append(\"        - type: Business owner\") %}\n    {% do model_yaml.append(\"          email: \" ~ ns.business_owner) %}\n    {% do model_yaml.append(\"      domains: \" ~ meta.get(\"domains\", domains)) %}\n    {% do model_yaml.append(\"      true_source: \" ~ meta.get(\"true_source\", source_systems)) %}\n\n    {% if include_sla %}\n        {% do model_yaml.append(\"      SLA: \" ~ meta.get(\"SLA\", \"24 hours\")) %}\n    {% endif %}\n\n    {{ log(\"generate_model_yaml | Meta key added.\", info=info) }}\n\n    {% do model_yaml.append(\"    columns:\") %}\n\n    {# Separates base models created using bootstrap command\n     because they can multiple parent sources and models. #}\n    {% if upstream_model_type == \"source\" and not bootstrapped_base_model %}\n        {% set schema = dependencies[\"node\"].split(\".\")[-2] %}\n        {% set relation = source(schema, model_name | replace(base_model_prefix, \"\")) %}\n    {% else %} {% set relation = ref(model_name) %}\n    {% endif %}\n\n    {{ log(\"generate_model_yaml| Retrieving the list of columns...\", info=info) }}\n\n    {%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n    {# Column metadata. #}\n    {% if meta %}\n        {{ log(\"generate_model_yaml | Retrieving column metadata...\", info=info) }}\n        {% set columns_metadata_dict = (\n            get_parent_source_or_model_column_metadata(\n                model_name | replace(base_model_prefix, \"\")\n            )\n            if upstream_metadata\n            else {}\n        ) %}\n        {{\n            log(\n                \"generate_model_yaml | Successfully retrieved column metadata:\\n\"\n                ~ columns_metadata_dict,\n                info=info\n            )\n        }}\n    {% else %} {% set columns_metadata_dict = {} %}\n    {% endif %}\n\n    {{ log(\"generate_model_yaml | Generating column YAML...\", info=info) }}\n    {% for column in columns %}\n        {{ \n            log(\n                \"generate_model_yaml()  | Generating YAML for column: \"\n                ~ column,\n                info=info\n            )\n        }}\n        {% set model_yaml = generate_column_yaml(\n            column,\n            model_yaml,\n            columns_metadata_dict,\n            include_data_types=include_data_types,\n            include_pii_tag=False,\n            snakecase_columns=True,\n        ) %}\n        {{ log(\"generate_model_yaml()  | Generated YAML: \" ~ model_yaml, info=info) }}\n    {% endfor %}\n    {{ log(\"generate_model_yaml | Successfully generated column YAML.\", info=info) }}\n \n    {%- if execute -%}\n\n        {%- set joined = model_yaml | join(\"\\n\") -%}\n\n        {{ print(joined) }}\n        {{ log(\"generate_model_yaml()  | Final metadata:\\n\\n\" ~ joined, info=info) }}\n\n        {%- do return(joined) -%}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.nesso_macros.get_parent_source_or_model_metadata",
          "macro.nesso_macros.get_model_dependencies",
          "macro.nesso_macros.get_parent_source_or_model_column_metadata",
          "macro.nesso_macros.generate_column_yaml"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.56548,
      "supported_languages": null
    },
    "macro.nesso_macros.resolve_upstream_metadata": {
      "name": "resolve_upstream_metadata",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/generate_model_yaml_boilerplate.sql",
      "original_file_path": "macros/generate_model_yaml_boilerplate.sql",
      "unique_id": "macro.nesso_macros.resolve_upstream_metadata",
      "macro_sql": "{% macro resolve_upstream_metadata(metadata) %}\n+    {# Set to True to enable logging to console #}\n+    {% set info = False %}\n+    {# \n+    Merge upstream metadata using the following logic:\n+    - fields of type string are taken from the first model in the list\n+    - fields of type list are merged together\n+    - for dict fields, same rules are applied to their subfields\n+    #}\n+\n+    {{ log(\"resolve_upstream_metadata()  | Got metadata:\\n\\n\" ~ metadata ~ \"\\n\", info=info) }}\n+\n+    {% set metadata_resolved = {} %}\n+    {% for model_name in metadata %}\n+        {{ log(\"resolve_upstream_metadata()  | Processing model '\" ~ model_name ~ \"'...\", info=info) }}\n+        {% set model_metadata = metadata[model_name] %}\n+\n+        {{ log(\"resolve_upstream_metadata()  | Got model metadata: \\n\\n\" ~ model_metadata ~ \"\\n\", info=info) }}\n+\n+        {% for field in model_metadata %}\n+            {# Workaround because dbt jinja doesn't have the `continue` loop control. #}\n+            {% set continue_tracker = namespace(should_continue = True) %}\n+            {% set field_content = model_metadata[field] %}\n+            {% if field not in metadata_resolved %}\n+                {% do metadata_resolved.update({field: field_content}) %}\n+            {% else %}\n+                {% if field_content is string %}\n+                    {# String - keep the value from the first encountered upstream,\n+                    as there's no way to decide which is the correct one. #}\n+\n+                    {{ log(\"resolve_upstream_metadata()  | String field found: \" ~ field ~ \": \" ~ field_content, info=info) }}\n+                    \n+                    {% set continue_tracker.should_continue = False %}\n+                {% elif field_content is mapping and continue_tracker.should_continue %}\n+                    {# A dictionary - merge the keys. #}\n+\n+                    {{ log(\"resolve_upstream_metadata()  | Dict field found: \" ~ field ~ \": \" ~ field_content, info=info) }}\n+\n+                    {% for subfield in field_content %}\n+                        {% set subfield_content = field_content[subfield] %}\n+                        {% set continue_tracker2 = namespace(should_continue = True) %}\n+                        {# Each key in the dictionary can also be a string, \n+                        list, or dict. We apply the same rules as to top-level fields.#}\n+                        {% if subfield_content is string %}\n+                            {% set continue_tracker2.should_continue = False %}\n+                        {% elif subfield_content is mapping and continue_tracker2.should_continue %}\n+                            {% do metadata_resolved[field].update({subfield: subfield_content}) %}\n+                        {% elif subfield_content is iterable and continue_tracker2.should_continue %}\n+                            {% for key in subfield_content %}\n+                                {% if key not in metadata_resolved[field][subfield] %}\n+                                    {% do metadata_resolved[field][subfield].append(key) %}\n+                                {% endif %}\n+                            {% endfor %}\n+                        {% else %}\n+                            {% do metadata_resolved[field].update({subfield: model_metadata[field]}) %}  \n+                        {% endif %}\n+                    {% endfor %}\n+                {% elif field_content is iterable and continue_tracker.should_continue %}\n+                    {# A list - append all unique items into the final list. #}\n+                    \n+                    {{ log(\"resolve_upstream_metadata()  | List field found: \" ~ field ~ \": \" ~ field_content, info=info) }}\n+\n+                    {% for key in field_content %}\n+                        {% if key not in metadata_resolved[field] %}\n+                            {% do metadata_resolved[field].append(key) %}\n+                        {% endif %}\n+                    {% endfor %}\n+                {% else %}\n+                    {% do metadata_resolved.update({field: model_metadata[field]}) %}                \n+                {% endif %}\n+            {% endif %}\n+        {% endfor %}\n+    {% endfor %}\n+\n+    {{ log(\"resolve_upstream_metadata()  | Resolved metadata:\\n\\n\" ~ metadata_resolved ~ \"\\n\", info=info) }}\n+\n+    {% do return(metadata_resolved) %}\n+\n+{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.570872,
      "supported_languages": null
    },
    "macro.nesso_macros.get_tables_in_schema": {
      "name": "get_tables_in_schema",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/generate_source_yaml_boilerplate.sql",
      "original_file_path": "macros/generate_source_yaml_boilerplate.sql",
      "unique_id": "macro.nesso_macros.get_tables_in_schema",
      "macro_sql": "{% macro get_tables_in_schema(\n    schema_name,\n    database_name=target.database,\n    table_pattern=\"%\",\n    exclude=\"\",\n    print_result=False\n) %}\n\n    {% set tables = dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude,\n    ) %}\n\n    {% set table_list = tables | map(attribute=\"identifier\") %}\n\n    {% if print_result %} {{ print(table_list | join(\",\")) }} {% endif %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_utils.get_relations_by_pattern"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.5754898,
      "supported_languages": null
    },
    "macro.nesso_macros.generate_source": {
      "name": "generate_source",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/generate_source_yaml_boilerplate.sql",
      "original_file_path": "macros/generate_source_yaml_boilerplate.sql",
      "unique_id": "macro.nesso_macros.generate_source",
      "macro_sql": "{% macro generate_source(\n    schema_name,\n    technical_owner=none,\n    business_owner=none,\n    domains=[],\n    source_systems=[],\n    database_name=target.database,\n    generate_columns=True,\n    include_descriptions=True,\n    include_data_types=True,\n    include_table_profiling=True,\n    include_sla=True,\n    include_freshness=True,\n    loaded_at_field=\"_viadot_downloaded_at_utc::timestamp\",\n    freshness={\n        \"warn_after\": \"{ count: 24, period: hour }\",\n        \"error_after\": \"{ count: 48, period: hour }\",\n    },\n    table_pattern=\"%\",\n    exclude=\"\",\n    name=schema_name,\n    table_names=None,\n    case_sensitive_cols=True\n) %}\n    {# The default table_pattern is adapted to the postgres database. Make sure it also matches the database you intend to use #}\n    ,\n\n    {% set sources_yaml = [] %}\n\n    {% if table_names is none %}\n        {% do sources_yaml.append(\"version: 2\") %}\n        {% do sources_yaml.append(\"\") %}\n        {% do sources_yaml.append(\"sources:\") %}\n        {% do sources_yaml.append(\"  - name: \" ~ name | lower) %}\n\n        {% if database_name != target.database %}\n            {% do sources_yaml.append(\"    database: \" ~ database_name | lower) %}\n        {% endif %}\n\n        {% do sources_yaml.append(\"    schema: \" ~ schema_name | lower) %}\n        {% if include_descriptions %}\n            {% do sources_yaml.append('    description: \"\"') %}\n        {% endif %}\n        {% do sources_yaml.append(\"\\n    tables:\") %}\n\n        {% set tables = get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n    {% else %} {% set tables = table_names %}\n\n    {% endif %}\n\n    {% if table_names %} {% do sources_yaml.append(\"\") %} {% endif %}\n\n    {% for table in tables %}\n        {% do sources_yaml.append(\"\\n      - name: \" ~ table | lower) %}\n        {% if include_descriptions %}\n            \n            {% if include_table_profiling %}\n                {# Note that the doc must already exist. You can generate it beforehand with dbt-profiler. #}\n                {% do sources_yaml.append('        description: ' ~ \"'\" ~ '{{ doc(\"' ~ schema_name ~ \"_\" ~ table ~ '\") }}'  ~ \"'\") %}\n            {% else %}\n                {% do sources_yaml.append('        description: \"\"') %}\n            {% endif %}\n\n        {% endif %}\n\n        {% if include_freshness %}\n            {% do sources_yaml.append(\"        loaded_at_field: \" ~ loaded_at_field) %}\n            {% do sources_yaml.append(\"        freshness:\") %}\n            {% do sources_yaml.append(\"          warn_after: \" ~ freshness.get(\"warn_after\", \"\")) %}\n            {% do sources_yaml.append(\n                \"          error_after: \" ~ freshness.get(\"error_after\", \"\")\n            ) %}\n        {% endif %}\n\n        {% do sources_yaml.append(\"        tags: []\") %}\n\n        {% do sources_yaml.append(\"        meta:\") %}\n        {% do sources_yaml.append(\"          owners:\") %}\n        {% do sources_yaml.append(\"            - type: Technical owner\") %}\n        {% do sources_yaml.append(\"              email: \" ~ technical_owner) %}\n        {% do sources_yaml.append(\"            - type: Business owner\") %}\n        {% do sources_yaml.append(\"              email: \" ~ business_owner) %}\n        {% do sources_yaml.append(\"          domains: \" ~ domains) %}\n        {% do sources_yaml.append(\"          true_source: \" ~ source_systems) %}\n\n        {% if include_sla %} {% do sources_yaml.append('          SLA: \"24 hours\"') %} {% endif %}\n\n        {% if generate_columns %}\n            {% do sources_yaml.append(\"        columns:\") %}\n\n            {% set table_relation = api.Relation.create(\n                database=database_name, schema=schema_name, identifier=table\n            ) %}\n\n            {% set columns = adapter.get_columns_in_relation(table_relation) %}\n            {% for column in columns %}\n                {% if case_sensitive_cols %}\n                    {% do sources_yaml.append(\"          - name: \" ~ adapter.quote(column.name)) %}\n                {% else %}\n                    {% do sources_yaml.append(\n                        \"          - name: \" ~ adapter.quote(column.name) | lower\n                    ) %}\n                {% endif %}\n                {% do sources_yaml.append(\"            quote: true\") %}\n                {% if include_data_types %}\n                    {% do sources_yaml.append(\n                        \"            data_type: \" ~ (column.data_type | upper)\n                    ) %}\n                {% endif %}\n                {% if include_descriptions %}\n                    {% do sources_yaml.append('            description: \"\"') %}\n                {% endif %}\n                {% do sources_yaml.append(\"            # tests:\") %}\n                {% do sources_yaml.append(\"              # - unique\") %}\n                {% do sources_yaml.append(\"              # - not_null\") %}\n                {% do sources_yaml.append(\"            tags: []\") %}\n            {% endfor %}\n        {% endif %}\n\n    {% endfor %}\n\n    {% if execute %}\n\n        {% set joined = sources_yaml | join(\"\\n\") %} {{ print(joined) }} {% do return(joined) %}\n\n    {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.nesso_macros.get_tables_in_schema"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.5824294,
      "supported_languages": null
    },
    "macro.nesso_macros.generate_schema_name": {
      "name": "generate_schema_name",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/get_custom_schema.sql",
      "original_file_path": "macros/get_custom_schema.sql",
      "unique_id": "macro.nesso_macros.generate_schema_name",
      "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ generate_schema_name_for_env(custom_schema_name, node) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.generate_schema_name_for_env"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.582798,
      "supported_languages": null
    },
    "macro.nesso_macros.get_table_columns": {
      "name": "get_table_columns",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/get_table_columns.sql",
      "original_file_path": "macros/get_table_columns.sql",
      "unique_id": "macro.nesso_macros.get_table_columns",
      "macro_sql": "{%- macro get_table_columns(schema_name, table_name, database_name=target.database) -%}\n\n    {% set table_relation = api.Relation.create(\n                schema=schema_name, identifier=table_name, database=database_name\n            ) %}\n\n    {% set columns = adapter.get_columns_in_relation(table_relation) %}\n\n\n    {% set columns_dict  = {} %}\n    {% for column in columns %}\n        {% set column_name = column.name %}\n        {% set data_type = column.data_type | upper %}\n        {% do columns_dict.update({column_name: data_type})%}\n    {% endfor %}\n\n    {% if execute %}\n\n        {{ print(columns_dict) }} {% do return(columns_dict) %}\n\n    {% endif %}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.584217,
      "supported_languages": null
    },
    "macro.nesso_macros.get_source_pii_columns": {
      "name": "get_source_pii_columns",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/get_source_pii_columns.sql",
      "original_file_path": "macros/get_source_pii_columns.sql",
      "unique_id": "macro.nesso_macros.get_source_pii_columns",
      "macro_sql": "{% macro get_source_pii_columns(dbt_project, schema, table) %}\n\n    {% if execute %}\n\n        {% set meta_columns = [] %}\n        {% set fqname = \"source\" ~ \".\" ~ dbt_project ~ \".\" ~ schema ~ \".\" ~ table %}\n        {% set columns = graph.sources[fqname][\"columns\"] %}\n\n        {% for column in columns %}\n            {% if \"PII\" in graph.sources[fqname][\"columns\"][column][\"tags\"] %}\n                {% do meta_columns.append(column) %}\n            {% endif %}\n        {% endfor %}\n\n        {{ return(meta_columns) }}\n\n    {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.585522,
      "supported_languages": null
    },
    "macro.nesso_macros.generate_base_model": {
      "name": "generate_base_model",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/generate_base_model.sql",
      "original_file_path": "macros/generate_base_model.sql",
      "unique_id": "macro.nesso_macros.generate_base_model",
      "macro_sql": "{% macro generate_base_model(\n    source_name, table_name, dbt_project, snakecase_columns=False, leading_commas=False\n) %}\n\n    {%- set source_relation = source(source_name, table_name) -%}\n\n    {%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n    {%- set column_names = columns | map(attribute=\"name\") -%}\n\n    {%- set base_model_sql -%}\nwith _masked as (\n    select {{ '\\n      ' ~ hash_source_pii_columns(table=table_name, schema=source_name, dbt_project=dbt_project ) | trim }}\n    from {{ \"{{ source(\" ~ '\"' ~ source_name ~ '\"' ~ \", \" ~ '\"' ~ table_name ~ '\"' ~ \") }}\" }}\n),\n\nrenamed as (\n    select\n    {%- if leading_commas -%}\n        {%- for column in column_names %}\n            {{\", \" if not loop.first}}\n            {% if snakecase_columns %}\n                {{ adapter.quote(column) ~ ' as ' ~ adapter.quote(snake_case(column)) }}\n            {% else %}\n                {{ adapter.quote(column) }}\n            {% endif %}\n        {%- endfor %}\n    {% else %}\n        {% for column in column_names %}\n            {%- if snakecase_columns -%}\n                {{ adapter.quote(column) ~ ' as ' ~ adapter.quote(snake_case(column)) }}\n            {%- else -%}\n                {{ adapter.quote(column) }}\n            {%- endif -%}\n            {{\",\" if not loop.last}}\n        {% endfor %}\n    {%- endif %}\n    from _masked\n)\n\nselect * from renamed\n    {%- endset -%}\n\n    {% if execute %} {{ print(base_model_sql) }} {% do return(base_model_sql) %} {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.nesso_macros.hash_source_pii_columns",
          "macro.nesso_macros.snake_case"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.588609,
      "supported_languages": null
    },
    "macro.nesso_macros.hash_source_pii_columns": {
      "name": "hash_source_pii_columns",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/hash_source_pii_columns.sql",
      "original_file_path": "macros/hash_source_pii_columns.sql",
      "unique_id": "macro.nesso_macros.hash_source_pii_columns",
      "macro_sql": "{%- macro hash_source_pii_columns(dbt_project, schema, table=None) -%}\n\n    {%- set pii_columns = get_source_pii_columns(\n        dbt_project=dbt_project, schema=schema, table=table\n    ) -%}\n\n    {% for column in pii_columns %}\n        {{ hash(column) | indent(4) }} as {{ adapter.quote(column) }},\n        {{ \"\\n\" if not loop.last else \"\\n      \" }}\n    {%- endfor -%}\n    {{ dbt_utils.star(from=source(schema, table), except=pii_columns) | indent(4) | trim }}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.nesso_macros.get_source_pii_columns",
          "macro.nesso_macros.hash",
          "macro.dbt_utils.star"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.5896792,
      "supported_languages": null
    },
    "macro.nesso_macros.generate_seed_schema_yaml": {
      "name": "generate_seed_schema_yaml",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/generate_seed_yaml_boilerplate.sql",
      "original_file_path": "macros/generate_seed_yaml_boilerplate.sql",
      "unique_id": "macro.nesso_macros.generate_seed_schema_yaml",
      "macro_sql": "{% macro generate_seed_schema_yaml() %}\n\n    {% set yaml = [] %}\n    {% do yaml.append(\"version: 2\") %}\n    {% do yaml.append(\"\") %}\n    {% do yaml.append(\"seeds: []\") %}\n\n    {% if execute %}\n        {% set joined = yaml | join(\"\\n\") %} {{ print(joined) }} {% do return(joined) %}\n    {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.592552,
      "supported_languages": null
    },
    "macro.nesso_macros.generate_seed_yaml": {
      "name": "generate_seed_yaml",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/generate_seed_yaml_boilerplate.sql",
      "original_file_path": "macros/generate_seed_yaml_boilerplate.sql",
      "unique_id": "macro.nesso_macros.generate_seed_yaml",
      "macro_sql": "{% macro generate_seed_yaml(\n    seed,\n    database_name=target.database,\n    schema_name=target.schema,\n    generate_columns=True,\n    include_tags=False,\n    include_owners=True,\n    technical_owner=\"\",\n    business_owner=\"\",\n    domains=[],\n    source_systems=[],\n    case_sensitive_cols=True\n) %}\n\n    {% set yaml = [] %}\n\n    {% do yaml.append(\"  - name: \" ~ seed | lower) %}\n    {% do yaml.append('    description: \"\"') %}\n\n    {% if include_tags %} {% do yaml.append(\"    tags: []\") %} {% endif %}\n\n    {% if include_owners %}\n        {% do yaml.append(\"    meta:\") %}\n        {% do yaml.append(\"      owners:\") %}\n        {% do yaml.append(\"        - type: Technical owner\") %}\n        {% do yaml.append(\"          email: \" ~ technical_owner) %}\n        {% do yaml.append(\"        - type: Business owner\") %}\n        {% do yaml.append(\"          email: \" ~ business_owner) %}\n        {% do yaml.append(\"      domains: \" ~ domains) %}\n        {% do yaml.append(\"      true_source: \" ~ source_systems) %}\n    {% endif %}\n\n    {% if generate_columns %}\n        {% do yaml.append(\"    columns:\") %}\n\n        {% set table_relation = api.Relation.create(\n            database=database_name, schema=schema_name, identifier=seed\n        ) %}\n        {% set columns = adapter.get_columns_in_relation(table_relation) %}\n        {% for column in columns %}\n            {% if case_sensitive_cols %}\n                {% do yaml.append(\"      - name: \" ~ column.name) %}\n                {% do yaml.append(\"        quote: true\") %}\n            {% else %} {% do yaml.append(\"      - name: \" ~ column.name | lower) %}\n            {% endif %}\n            {% do yaml.append('        description: \"\"') %}\n            {% do yaml.append(\"        # tests:\") %}\n            {% do yaml.append(\"          # - unique\") %}\n            {% do yaml.append(\"          # - not_null\") %}\n            {% do yaml.append(\"          # - accepted_values:\") %}\n            {% do yaml.append('          #   values: [\"value1\", \"value2\"]') %}\n        {% endfor %}\n\n    {% endif %}\n\n    {% if execute %}\n        {% set joined = yaml | join(\"\\n\") %} {{ print(joined) }} {% do return(joined) %}\n    {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.596341,
      "supported_languages": null
    },
    "macro.nesso_macros.redshift__list_relations_without_caching": {
      "name": "redshift__list_relations_without_caching",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/redshift_external_tables_fix.sql",
      "original_file_path": "macros/redshift_external_tables_fix.sql",
      "unique_id": "macro.nesso_macros.redshift__list_relations_without_caching",
      "macro_sql": "{% macro redshift__list_relations_without_caching(schema_relation) %}\n\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n        table_catalog as database,\n        table_name as name,\n        table_schema as schema,\n        'table' as type\n    from information_schema.tables\n    where table_schema ilike '{{ schema_relation.schema }}'\n    and table_type = 'BASE TABLE'\n    union all\n    select\n      table_catalog as database,\n      table_name as name,\n      table_schema as schema,\n      case\n        when view_definition ilike '%create materialized view%'\n          then 'materialized_view'\n        else 'view'\n      end as type\n    from information_schema.views\n    where table_schema ilike '{{ schema_relation.schema }}'\n    union all\n    select \n        redshift_database_name as database,\n        tablename as name,\n        schemaname as schema,\n        'table' as type\n    from svv_external_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n\n  {{ return(load_result('list_relations_without_caching').table) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.5973108,
      "supported_languages": null
    },
    "macro.nesso_macros.snake_case": {
      "name": "snake_case",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/codegen_helpers.sql",
      "original_file_path": "macros/codegen_helpers.sql",
      "unique_id": "macro.nesso_macros.snake_case",
      "macro_sql": "{%- macro snake_case(s) -%} {{ s | replace(\" \", \"_\") | replace(\"-\", \"_\") | lower }} {%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6006238,
      "supported_languages": null
    },
    "macro.nesso_macros.get_model_dependencies": {
      "name": "get_model_dependencies",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/codegen_helpers.sql",
      "original_file_path": "macros/codegen_helpers.sql",
      "unique_id": "macro.nesso_macros.get_model_dependencies",
      "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {# Set to True to enable logging #}\n    {% set info=False %}\n\n    {{ \n        log(\n            \"get_model_dependencies | Getting upstream dependencies for model '\"\n            ~ model_name\n            ~ \"'...\",\n            info=info\n        )\n    }}\n\n    {% set upstream_fqns = [] %}\n\n    {{ log(\"get_model_dependencies | Checking upstream models...\", info=info) }}\n    {% for node in graph.nodes.values() | selectattr(\"name\", \"equalto\", model_name) %}\n        {% if node.depends_on.nodes and not \"source.\" in node.depends_on.nodes[0] %}\n            {# The node depends on another model. #}\n            {{ \n                log(\n                    \"get_model_dependencies | Got the following dependencies: \"\n                    ~ node.depends_on.nodes\n                    ~ \".\",\n                    info=info\n                )\n            }}\n            {{ return({\"type\": \"model\", \"nodes\": node.depends_on.nodes}) }}\n        {% endif %}\n    {% endfor %}\n\n    {{ log(\"get_model_dependencies | Checking upstream source...\", info=info) }}\n    {% for node in graph.sources.values() | selectattr(\"name\", \"equalto\", model_name) %}\n        {{ \n            log(\n                \"get_model_dependencies | Got the following dependencies: \" ~ node, info=info\n            )\n        }}\n        {{ return({\"type\": \"source\", \"node\": node.unique_id}) }}\n    {% endfor %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6027026,
      "supported_languages": null
    },
    "macro.nesso_macros.get_source_or_model_column_metadata": {
      "name": "get_source_or_model_column_metadata",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/codegen_helpers.sql",
      "original_file_path": "macros/codegen_helpers.sql",
      "unique_id": "macro.nesso_macros.get_source_or_model_column_metadata",
      "macro_sql": "{% macro get_source_or_model_column_metadata(model_name, model_type=\"model\") %}\n    {# \nGet column metadata (description and tags) for a model or source.\n\nReturns: Dict[str, Dict[str, Any]]\n\nExample:\n>>> dbt run-operation get_source_or_model_column_metadata --args '{\"model_name\": \"c4c_contact\", \"model_type\": \"model\"}'\n>>> {\"id\": {\"description\": \"A\", \"tags\": []}}\n#}\n    {% if model_type == \"model\" %} {% set nodes = graph.nodes.values() %}\n    {% else %} {% set nodes = graph.sources.values() %}\n    {% endif %}\n\n    {% set columns_metadata_dict = {} %}\n    {% for node in nodes | selectattr(\"name\", \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do columns_metadata_dict.update(\n                {\n                    col_name: {\n                        \"description\": col_values.description,\n                        \"tags\": col_values.tags,\n                    }\n                }\n            ) %}\n        {% endfor %}\n    {% endfor %}\n\n    {{ return(columns_metadata_dict) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6041276,
      "supported_languages": null
    },
    "macro.nesso_macros.get_parent_source_or_model_column_metadata": {
      "name": "get_parent_source_or_model_column_metadata",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/codegen_helpers.sql",
      "original_file_path": "macros/codegen_helpers.sql",
      "unique_id": "macro.nesso_macros.get_parent_source_or_model_column_metadata",
      "macro_sql": "{% macro get_parent_source_or_model_column_metadata(model_name) %}\n    {# \nGet column metadata (description and tags) for the model's or source's\nparent source or model.\n\nThis is useful for automatically populating YAML files of downstream models\nwith the information already provided in upstream (for example, if a view\nuses a field from a source amd this field's description is already available \nin the source's YAML file).\n\nNote that if the same column name exists in multiple upstream models, \nthe description will be overwritten at each loop and the final one\nwill be taken from the model that happens to be the last in the loop. \n\nReturns: Dict[str, Dict[str, Any]]\n\nExample:\n>>> dbt run-operation get_parent_source_or_model_column_metadata --args '{\"model_name\": \"c4c_contact\"}'\n>>> {\"id\": {\"description\": \"B\", \"tags\": []}}\n#}\n    {# Set to True to enable logging to console #}\n    {% set info = False %}\n\n    {{\n        log(\n            \"get_parent_source_or_model_column_metadata | Getting column-level metadata for \"\n            ~ model_type\n            ~ \" '\"\n            ~ model_name\n            ~ \"'...\",\n            info=info\n        )\n    }}\n\n    {% if execute %}\n        {% set dependencies = get_model_dependencies(model_name) %}\n        {% set model_type = dependencies[\"type\"] %}\n\n        {# Note we immediately return `column_metadata`, as outside the if/else, it's magically set to None. #}\n        {% if model_type == \"model\" %}\n            {% for full_model in dependencies[\"nodes\"] %}\n                {% set upstream_model_name = full_model.split(\".\")[-1] %}\n                {% set column_metadata = get_source_or_model_column_metadata(\n                    model_name=upstream_model_name, model_type=model_type\n                ) %}\n                {{\n                    log(\n                        \"get_parent_source_or_model_column_metadata()  | Got model column metadata:\\n\\n\"\n                        ~ column_metadata\n                        ~ \"\\n\",\n                        info=info\n                    )\n                }}\n                {{ return(column_metadata) }}\n            {% endfor %}\n        {% endif %}\n\n        {% if model_type == \"source\" %}\n            {% set upstream_model_name = dependencies[\"node\"].split(\".\")[-1] %}\n            {% set column_metadata = get_source_or_model_column_metadata(\n                model_name=upstream_model_name, model_type=model_type\n            ) %}\n            {{\n                log(\n                    \"get_parent_source_or_model_column_metadata()  | Got source column metadata:\\n\\n\"\n                    ~ column_metadata\n                    ~ \"\\n\",\n                    info=info\n                )\n            }}\n            {{ return(column_metadata) }}\n        {% endif %}\n\n    {% endif %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.nesso_macros.get_model_dependencies",
          "macro.nesso_macros.get_source_or_model_column_metadata"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6063347,
      "supported_languages": null
    },
    "macro.nesso_macros.get_source_or_model_metadata": {
      "name": "get_source_or_model_metadata",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/codegen_helpers.sql",
      "original_file_path": "macros/codegen_helpers.sql",
      "unique_id": "macro.nesso_macros.get_source_or_model_metadata",
      "macro_sql": "{% macro get_source_or_model_metadata(model_name, model_type=\"model\") %}\n    {# \nGet table metadata (description, tags, and meta) for a model or source.\n\nNote that if there are multiple upstream models, the metadata will\nbe overwritten at each loop and the final one will be taken from the model \nthat happens to be the last in the loop. \n\nReturns: Dict[str, Union[str, List[str], Dict[str, Any]]]\n\nExample:\n>>> dbt run-operation get_source_or_model_metadata --args '{\"model_name\": \"c4c_contact\", \"model_type\": \"model\"}'\n>>> {\"description\": \"A\", \"tags\": [], \"meta\": {\"owner\": js@example.com}}\n#}\n    {# Set to True to enable debugging #}\n    {% set info = False %}\n\n    {{ \n        log(\n            \"get_source_or_model_metadata()  | Getting model-level metadata for \" \n            ~ model_type \n            ~ \" '\" \n            ~ model_name \n            ~ \"'...\",\n            info=info\n        )\n    }}\n\n    {% if model_type == \"model\" %} {% set nodes = graph.nodes.values() %}\n    {% else %} {% set nodes = graph.sources.values() %}\n    {% endif %}\n\n    {% set table_metadata_dict = {} %}\n    {% for node in nodes | selectattr(\"name\", \"equalto\", model_name) %}\n        {{ log(node, info=info) }}\n        {% do table_metadata_dict.update(\n            {\"description\": node.description, \"tags\": node.tags, \"meta\": node.meta}\n        ) %}\n    {% endfor %}\n\n    {{\n        log(\n            \"get_source_or_model_metadata()  | Successfully retrieved model-level metadata for \"\n            ~ model_type\n            ~ \" '\"\n            ~ model_name\n            ~ \"':\\n\"\n            ~ table_metadata_dict,\n            info=info\n        )\n    }}\n\n    {{ return(table_metadata_dict) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6083736,
      "supported_languages": null
    },
    "macro.nesso_macros.get_parent_source_or_model_metadata": {
      "name": "get_parent_source_or_model_metadata",
      "resource_type": "macro",
      "package_name": "nesso_macros",
      "path": "macros/codegen_helpers.sql",
      "original_file_path": "macros/codegen_helpers.sql",
      "unique_id": "macro.nesso_macros.get_parent_source_or_model_metadata",
      "macro_sql": "{% macro get_parent_source_or_model_metadata(model_name) %}\n{#\nGet table metadata (description, tags, and meta) for the model's parent\nsource(s) and/or model(s).\n\nThis is useful for automatically populating YAML files of downstream models\nwith the information already provided in upstream (eg. when defining\nbase views).\n\nReturns: Dict[str, Union[str, List[str], Dict[str, Any]]]\n\nExample:\n>>> dbt run-operation get_parent_source_or_model_metadata --args '{\"model_name\": \"c4c_contact\"}'\n>>> {\"description\": \"B\", \"tags\": [], \"meta\": {\"owner\": js@example.com}}\n#}\n    {% if execute %}\n\n        {# Set to True to enable debugging. #}\n        {% set info=False %}\n\n        {{ log(\"get_parent_source_or_model_metadata | Getting upstream metadata...\", info=info) }}\n\n        {% set dependencies = get_model_dependencies(model_name) %}\n        {{\n            log(\n                \"get_parent_source_or_model_metadata()  | Got the following dependencies: \"\n                ~ dependencies,\n                info=info\n            )\n        }}\n        {% set model_type = dependencies[\"type\"] %}\n        \n        {# Note we immediately return `model_metadata`, as outside the if/else, it's magically set to None. #}\n        {% if model_type == \"model\" %}\n            {% for full_model in dependencies[\"nodes\"] %}\n                {% set model_name = full_model.split(\".\")[-1] %}\n                {% set model_metadata = get_source_or_model_metadata(\n                    model_name, model_type=model_type\n                ) %}\n                {% do return(model_metadata) %}\n            {% endfor %}\n        {% elif model_type == \"source\" %}\n            {% set model_name = dependencies[\"node\"].split(\".\")[-1] %}\n            {% set model_metadata = get_source_or_model_metadata(\n                model_name, model_type=model_type\n            ) %}\n            {{\n                log(\n                    \"get_parent_source_or_model_metadata| Got the following upstream sources:\\n\"\n                    ~ model_metadata,\n                    info=info\n                )\n            }}\n            {% do return(model_metadata) %}\n        {% else %} \n            {{\n                log(\n                    \"get_parent_source_or_model_metadata| Incorrect model type (\"\n                    ~ model_type\n                    ~ \").\",\n                    info=info\n                )\n            }}\n            {% set model_metadata = {} %}\n            {% do return(model_metadata) %}\n        {% endif %}\n\n        {{ log(\"get_parent_source_or_model_metadata | Finishing...\", info=info) }}\n        {{ log(\"\", info=info) }}\n\n    {% endif %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.nesso_macros.get_model_dependencies",
          "macro.nesso_macros.get_source_or_model_metadata"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6108928,
      "supported_languages": null
    },
    "macro.dbt_date.get_base_dates": {
      "name": "get_base_dates",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/get_base_dates.sql",
      "original_file_path": "macros/get_base_dates.sql",
      "unique_id": "macro.dbt_date.get_base_dates",
      "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.default__get_base_dates"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6128147,
      "supported_languages": null
    },
    "macro.dbt_date.default__get_base_dates": {
      "name": "default__get_base_dates",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/get_base_dates.sql",
      "original_file_path": "macros/get_base_dates.sql",
      "unique_id": "macro.dbt_date.default__get_base_dates",
      "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.type_timestamp",
          "macro.dbt.dateadd",
          "macro.dbt_date.today",
          "macro.dbt_date.tomorrow",
          "macro.dbt_date.date_spine"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6140993,
      "supported_languages": null
    },
    "macro.dbt_date.bigquery__get_base_dates": {
      "name": "bigquery__get_base_dates",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/get_base_dates.sql",
      "original_file_path": "macros/get_base_dates.sql",
      "unique_id": "macro.dbt_date.bigquery__get_base_dates",
      "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as datetime )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as datetime )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.dateadd",
          "macro.dbt_date.today",
          "macro.dbt_date.tomorrow",
          "macro.dbt_date.date_spine",
          "macro.dbt.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.61532,
      "supported_languages": null
    },
    "macro.dbt_date.trino__get_base_dates": {
      "name": "trino__get_base_dates",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/get_base_dates.sql",
      "original_file_path": "macros/get_base_dates.sql",
      "unique_id": "macro.dbt_date.trino__get_base_dates",
      "macro_sql": "{% macro trino__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.now()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.type_timestamp",
          "macro.dbt.dateadd",
          "macro.dbt_date.now",
          "macro.dbt_date.tomorrow",
          "macro.dbt_date.date_spine"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6165478,
      "supported_languages": null
    },
    "macro.dbt_date.get_date_dimension": {
      "name": "get_date_dimension",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/get_date_dimension.sql",
      "original_file_path": "macros/get_date_dimension.sql",
      "unique_id": "macro.dbt_date.get_date_dimension",
      "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.default__get_date_dimension"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6254494,
      "supported_languages": null
    },
    "macro.dbt_date.default__get_date_dimension": {
      "name": "default__get_date_dimension",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/get_date_dimension.sql",
      "original_file_path": "macros/get_date_dimension.sql",
      "unique_id": "macro.dbt_date.default__get_date_dimension",
      "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.get_base_dates",
          "macro.dbt.dateadd",
          "macro.dbt_date.yesterday",
          "macro.dbt_date.tomorrow",
          "macro.dbt_date.day_of_week",
          "macro.dbt_date.day_name",
          "macro.dbt_date.day_of_month",
          "macro.dbt_date.day_of_year",
          "macro.dbt_date.week_start",
          "macro.dbt_date.week_end",
          "macro.dbt_date.week_of_year",
          "macro.dbt_date.iso_week_start",
          "macro.dbt_date.iso_week_end",
          "macro.dbt_date.iso_week_of_year",
          "macro.dbt_date.date_part",
          "macro.dbt.type_int",
          "macro.dbt_date.month_name",
          "macro.dbt.date_trunc",
          "macro.dbt.last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6291738,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__get_date_dimension": {
      "name": "postgres__get_date_dimension",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/get_date_dimension.sql",
      "original_file_path": "macros/get_date_dimension.sql",
      "unique_id": "macro.dbt_date.postgres__get_date_dimension",
      "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.get_base_dates",
          "macro.dbt.dateadd",
          "macro.dbt_date.yesterday",
          "macro.dbt_date.tomorrow",
          "macro.dbt_date.day_of_week",
          "macro.dbt_date.day_name",
          "macro.dbt_date.day_of_month",
          "macro.dbt_date.day_of_year",
          "macro.dbt_date.week_start",
          "macro.dbt_date.week_end",
          "macro.dbt_date.week_of_year",
          "macro.dbt_date.iso_week_start",
          "macro.dbt_date.iso_week_end",
          "macro.dbt_date.iso_week_of_year",
          "macro.dbt_date.date_part",
          "macro.dbt.type_int",
          "macro.dbt_date.month_name",
          "macro.dbt.date_trunc",
          "macro.dbt.last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.633159,
      "supported_languages": null
    },
    "macro.dbt_date.iso_week_of_year": {
      "name": "iso_week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_of_year.sql",
      "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
      "unique_id": "macro.dbt_date.iso_week_of_year",
      "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_date.today",
          "macro.dbt_date.duckdb__iso_week_of_year"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6342206,
      "supported_languages": null
    },
    "macro.dbt_date._iso_week_of_year": {
      "name": "_iso_week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_of_year.sql",
      "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
      "unique_id": "macro.dbt_date._iso_week_of_year",
      "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6345215,
      "supported_languages": null
    },
    "macro.dbt_date.default__iso_week_of_year": {
      "name": "default__iso_week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_of_year.sql",
      "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
      "unique_id": "macro.dbt_date.default__iso_week_of_year",
      "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date._iso_week_of_year"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6348372,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__iso_week_of_year": {
      "name": "snowflake__iso_week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_of_year.sql",
      "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
      "unique_id": "macro.dbt_date.snowflake__iso_week_of_year",
      "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date._iso_week_of_year"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6350913,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__iso_week_of_year": {
      "name": "postgres__iso_week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_of_year.sql",
      "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
      "unique_id": "macro.dbt_date.postgres__iso_week_of_year",
      "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date._iso_week_of_year"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.635335,
      "supported_languages": null
    },
    "macro.dbt_date.duckdb__iso_week_of_year": {
      "name": "duckdb__iso_week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_of_year.sql",
      "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
      "unique_id": "macro.dbt_date.duckdb__iso_week_of_year",
      "macro_sql": "\n\n{%- macro duckdb__iso_week_of_year(date) -%}\n{{ return(dbt_date.postgres__iso_week_of_year(date)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.postgres__iso_week_of_year"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6355677,
      "supported_languages": null
    },
    "macro.dbt_date.spark__iso_week_of_year": {
      "name": "spark__iso_week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_of_year.sql",
      "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
      "unique_id": "macro.dbt_date.spark__iso_week_of_year",
      "macro_sql": "\n\n{%- macro spark__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date._iso_week_of_year"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.635787,
      "supported_languages": null
    },
    "macro.dbt_date.trino__iso_week_of_year": {
      "name": "trino__iso_week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_of_year.sql",
      "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
      "unique_id": "macro.dbt_date.trino__iso_week_of_year",
      "macro_sql": "\n\n{%- macro trino__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date._iso_week_of_year"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6360037,
      "supported_languages": null
    },
    "macro.dbt_date.round_timestamp": {
      "name": "round_timestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/round_timestamp.sql",
      "original_file_path": "macros/calendar_date/round_timestamp.sql",
      "unique_id": "macro.dbt_date.round_timestamp",
      "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6364408,
      "supported_languages": null
    },
    "macro.dbt_date.iso_week_end": {
      "name": "iso_week_end",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_end.sql",
      "original_file_path": "macros/calendar_date/iso_week_end.sql",
      "unique_id": "macro.dbt_date.iso_week_end",
      "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_date.today",
          "macro.dbt_date.default__iso_week_end"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6372883,
      "supported_languages": null
    },
    "macro.dbt_date._iso_week_end": {
      "name": "_iso_week_end",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_end.sql",
      "original_file_path": "macros/calendar_date/iso_week_end.sql",
      "unique_id": "macro.dbt_date._iso_week_end",
      "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.iso_week_start",
          "macro.dbt_date.n_days_away"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6376622,
      "supported_languages": null
    },
    "macro.dbt_date.default__iso_week_end": {
      "name": "default__iso_week_end",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_end.sql",
      "original_file_path": "macros/calendar_date/iso_week_end.sql",
      "unique_id": "macro.dbt_date.default__iso_week_end",
      "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date._iso_week_end"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6378815,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__iso_week_end": {
      "name": "snowflake__iso_week_end",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_end.sql",
      "original_file_path": "macros/calendar_date/iso_week_end.sql",
      "unique_id": "macro.dbt_date.snowflake__iso_week_end",
      "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date._iso_week_end"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6380956,
      "supported_languages": null
    },
    "macro.dbt_date.week_end": {
      "name": "week_end",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_end.sql",
      "original_file_path": "macros/calendar_date/week_end.sql",
      "unique_id": "macro.dbt_date.week_end",
      "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_date.today", "macro.dbt_date.duckdb__week_end"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6388922,
      "supported_languages": null
    },
    "macro.dbt_date.default__week_end": {
      "name": "default__week_end",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_end.sql",
      "original_file_path": "macros/calendar_date/week_end.sql",
      "unique_id": "macro.dbt_date.default__week_end",
      "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.last_day"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6391125,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__week_end": {
      "name": "snowflake__week_end",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_end.sql",
      "original_file_path": "macros/calendar_date/week_end.sql",
      "unique_id": "macro.dbt_date.snowflake__week_end",
      "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6394134,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__week_end": {
      "name": "postgres__week_end",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_end.sql",
      "original_file_path": "macros/calendar_date/week_end.sql",
      "unique_id": "macro.dbt_date.postgres__week_end",
      "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6397102,
      "supported_languages": null
    },
    "macro.dbt_date.duckdb__week_end": {
      "name": "duckdb__week_end",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_end.sql",
      "original_file_path": "macros/calendar_date/week_end.sql",
      "unique_id": "macro.dbt_date.duckdb__week_end",
      "macro_sql": "\n\n{%- macro duckdb__week_end(date) -%}\n{{ return(dbt_date.postgres__week_end(date)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.postgres__week_end"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6399982,
      "supported_languages": null
    },
    "macro.dbt_date.day_of_month": {
      "name": "day_of_month",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_month.sql",
      "original_file_path": "macros/calendar_date/day_of_month.sql",
      "unique_id": "macro.dbt_date.day_of_month",
      "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6404483,
      "supported_languages": null
    },
    "macro.dbt_date.redshift__day_of_month": {
      "name": "redshift__day_of_month",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_month.sql",
      "original_file_path": "macros/calendar_date/day_of_month.sql",
      "unique_id": "macro.dbt_date.redshift__day_of_month",
      "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6408553,
      "supported_languages": null
    },
    "macro.dbt_date.day_of_year": {
      "name": "day_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_year.sql",
      "original_file_path": "macros/calendar_date/day_of_year.sql",
      "unique_id": "macro.dbt_date.day_of_year",
      "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.default__day_of_year"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.641401,
      "supported_languages": null
    },
    "macro.dbt_date.default__day_of_year": {
      "name": "default__day_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_year.sql",
      "original_file_path": "macros/calendar_date/day_of_year.sql",
      "unique_id": "macro.dbt_date.default__day_of_year",
      "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6416574,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__day_of_year": {
      "name": "postgres__day_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_year.sql",
      "original_file_path": "macros/calendar_date/day_of_year.sql",
      "unique_id": "macro.dbt_date.postgres__day_of_year",
      "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6418839,
      "supported_languages": null
    },
    "macro.dbt_date.redshift__day_of_year": {
      "name": "redshift__day_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_year.sql",
      "original_file_path": "macros/calendar_date/day_of_year.sql",
      "unique_id": "macro.dbt_date.redshift__day_of_year",
      "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.642192,
      "supported_languages": null
    },
    "macro.dbt_date.spark__day_of_year": {
      "name": "spark__day_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_year.sql",
      "original_file_path": "macros/calendar_date/day_of_year.sql",
      "unique_id": "macro.dbt_date.spark__day_of_year",
      "macro_sql": "\n\n{%- macro spark__day_of_year(date) -%}\n    dayofyear({{ date }})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6423805,
      "supported_languages": null
    },
    "macro.dbt_date.trino__day_of_year": {
      "name": "trino__day_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_year.sql",
      "original_file_path": "macros/calendar_date/day_of_year.sql",
      "unique_id": "macro.dbt_date.trino__day_of_year",
      "macro_sql": "\n\n{%- macro trino__day_of_year(date) -%}\n    {{ dbt_date.date_part('day_of_year', date) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6425927,
      "supported_languages": null
    },
    "macro.dbt_date.next_week": {
      "name": "next_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/next_week.sql",
      "original_file_path": "macros/calendar_date/next_week.sql",
      "unique_id": "macro.dbt_date.next_week",
      "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt_date.n_weeks_away"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6428711,
      "supported_languages": null
    },
    "macro.dbt_date.month_name": {
      "name": "month_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/month_name.sql",
      "original_file_path": "macros/calendar_date/month_name.sql",
      "unique_id": "macro.dbt_date.month_name",
      "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.duckdb__month_name"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6437416,
      "supported_languages": null
    },
    "macro.dbt_date.default__month_name": {
      "name": "default__month_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/month_name.sql",
      "original_file_path": "macros/calendar_date/month_name.sql",
      "unique_id": "macro.dbt_date.default__month_name",
      "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6440628,
      "supported_languages": null
    },
    "macro.dbt_date.bigquery__month_name": {
      "name": "bigquery__month_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/month_name.sql",
      "original_file_path": "macros/calendar_date/month_name.sql",
      "unique_id": "macro.dbt_date.bigquery__month_name",
      "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6443732,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__month_name": {
      "name": "snowflake__month_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/month_name.sql",
      "original_file_path": "macros/calendar_date/month_name.sql",
      "unique_id": "macro.dbt_date.snowflake__month_name",
      "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6446688,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__month_name": {
      "name": "postgres__month_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/month_name.sql",
      "original_file_path": "macros/calendar_date/month_name.sql",
      "unique_id": "macro.dbt_date.postgres__month_name",
      "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.645021,
      "supported_languages": null
    },
    "macro.dbt_date.duckdb__month_name": {
      "name": "duckdb__month_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/month_name.sql",
      "original_file_path": "macros/calendar_date/month_name.sql",
      "unique_id": "macro.dbt_date.duckdb__month_name",
      "macro_sql": "\n\n\n{%- macro duckdb__month_name(date, short) -%}\n    {%- if short -%}\n    substr(monthname({{ date }}), 1, 3)\n    {%- else -%}\n    monthname({{ date }})\n    {%- endif -%}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6453152,
      "supported_languages": null
    },
    "macro.dbt_date.spark__month_name": {
      "name": "spark__month_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/month_name.sql",
      "original_file_path": "macros/calendar_date/month_name.sql",
      "unique_id": "macro.dbt_date.spark__month_name",
      "macro_sql": "\n\n{%- macro spark__month_name(date, short) -%}\n{%- set f = 'LLL' if short else 'LLLL' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6456578,
      "supported_languages": null
    },
    "macro.dbt_date.trino__month_name": {
      "name": "trino__month_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/month_name.sql",
      "original_file_path": "macros/calendar_date/month_name.sql",
      "unique_id": "macro.dbt_date.trino__month_name",
      "macro_sql": "\n\n{%- macro trino__month_name(date, short) -%}\n{%- set f = 'b' if short else 'M' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6459653,
      "supported_languages": null
    },
    "macro.dbt_date.n_weeks_ago": {
      "name": "n_weeks_ago",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/n_weeks_ago.sql",
      "original_file_path": "macros/calendar_date/n_weeks_ago.sql",
      "unique_id": "macro.dbt_date.n_weeks_ago",
      "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.date_trunc",
          "macro.dbt.dateadd",
          "macro.dbt_date.today"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.646588,
      "supported_languages": null
    },
    "macro.dbt_date.convert_timezone": {
      "name": "convert_timezone",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "unique_id": "macro.dbt_date.convert_timezone",
      "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_date.duckdb__convert_timezone"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.64819,
      "supported_languages": null
    },
    "macro.dbt_date.default__convert_timezone": {
      "name": "default__convert_timezone",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "unique_id": "macro.dbt_date.default__convert_timezone",
      "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt.type_timestamp"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6486208,
      "supported_languages": null
    },
    "macro.dbt_date.bigquery__convert_timezone": {
      "name": "bigquery__convert_timezone",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "unique_id": "macro.dbt_date.bigquery__convert_timezone",
      "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6488576,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__convert_timezone": {
      "name": "postgres__convert_timezone",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "unique_id": "macro.dbt_date.postgres__convert_timezone",
      "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt.type_timestamp"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.649242,
      "supported_languages": null
    },
    "macro.dbt_date.redshift__convert_timezone": {
      "name": "redshift__convert_timezone",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "unique_id": "macro.dbt_date.redshift__convert_timezone",
      "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_date.default__convert_timezone"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6495266,
      "supported_languages": null
    },
    "macro.dbt_date.duckdb__convert_timezone": {
      "name": "duckdb__convert_timezone",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "unique_id": "macro.dbt_date.duckdb__convert_timezone",
      "macro_sql": "{% macro duckdb__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.postgres__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_date.postgres__convert_timezone"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.649801,
      "supported_languages": null
    },
    "macro.dbt_date.spark__convert_timezone": {
      "name": "spark__convert_timezone",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "unique_id": "macro.dbt_date.spark__convert_timezone",
      "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.650044,
      "supported_languages": null
    },
    "macro.dbt_date.trino__convert_timezone": {
      "name": "trino__convert_timezone",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "unique_id": "macro.dbt_date.trino__convert_timezone",
      "macro_sql": "{%- macro trino__convert_timezone(column, target_tz, source_tz) -%}\n    cast((at_timezone(with_timezone(cast({{ column }} as {{ dbt.type_timestamp() }}), '{{ source_tz }}'), '{{ target_tz }}')) as {{ dbt.type_timestamp() }})\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt.type_timestamp"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.650394,
      "supported_languages": null
    },
    "macro.dbt_date.week_start": {
      "name": "week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_start.sql",
      "original_file_path": "macros/calendar_date/week_start.sql",
      "unique_id": "macro.dbt_date.week_start",
      "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_date.today", "macro.dbt_date.duckdb__week_start"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.651125,
      "supported_languages": null
    },
    "macro.dbt_date.default__week_start": {
      "name": "default__week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_start.sql",
      "original_file_path": "macros/calendar_date/week_start.sql",
      "unique_id": "macro.dbt_date.default__week_start",
      "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.date_trunc"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6513574,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__week_start": {
      "name": "snowflake__week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_start.sql",
      "original_file_path": "macros/calendar_date/week_start.sql",
      "unique_id": "macro.dbt_date.snowflake__week_start",
      "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6518512,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__week_start": {
      "name": "postgres__week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_start.sql",
      "original_file_path": "macros/calendar_date/week_start.sql",
      "unique_id": "macro.dbt_date.postgres__week_start",
      "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.652329,
      "supported_languages": null
    },
    "macro.dbt_date.duckdb__week_start": {
      "name": "duckdb__week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_start.sql",
      "original_file_path": "macros/calendar_date/week_start.sql",
      "unique_id": "macro.dbt_date.duckdb__week_start",
      "macro_sql": "\n\n{%- macro duckdb__week_start(date) -%}\n{{ return(dbt_date.postgres__week_start(date)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.postgres__week_start"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.652651,
      "supported_languages": null
    },
    "macro.dbt_date.last_week": {
      "name": "last_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/last_week.sql",
      "original_file_path": "macros/calendar_date/last_week.sql",
      "unique_id": "macro.dbt_date.last_week",
      "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt_date.n_weeks_ago"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6530573,
      "supported_languages": null
    },
    "macro.dbt_date.next_month_name": {
      "name": "next_month_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/next_month_name.sql",
      "original_file_path": "macros/calendar_date/next_month_name.sql",
      "unique_id": "macro.dbt_date.next_month_name",
      "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6534498,
      "supported_languages": null
    },
    "macro.dbt_date.last_month_number": {
      "name": "last_month_number",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/last_month_number.sql",
      "original_file_path": "macros/calendar_date/last_month_number.sql",
      "unique_id": "macro.dbt_date.last_month_number",
      "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6537983,
      "supported_languages": null
    },
    "macro.dbt_date.now": {
      "name": "now",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/now.sql",
      "original_file_path": "macros/calendar_date/now.sql",
      "unique_id": "macro.dbt_date.now",
      "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.convert_timezone",
          "macro.dbt.current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6540995,
      "supported_languages": null
    },
    "macro.dbt_date.today": {
      "name": "today",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/today.sql",
      "original_file_path": "macros/calendar_date/today.sql",
      "unique_id": "macro.dbt_date.today",
      "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt_date.now"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6544058,
      "supported_languages": null
    },
    "macro.dbt_date.day_name": {
      "name": "day_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_name.sql",
      "original_file_path": "macros/calendar_date/day_name.sql",
      "unique_id": "macro.dbt_date.day_name",
      "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.duckdb__day_name"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.655396,
      "supported_languages": null
    },
    "macro.dbt_date.default__day_name": {
      "name": "default__day_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_name.sql",
      "original_file_path": "macros/calendar_date/day_name.sql",
      "unique_id": "macro.dbt_date.default__day_name",
      "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6556993,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__day_name": {
      "name": "snowflake__day_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_name.sql",
      "original_file_path": "macros/calendar_date/day_name.sql",
      "unique_id": "macro.dbt_date.snowflake__day_name",
      "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.65607,
      "supported_languages": null
    },
    "macro.dbt_date.bigquery__day_name": {
      "name": "bigquery__day_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_name.sql",
      "original_file_path": "macros/calendar_date/day_name.sql",
      "unique_id": "macro.dbt_date.bigquery__day_name",
      "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6565127,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__day_name": {
      "name": "postgres__day_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_name.sql",
      "original_file_path": "macros/calendar_date/day_name.sql",
      "unique_id": "macro.dbt_date.postgres__day_name",
      "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6568248,
      "supported_languages": null
    },
    "macro.dbt_date.duckdb__day_name": {
      "name": "duckdb__day_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_name.sql",
      "original_file_path": "macros/calendar_date/day_name.sql",
      "unique_id": "macro.dbt_date.duckdb__day_name",
      "macro_sql": "\n\n{%- macro duckdb__day_name(date, short) -%}\n    {%- if short -%}\n    substr(dayname({{ date }}), 1, 3)\n    {%- else -%}\n    dayname({{ date }})\n    {%- endif -%}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6571267,
      "supported_languages": null
    },
    "macro.dbt_date.spark__day_name": {
      "name": "spark__day_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_name.sql",
      "original_file_path": "macros/calendar_date/day_name.sql",
      "unique_id": "macro.dbt_date.spark__day_name",
      "macro_sql": "\n\n{%- macro spark__day_name(date, short) -%}\n{%- set f = 'E' if short else 'EEEE' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6575196,
      "supported_languages": null
    },
    "macro.dbt_date.trino__day_name": {
      "name": "trino__day_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_name.sql",
      "original_file_path": "macros/calendar_date/day_name.sql",
      "unique_id": "macro.dbt_date.trino__day_name",
      "macro_sql": "\n\n{%- macro trino__day_name(date, short) -%}\n{%- set f = 'a' if short else 'W' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6578743,
      "supported_languages": null
    },
    "macro.dbt_date.date_part": {
      "name": "date_part",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/date_part.sql",
      "original_file_path": "macros/calendar_date/date_part.sql",
      "unique_id": "macro.dbt_date.date_part",
      "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.default__date_part"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6583927,
      "supported_languages": null
    },
    "macro.dbt_date.default__date_part": {
      "name": "default__date_part",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/date_part.sql",
      "original_file_path": "macros/calendar_date/date_part.sql",
      "unique_id": "macro.dbt_date.default__date_part",
      "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.658595,
      "supported_languages": null
    },
    "macro.dbt_date.bigquery__date_part": {
      "name": "bigquery__date_part",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/date_part.sql",
      "original_file_path": "macros/calendar_date/date_part.sql",
      "unique_id": "macro.dbt_date.bigquery__date_part",
      "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.658794,
      "supported_languages": null
    },
    "macro.dbt_date.trino__date_part": {
      "name": "trino__date_part",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/date_part.sql",
      "original_file_path": "macros/calendar_date/date_part.sql",
      "unique_id": "macro.dbt_date.trino__date_part",
      "macro_sql": "{% macro trino__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6589913,
      "supported_languages": null
    },
    "macro.dbt_date.last_month": {
      "name": "last_month",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/last_month.sql",
      "original_file_path": "macros/calendar_date/last_month.sql",
      "unique_id": "macro.dbt_date.last_month",
      "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt_date.n_months_ago"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6593401,
      "supported_languages": null
    },
    "macro.dbt_date.tomorrow": {
      "name": "tomorrow",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/tomorrow.sql",
      "original_file_path": "macros/calendar_date/tomorrow.sql",
      "unique_id": "macro.dbt_date.tomorrow",
      "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt_date.n_days_away"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6596854,
      "supported_languages": null
    },
    "macro.dbt_date.iso_week_start": {
      "name": "iso_week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_start.sql",
      "original_file_path": "macros/calendar_date/iso_week_start.sql",
      "unique_id": "macro.dbt_date.iso_week_start",
      "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_date.today",
          "macro.dbt_date.duckdb__iso_week_start"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6605382,
      "supported_languages": null
    },
    "macro.dbt_date._iso_week_start": {
      "name": "_iso_week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_start.sql",
      "original_file_path": "macros/calendar_date/iso_week_start.sql",
      "unique_id": "macro.dbt_date._iso_week_start",
      "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.date_trunc"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.660775,
      "supported_languages": null
    },
    "macro.dbt_date.default__iso_week_start": {
      "name": "default__iso_week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_start.sql",
      "original_file_path": "macros/calendar_date/iso_week_start.sql",
      "unique_id": "macro.dbt_date.default__iso_week_start",
      "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date._iso_week_start"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6609864,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__iso_week_start": {
      "name": "snowflake__iso_week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_start.sql",
      "original_file_path": "macros/calendar_date/iso_week_start.sql",
      "unique_id": "macro.dbt_date.snowflake__iso_week_start",
      "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date._iso_week_start"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6612356,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__iso_week_start": {
      "name": "postgres__iso_week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_start.sql",
      "original_file_path": "macros/calendar_date/iso_week_start.sql",
      "unique_id": "macro.dbt_date.postgres__iso_week_start",
      "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date._iso_week_start"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6614513,
      "supported_languages": null
    },
    "macro.dbt_date.duckdb__iso_week_start": {
      "name": "duckdb__iso_week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_start.sql",
      "original_file_path": "macros/calendar_date/iso_week_start.sql",
      "unique_id": "macro.dbt_date.duckdb__iso_week_start",
      "macro_sql": "\n\n{%- macro duckdb__iso_week_start(date) -%}\n{{ return(dbt_date.postgres__iso_week_start(date)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.postgres__iso_week_start"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6616724,
      "supported_languages": null
    },
    "macro.dbt_date.spark__iso_week_start": {
      "name": "spark__iso_week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_start.sql",
      "original_file_path": "macros/calendar_date/iso_week_start.sql",
      "unique_id": "macro.dbt_date.spark__iso_week_start",
      "macro_sql": "\n\n{%- macro spark__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date._iso_week_start"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6618834,
      "supported_languages": null
    },
    "macro.dbt_date.trino__iso_week_start": {
      "name": "trino__iso_week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_start.sql",
      "original_file_path": "macros/calendar_date/iso_week_start.sql",
      "unique_id": "macro.dbt_date.trino__iso_week_start",
      "macro_sql": "\n\n{%- macro trino__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date._iso_week_start"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.662092,
      "supported_languages": null
    },
    "macro.dbt_date.periods_since": {
      "name": "periods_since",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/periods_since.sql",
      "original_file_path": "macros/calendar_date/periods_since.sql",
      "unique_id": "macro.dbt_date.periods_since",
      "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt.datediff", "macro.dbt_date.now"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6625016,
      "supported_languages": null
    },
    "macro.dbt_date.n_days_away": {
      "name": "n_days_away",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/n_days_away.sql",
      "original_file_path": "macros/calendar_date/n_days_away.sql",
      "unique_id": "macro.dbt_date.n_days_away",
      "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt_date.n_days_ago"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6628988,
      "supported_languages": null
    },
    "macro.dbt_date.day_of_week": {
      "name": "day_of_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "unique_id": "macro.dbt_date.day_of_week",
      "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.duckdb__day_of_week"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6658263,
      "supported_languages": null
    },
    "macro.dbt_date.default__day_of_week": {
      "name": "default__day_of_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "unique_id": "macro.dbt_date.default__day_of_week",
      "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6662717,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__day_of_week": {
      "name": "snowflake__day_of_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "unique_id": "macro.dbt_date.snowflake__day_of_week",
      "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6669052,
      "supported_languages": null
    },
    "macro.dbt_date.bigquery__day_of_week": {
      "name": "bigquery__day_of_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "unique_id": "macro.dbt_date.bigquery__day_of_week",
      "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.667337,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__day_of_week": {
      "name": "postgres__day_of_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "unique_id": "macro.dbt_date.postgres__day_of_week",
      "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6680436,
      "supported_languages": null
    },
    "macro.dbt_date.redshift__day_of_week": {
      "name": "redshift__day_of_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "unique_id": "macro.dbt_date.redshift__day_of_week",
      "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6686776,
      "supported_languages": null
    },
    "macro.dbt_date.duckdb__day_of_week": {
      "name": "duckdb__day_of_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "unique_id": "macro.dbt_date.duckdb__day_of_week",
      "macro_sql": "\n\n{%- macro duckdb__day_of_week(date, isoweek) -%}\n{{ return(dbt_date.postgres__day_of_week(date, isoweek)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.postgres__day_of_week"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6690116,
      "supported_languages": null
    },
    "macro.dbt_date.spark__day_of_week": {
      "name": "spark__day_of_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "unique_id": "macro.dbt_date.spark__day_of_week",
      "macro_sql": "\n\n\n{%- macro spark__day_of_week(date, isoweek) -%}\n\n    {%- set dow = \"dayofweek_iso\" if isoweek else \"dayofweek\" -%}\n\n    {{ dbt_date.date_part(dow, date) }}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6693716,
      "supported_languages": null
    },
    "macro.dbt_date.trino__day_of_week": {
      "name": "trino__day_of_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "unique_id": "macro.dbt_date.trino__day_of_week",
      "macro_sql": "\n\n\n{%- macro trino__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('day_of_week', date) -%}\n\n    {%- if isoweek -%}\n        {{ dow }}\n    {%- else -%}\n        case\n            when {{ dow }} = 7 then 1\n            else {{ dow }} + 1\n        end\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.669869,
      "supported_languages": null
    },
    "macro.dbt_date.next_month_number": {
      "name": "next_month_number",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/next_month_number.sql",
      "original_file_path": "macros/calendar_date/next_month_number.sql",
      "unique_id": "macro.dbt_date.next_month_number",
      "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6703598,
      "supported_languages": null
    },
    "macro.dbt_date.from_unixtimestamp": {
      "name": "from_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/from_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.from_unixtimestamp",
      "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.default__from_unixtimestamp"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.672868,
      "supported_languages": null
    },
    "macro.dbt_date.default__from_unixtimestamp": {
      "name": "default__from_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/from_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.default__from_unixtimestamp",
      "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6732945,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__from_unixtimestamp": {
      "name": "postgres__from_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/from_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.postgres__from_unixtimestamp",
      "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6737351,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__from_unixtimestamp": {
      "name": "snowflake__from_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/from_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp",
      "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6744602,
      "supported_languages": null
    },
    "macro.dbt_date.bigquery__from_unixtimestamp": {
      "name": "bigquery__from_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/from_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp",
      "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6750882,
      "supported_languages": null
    },
    "macro.dbt_date.trino__from_unixtimestamp": {
      "name": "trino__from_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/from_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.trino__from_unixtimestamp",
      "macro_sql": "\n\n{%- macro trino__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        cast(from_unixtime({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"milliseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 6)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"microseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 3)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"nanoseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.type_timestamp"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6761453,
      "supported_languages": null
    },
    "macro.dbt_date.n_days_ago": {
      "name": "n_days_ago",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/n_days_ago.sql",
      "original_file_path": "macros/calendar_date/n_days_ago.sql",
      "unique_id": "macro.dbt_date.n_days_ago",
      "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6769214,
      "supported_languages": null
    },
    "macro.dbt_date.yesterday": {
      "name": "yesterday",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/yesterday.sql",
      "original_file_path": "macros/calendar_date/yesterday.sql",
      "unique_id": "macro.dbt_date.yesterday",
      "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt_date.n_days_ago"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.677261,
      "supported_languages": null
    },
    "macro.dbt_date.n_months_ago": {
      "name": "n_months_ago",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/n_months_ago.sql",
      "original_file_path": "macros/calendar_date/n_months_ago.sql",
      "unique_id": "macro.dbt_date.n_months_ago",
      "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.date_trunc",
          "macro.dbt.dateadd",
          "macro.dbt_date.today"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6778407,
      "supported_languages": null
    },
    "macro.dbt_date.n_months_away": {
      "name": "n_months_away",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/n_months_away.sql",
      "original_file_path": "macros/calendar_date/n_months_away.sql",
      "unique_id": "macro.dbt_date.n_months_away",
      "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.date_trunc",
          "macro.dbt.dateadd",
          "macro.dbt_date.today"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6783557,
      "supported_languages": null
    },
    "macro.dbt_date.last_month_name": {
      "name": "last_month_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/last_month_name.sql",
      "original_file_path": "macros/calendar_date/last_month_name.sql",
      "unique_id": "macro.dbt_date.last_month_name",
      "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6787455,
      "supported_languages": null
    },
    "macro.dbt_date.to_unixtimestamp": {
      "name": "to_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/to_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.to_unixtimestamp",
      "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.default__to_unixtimestamp"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6792743,
      "supported_languages": null
    },
    "macro.dbt_date.default__to_unixtimestamp": {
      "name": "default__to_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/to_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.default__to_unixtimestamp",
      "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6794868,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__to_unixtimestamp": {
      "name": "snowflake__to_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/to_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp",
      "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6796944,
      "supported_languages": null
    },
    "macro.dbt_date.bigquery__to_unixtimestamp": {
      "name": "bigquery__to_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/to_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp",
      "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6798546,
      "supported_languages": null
    },
    "macro.dbt_date.spark__to_unixtimestamp": {
      "name": "spark__to_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/to_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.spark__to_unixtimestamp",
      "macro_sql": "\n\n{%- macro spark__to_unixtimestamp(timestamp) -%}\n    unix_timestamp({{ timestamp }})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6800137,
      "supported_languages": null
    },
    "macro.dbt_date.trino__to_unixtimestamp": {
      "name": "trino__to_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/to_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.trino__to_unixtimestamp",
      "macro_sql": "\n\n{%- macro trino__to_unixtimestamp(timestamp) -%}\n    to_unixtime({{ timestamp }} AT TIME ZONE 'UTC')\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6801682,
      "supported_languages": null
    },
    "macro.dbt_date.week_of_year": {
      "name": "week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_of_year.sql",
      "original_file_path": "macros/calendar_date/week_of_year.sql",
      "unique_id": "macro.dbt_date.week_of_year",
      "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_date.today",
          "macro.dbt_date.duckdb__week_of_year"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6808453,
      "supported_languages": null
    },
    "macro.dbt_date.default__week_of_year": {
      "name": "default__week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_of_year.sql",
      "original_file_path": "macros/calendar_date/week_of_year.sql",
      "unique_id": "macro.dbt_date.default__week_of_year",
      "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.681122,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__week_of_year": {
      "name": "postgres__week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_of_year.sql",
      "original_file_path": "macros/calendar_date/week_of_year.sql",
      "unique_id": "macro.dbt_date.postgres__week_of_year",
      "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.type_int"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6813743,
      "supported_languages": null
    },
    "macro.dbt_date.duckdb__week_of_year": {
      "name": "duckdb__week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_of_year.sql",
      "original_file_path": "macros/calendar_date/week_of_year.sql",
      "unique_id": "macro.dbt_date.duckdb__week_of_year",
      "macro_sql": "\n\n{%- macro duckdb__week_of_year(date) -%}\ncast(ceil(dayofyear({{ date }}) / 7) as int)\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6815426,
      "supported_languages": null
    },
    "macro.dbt_date.next_month": {
      "name": "next_month",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/next_month.sql",
      "original_file_path": "macros/calendar_date/next_month.sql",
      "unique_id": "macro.dbt_date.next_month",
      "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt_date.n_months_away"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.681812,
      "supported_languages": null
    },
    "macro.dbt_date.n_weeks_away": {
      "name": "n_weeks_away",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/n_weeks_away.sql",
      "original_file_path": "macros/calendar_date/n_weeks_away.sql",
      "unique_id": "macro.dbt_date.n_weeks_away",
      "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.date_trunc",
          "macro.dbt.dateadd",
          "macro.dbt_date.today"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6823452,
      "supported_languages": null
    },
    "macro.dbt_date.get_fiscal_periods": {
      "name": "get_fiscal_periods",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/fiscal_date/get_fiscal_periods.sql",
      "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql",
      "unique_id": "macro.dbt_date.get_fiscal_periods",
      "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6833506,
      "supported_languages": null
    },
    "macro.dbt_date.get_fiscal_year_dates": {
      "name": "get_fiscal_year_dates",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/fiscal_date/get_fiscal_year_dates.sql",
      "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql",
      "unique_id": "macro.dbt_date.get_fiscal_year_dates",
      "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.default__get_fiscal_year_dates"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6851087,
      "supported_languages": null
    },
    "macro.dbt_date.default__get_fiscal_year_dates": {
      "name": "default__get_fiscal_year_dates",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/fiscal_date/get_fiscal_year_dates.sql",
      "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql",
      "unique_id": "macro.dbt_date.default__get_fiscal_year_dates",
      "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith fsc_date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        fsc_date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6859965,
      "supported_languages": null
    },
    "macro.dbt_date.get_powers_of_two": {
      "name": "get_powers_of_two",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/_utils/generate_series.sql",
      "original_file_path": "macros/_utils/generate_series.sql",
      "unique_id": "macro.dbt_date.get_powers_of_two",
      "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.default__get_powers_of_two"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6870835,
      "supported_languages": null
    },
    "macro.dbt_date.default__get_powers_of_two": {
      "name": "default__get_powers_of_two",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/_utils/generate_series.sql",
      "original_file_path": "macros/_utils/generate_series.sql",
      "unique_id": "macro.dbt_date.default__get_powers_of_two",
      "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6878717,
      "supported_languages": null
    },
    "macro.dbt_date.generate_series": {
      "name": "generate_series",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/_utils/generate_series.sql",
      "original_file_path": "macros/_utils/generate_series.sql",
      "unique_id": "macro.dbt_date.generate_series",
      "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.default__generate_series"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6881993,
      "supported_languages": null
    },
    "macro.dbt_date.default__generate_series": {
      "name": "default__generate_series",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/_utils/generate_series.sql",
      "original_file_path": "macros/_utils/generate_series.sql",
      "unique_id": "macro.dbt_date.default__generate_series",
      "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.get_powers_of_two"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6891308,
      "supported_languages": null
    },
    "macro.dbt_date.date": {
      "name": "date",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/_utils/modules_datetime.sql",
      "original_file_path": "macros/_utils/modules_datetime.sql",
      "unique_id": "macro.dbt_date.date",
      "macro_sql": "{% macro date(year, month, day) %}\n    {{ return(modules.datetime.date(year, month, day)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.689736,
      "supported_languages": null
    },
    "macro.dbt_date.datetime": {
      "name": "datetime",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/_utils/modules_datetime.sql",
      "original_file_path": "macros/_utils/modules_datetime.sql",
      "unique_id": "macro.dbt_date.datetime",
      "macro_sql": "{% macro datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tz=None) %}\n    {% set tz = tz if tz else var(\"dbt_date:time_zone\") %}\n    {{ return(\n        modules.datetime.datetime(\n            year=year, month=month, day=day, hour=hour,\n            minute=minute, second=second, microsecond=microsecond,\n            tzinfo=modules.pytz.timezone(tz)\n        )\n    ) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6906106,
      "supported_languages": null
    },
    "macro.dbt_date.get_intervals_between": {
      "name": "get_intervals_between",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/_utils/date_spine.sql",
      "original_file_path": "macros/_utils/date_spine.sql",
      "unique_id": "macro.dbt_date.get_intervals_between",
      "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.default__get_intervals_between"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6915917,
      "supported_languages": null
    },
    "macro.dbt_date.default__get_intervals_between": {
      "name": "default__get_intervals_between",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/_utils/date_spine.sql",
      "original_file_path": "macros/_utils/date_spine.sql",
      "unique_id": "macro.dbt_date.default__get_intervals_between",
      "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt.statement", "macro.dbt.datediff"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6925313,
      "supported_languages": null
    },
    "macro.dbt_date.date_spine": {
      "name": "date_spine",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/_utils/date_spine.sql",
      "original_file_path": "macros/_utils/date_spine.sql",
      "unique_id": "macro.dbt_date.date_spine",
      "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_date.default__date_spine"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6929178,
      "supported_languages": null
    },
    "macro.dbt_date.default__date_spine": {
      "name": "default__date_spine",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/_utils/date_spine.sql",
      "original_file_path": "macros/_utils/date_spine.sql",
      "unique_id": "macro.dbt_date.default__date_spine",
      "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"(row_number() over (order by 1) - 1)\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.generate_series",
          "macro.dbt_date.get_intervals_between",
          "macro.dbt.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6934605,
      "supported_languages": null
    },
    "macro.dbt_expectations.type_timestamp": {
      "name": "type_timestamp",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "unique_id": "macro.dbt_expectations.type_timestamp",
      "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_expectations.default__type_timestamp"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6940901,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__type_timestamp": {
      "name": "default__type_timestamp",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "unique_id": "macro.dbt_expectations.default__type_timestamp",
      "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6942463,
      "supported_languages": null
    },
    "macro.dbt_expectations.snowflake__type_timestamp": {
      "name": "snowflake__type_timestamp",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "unique_id": "macro.dbt_expectations.snowflake__type_timestamp",
      "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6943686,
      "supported_languages": null
    },
    "macro.dbt_expectations.postgres__type_timestamp": {
      "name": "postgres__type_timestamp",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "unique_id": "macro.dbt_expectations.postgres__type_timestamp",
      "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6944852,
      "supported_languages": null
    },
    "macro.dbt_expectations.type_datetime": {
      "name": "type_datetime",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "unique_id": "macro.dbt_expectations.type_datetime",
      "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.duckdb__type_datetime"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6947303,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__type_datetime": {
      "name": "default__type_datetime",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "unique_id": "macro.dbt_expectations.default__type_datetime",
      "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6948469,
      "supported_languages": null
    },
    "macro.dbt_expectations.snowflake__type_datetime": {
      "name": "snowflake__type_datetime",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "unique_id": "macro.dbt_expectations.snowflake__type_datetime",
      "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6949792,
      "supported_languages": null
    },
    "macro.dbt_expectations.postgres__type_datetime": {
      "name": "postgres__type_datetime",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "unique_id": "macro.dbt_expectations.postgres__type_datetime",
      "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6950943,
      "supported_languages": null
    },
    "macro.dbt_expectations.duckdb__type_datetime": {
      "name": "duckdb__type_datetime",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "unique_id": "macro.dbt_expectations.duckdb__type_datetime",
      "macro_sql": "{% macro duckdb__type_datetime() -%}\n    timestamp\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6953235,
      "supported_languages": null
    },
    "macro.dbt_expectations.spark__type_datetime": {
      "name": "spark__type_datetime",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/utils/datatypes.sql",
      "original_file_path": "macros/utils/datatypes.sql",
      "unique_id": "macro.dbt_expectations.spark__type_datetime",
      "macro_sql": "{% macro spark__type_datetime() -%}\n    timestamp\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6954389,
      "supported_languages": null
    },
    "macro.dbt_expectations.group_by": {
      "name": "group_by",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/utils/groupby.sql",
      "original_file_path": "macros/utils/groupby.sql",
      "unique_id": "macro.dbt_expectations.group_by",
      "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.default__group_by"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.69585,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__group_by": {
      "name": "default__group_by",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/utils/groupby.sql",
      "original_file_path": "macros/utils/groupby.sql",
      "unique_id": "macro.dbt_expectations.default__group_by",
      "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.696272,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expression_is_true": {
      "name": "test_expression_is_true",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/_generalized/expression_is_true.sql",
      "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql",
      "unique_id": "macro.dbt_expectations.test_expression_is_true",
      "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_is_true"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6973298,
      "supported_languages": null
    },
    "macro.dbt_expectations.expression_is_true": {
      "name": "expression_is_true",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/_generalized/expression_is_true.sql",
      "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql",
      "unique_id": "macro.dbt_expectations.expression_is_true",
      "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.default__expression_is_true"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6978314,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__expression_is_true": {
      "name": "default__expression_is_true",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/_generalized/expression_is_true.sql",
      "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql",
      "unique_id": "macro.dbt_expectations.default__expression_is_true",
      "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.truth_expression"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.698793,
      "supported_languages": null
    },
    "macro.dbt_expectations.truth_expression": {
      "name": "truth_expression",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/_generalized/_truth_expression.sql",
      "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql",
      "unique_id": "macro.dbt_expectations.truth_expression",
      "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.default__truth_expression"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6991432,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__truth_expression": {
      "name": "default__truth_expression",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/_generalized/_truth_expression.sql",
      "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql",
      "unique_id": "macro.dbt_expectations.default__truth_expression",
      "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.6993015,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expression_between": {
      "name": "test_expression_between",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/_generalized/expression_between.sql",
      "original_file_path": "macros/schema_tests/_generalized/expression_between.sql",
      "unique_id": "macro.dbt_expectations.test_expression_between",
      "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_between"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7005556,
      "supported_languages": null
    },
    "macro.dbt_expectations.expression_between": {
      "name": "expression_between",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/_generalized/expression_between.sql",
      "original_file_path": "macros/schema_tests/_generalized/expression_between.sql",
      "unique_id": "macro.dbt_expectations.expression_between",
      "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_is_true"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7016885,
      "supported_languages": null
    },
    "macro.dbt_expectations.get_select": {
      "name": "get_select",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/_generalized/equal_expression.sql",
      "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql",
      "unique_id": "macro.dbt_expectations.get_select",
      "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.default__get_select"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7066824,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__get_select": {
      "name": "default__get_select",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/_generalized/equal_expression.sql",
      "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql",
      "unique_id": "macro.dbt_expectations.default__get_select",
      "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7076185,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_equal_expression": {
      "name": "test_equal_expression",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/_generalized/equal_expression.sql",
      "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql",
      "unique_id": "macro.dbt_expectations.test_equal_expression",
      "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.default__test_equal_expression"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.708383,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__test_equal_expression": {
      "name": "default__test_equal_expression",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/_generalized/equal_expression.sql",
      "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql",
      "unique_id": "macro.dbt_expectations.default__test_equal_expression",
      "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.get_select"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7103994,
      "supported_languages": null
    },
    "macro.dbt_expectations.ignore_row_if_expression": {
      "name": "ignore_row_if_expression",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql",
      "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql",
      "unique_id": "macro.dbt_expectations.ignore_row_if_expression",
      "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.711029,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__ignore_row_if_expression": {
      "name": "default__ignore_row_if_expression",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql",
      "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql",
      "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression",
      "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.712086,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {
      "name": "test_expect_column_value_lengths_to_be_between",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between",
      "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt.length",
          "macro.dbt_expectations.expression_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7130628,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {
      "name": "test_expect_column_values_to_not_match_regex_list",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list",
      "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.regexp_instr",
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.714433,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {
      "name": "test_expect_column_values_to_not_match_like_pattern",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern",
      "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations._get_like_pattern_expression",
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7151265,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {
      "name": "test_expect_column_values_to_not_match_regex",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex",
      "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.regexp_instr",
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7160501,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {
      "name": "test_expect_column_values_to_match_like_pattern_list",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list",
      "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations._get_like_pattern_expression",
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7173173,
      "supported_languages": null
    },
    "macro.dbt_expectations._get_like_pattern_expression": {
      "name": "_get_like_pattern_expression",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql",
      "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql",
      "unique_id": "macro.dbt_expectations._get_like_pattern_expression",
      "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7177145,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {
      "name": "test_expect_column_values_to_match_like_pattern",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern",
      "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations._get_like_pattern_expression",
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7183738,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_match_regex": {
      "name": "test_expect_column_values_to_match_regex",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex",
      "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.regexp_instr",
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7192714,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {
      "name": "test_expect_column_values_to_match_regex_list",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list",
      "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.regexp_instr",
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7207668,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {
      "name": "test_expect_column_values_to_not_match_like_pattern_list",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list",
      "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations._get_like_pattern_expression",
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7220798,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {
      "name": "test_expect_column_value_lengths_to_equal",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql",
      "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal",
      "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt.length",
          "macro.dbt_expectations.expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7227771,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {
      "name": "test_expect_column_values_to_not_be_null",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null",
      "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_is_true"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7233398,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_unique": {
      "name": "test_expect_column_values_to_be_unique",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique",
      "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.test_expect_compound_columns_to_be_unique"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7236896,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_null": {
      "name": "test_expect_column_values_to_be_null",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null",
      "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_is_true"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7243192,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {
      "name": "test_expect_column_values_to_be_in_set",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set",
      "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt.type_string"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7256062,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {
      "name": "test_expect_column_values_to_be_increasing",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing",
      "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7275124,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {
      "name": "test_expect_column_values_to_be_of_type",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type",
      "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.727856,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {
      "name": "test_expect_column_values_to_have_consistent_casing",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing",
      "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7283857,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {
      "name": "test_expect_column_values_to_be_in_type_list",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list",
      "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}",
      "depends_on": {
        "macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7298653,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_between": {
      "name": "test_expect_column_values_to_be_between",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between",
      "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_between"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7307932,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {
      "name": "test_expect_column_values_to_be_decreasing",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing",
      "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.732285,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {
      "name": "test_expect_column_values_to_not_be_in_set",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql",
      "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set",
      "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt.type_string"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7334695,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {
      "name": "test_expect_select_column_values_to_be_unique_within_record",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql",
      "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql",
      "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record",
      "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7351718,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {
      "name": "default__test_expect_select_column_values_to_be_unique_within_record",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql",
      "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql",
      "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record",
      "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.ignore_row_if_expression"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7369163,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {
      "name": "test_expect_column_pair_values_A_to_be_greater_than_B",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql",
      "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B",
      "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_is_true"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7378955,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {
      "name": "test_expect_compound_columns_to_be_unique",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql",
      "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql",
      "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique",
      "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }},\n        {%- endfor %}\n        count(*) as {{adapter.quote(\"n_records\")}}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.ignore_row_if_expression"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7406085,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {
      "name": "test_expect_multicolumn_sum_to_equal",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql",
      "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql",
      "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal",
      "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_is_true"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7417772,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {
      "name": "test_expect_column_pair_values_to_be_equal",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql",
      "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal",
      "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_is_true"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7425523,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {
      "name": "test_expect_column_pair_values_to_be_in_set",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql",
      "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set",
      "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_is_true"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.744287,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {
      "name": "test_expect_column_values_to_be_within_n_stdevs",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql",
      "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs",
      "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7453265,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {
      "name": "default__test_expect_column_values_to_be_within_n_stdevs",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql",
      "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql",
      "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs",
      "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.group_by"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7462013,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {
      "name": "test_expect_row_values_to_have_data_for_every_n_datepart",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql",
      "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql",
      "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart",
      "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min(cast({{ date_col }} as date)) as start_{{ date_part }},\n            max(cast({{ date_col }} as date)) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n\n    {%- set db_start_date = dr.columns[0].values()[0] -%}\n    {%- set db_end_date = dr.columns[1].values()[0] -%}\n\n    {% if db_start_date is not string %}\n        {%- set db_start_date = db_start_date.strftime('%Y-%m-%d') -%}\n        {%- set db_end_date = db_end_date.strftime('%Y-%m-%d') -%}\n    {% endif %}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\n\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt_date.get_base_dates",
          "macro.dbt.datediff",
          "macro.dbt.type_int",
          "macro.dbt.date_trunc",
          "macro.dbt_expectations.type_datetime",
          "macro.dbt.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7521818,
      "supported_languages": null
    },
    "macro.dbt_expectations._get_metric_expression": {
      "name": "_get_metric_expression",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
      "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
      "unique_id": "macro.dbt_expectations._get_metric_expression",
      "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": ["macro.dbt_expectations.log_natural"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.75657,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {
      "name": "test_expect_column_values_to_be_within_n_moving_stdevs",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
      "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs",
      "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7575474,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {
      "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
      "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql",
      "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs",
      "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.date_trunc",
          "macro.dbt_expectations.group_by",
          "macro.dbt_expectations._get_metric_expression",
          "macro.dbt.dateadd",
          "macro.dbt_date.now",
          "macro.dbt_expectations.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7599735,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {
      "name": "test_expect_column_unique_value_count_to_be_between",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between",
      "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_between"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.761075,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {
      "name": "test_expect_column_quantile_values_to_be_between",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between",
      "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.percentile_cont",
          "macro.dbt_expectations.expression_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.762152,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_min_to_be_between": {
      "name": "test_expect_column_min_to_be_between",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between",
      "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_between"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7631173,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {
      "name": "test_expect_column_most_common_value_to_be_in_set",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set",
      "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7649598,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {
      "name": "default__test_expect_column_most_common_value_to_be_in_set",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql",
      "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set",
      "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7662773,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {
      "name": "test_expect_column_distinct_values_to_equal_set",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set",
      "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.767491,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {
      "name": "test_expect_column_distinct_count_to_equal_other_table",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table",
      "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.test_equal_expression"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7685921,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {
      "name": "test_expect_column_distinct_count_to_equal",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal",
      "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_is_true"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7693746,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {
      "name": "test_expect_column_stdev_to_be_between",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between",
      "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7708547,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {
      "name": "default__test_expect_column_stdev_to_be_between",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql",
      "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between",
      "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_between"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.771477,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {
      "name": "test_expect_column_distinct_values_to_be_in_set",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set",
      "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.772755,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {
      "name": "test_expect_column_proportion_of_unique_values_to_be_between",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between",
      "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})*1.0/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_between"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7737887,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {
      "name": "test_expect_column_distinct_values_to_contain_set",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set",
      "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7749662,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_max_to_be_between": {
      "name": "test_expect_column_max_to_be_between",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between",
      "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_between"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7758853,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_sum_to_be_between": {
      "name": "test_expect_column_sum_to_be_between",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between",
      "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_between"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7771971,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_mean_to_be_between": {
      "name": "test_expect_column_mean_to_be_between",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between",
      "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_between"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7782505,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {
      "name": "test_expect_column_distinct_count_to_be_less_than",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than",
      "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_is_true"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.778987,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_median_to_be_between": {
      "name": "test_expect_column_median_to_be_between",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between",
      "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.median",
          "macro.dbt_expectations.expression_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7800586,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {
      "name": "test_expect_column_distinct_count_to_be_greater_than",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql",
      "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than",
      "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_is_true"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.780799,
      "supported_languages": null
    },
    "macro.dbt_expectations._list_intersect": {
      "name": "_list_intersect",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/_list_intersect.sql",
      "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql",
      "unique_id": "macro.dbt_expectations._list_intersect",
      "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7814271,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {
      "name": "test_expect_table_row_count_to_be_between",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql",
      "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between",
      "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.782434,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {
      "name": "default__test_expect_table_row_count_to_be_between",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql",
      "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between",
      "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_between"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7829704,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {
      "name": "test_expect_grouped_row_values_to_have_recent_data",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql",
      "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data",
      "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7852368,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {
      "name": "default__test_expect_grouped_row_values_to_have_recent_data",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql",
      "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data",
      "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.type_timestamp",
          "macro.dbt_date.now",
          "macro.dbt_expectations.group_by",
          "macro.dbt.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7868521,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {
      "name": "test_expect_table_row_count_to_equal_other_table",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql",
      "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table",
      "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7880123,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {
      "name": "default__test_expect_table_row_count_to_equal_other_table",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql",
      "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table",
      "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.test_equal_expression"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7885807,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_table_row_count_to_equal": {
      "name": "test_expect_table_row_count_to_equal",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql",
      "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal",
      "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_table_row_count_to_equal"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7893302,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {
      "name": "default__test_expect_table_row_count_to_equal",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql",
      "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal",
      "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.expression_is_true"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7897563,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {
      "name": "test_expect_table_aggregation_to_equal_other_table",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql",
      "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table",
      "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.test_equal_expression"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7906327,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {
      "name": "test_expect_table_columns_to_match_ordered_list",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql",
      "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list",
      "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations._get_column_list",
          "macro.dbt_expectations._list_intersect",
          "macro.dbt.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7925346,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {
      "name": "test_expect_table_columns_to_not_contain_set",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql",
      "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set",
      "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations._get_column_list",
          "macro.dbt_expectations._list_intersect",
          "macro.dbt.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7942815,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {
      "name": "test_expect_table_column_count_to_equal_other_table",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql",
      "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table",
      "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7950845,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_table_column_count_to_equal": {
      "name": "test_expect_table_column_count_to_equal",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql",
      "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal",
      "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7956245,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {
      "name": "test_expect_row_values_to_have_recent_data",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql",
      "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data",
      "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7968044,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {
      "name": "default__test_expect_row_values_to_have_recent_data",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql",
      "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data",
      "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.type_timestamp",
          "macro.dbt_date.now",
          "macro.dbt.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.7978475,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {
      "name": "test_expect_table_row_count_to_equal_other_table_times_factor",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql",
      "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor",
      "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.799045,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {
      "name": "default__test_expect_table_row_count_to_equal_other_table_times_factor",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql",
      "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor",
      "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.79953,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {
      "name": "test_expect_table_column_count_to_be_between",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql",
      "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between",
      "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8008666,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {
      "name": "test_expect_table_columns_to_contain_set",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql",
      "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set",
      "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations._get_column_list",
          "macro.dbt_expectations._list_intersect",
          "macro.dbt.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8024457,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_table_columns_to_match_set": {
      "name": "test_expect_table_columns_to_match_set",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql",
      "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set",
      "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations._get_column_list",
          "macro.dbt_expectations._list_intersect",
          "macro.dbt.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8041117,
      "supported_languages": null
    },
    "macro.dbt_expectations._get_column_list": {
      "name": "_get_column_list",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/_get_column_list.sql",
      "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql",
      "unique_id": "macro.dbt_expectations._get_column_list",
      "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8046744,
      "supported_languages": null
    },
    "macro.dbt_expectations.test_expect_column_to_exist": {
      "name": "test_expect_column_to_exist",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql",
      "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql",
      "unique_id": "macro.dbt_expectations.test_expect_column_to_exist",
      "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_expectations._get_column_list",
          "macro.dbt.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8062599,
      "supported_languages": null
    },
    "macro.dbt_expectations.rand": {
      "name": "rand",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/math/rand.sql",
      "original_file_path": "macros/math/rand.sql",
      "unique_id": "macro.dbt_expectations.rand",
      "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.duckdb__rand"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8066964,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__rand": {
      "name": "default__rand",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/math/rand.sql",
      "original_file_path": "macros/math/rand.sql",
      "unique_id": "macro.dbt_expectations.default__rand",
      "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8068142,
      "supported_languages": null
    },
    "macro.dbt_expectations.bigquery__rand": {
      "name": "bigquery__rand",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/math/rand.sql",
      "original_file_path": "macros/math/rand.sql",
      "unique_id": "macro.dbt_expectations.bigquery__rand",
      "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8069274,
      "supported_languages": null
    },
    "macro.dbt_expectations.snowflake__rand": {
      "name": "snowflake__rand",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/math/rand.sql",
      "original_file_path": "macros/math/rand.sql",
      "unique_id": "macro.dbt_expectations.snowflake__rand",
      "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8070545,
      "supported_languages": null
    },
    "macro.dbt_expectations.postgres__rand": {
      "name": "postgres__rand",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/math/rand.sql",
      "original_file_path": "macros/math/rand.sql",
      "unique_id": "macro.dbt_expectations.postgres__rand",
      "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8071673,
      "supported_languages": null
    },
    "macro.dbt_expectations.redshift__rand": {
      "name": "redshift__rand",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/math/rand.sql",
      "original_file_path": "macros/math/rand.sql",
      "unique_id": "macro.dbt_expectations.redshift__rand",
      "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.807295,
      "supported_languages": null
    },
    "macro.dbt_expectations.duckdb__rand": {
      "name": "duckdb__rand",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/math/rand.sql",
      "original_file_path": "macros/math/rand.sql",
      "unique_id": "macro.dbt_expectations.duckdb__rand",
      "macro_sql": "{% macro duckdb__rand() -%}\n\n    random()\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8074465,
      "supported_languages": null
    },
    "macro.dbt_expectations.percentile_cont": {
      "name": "percentile_cont",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/math/percentile_cont.sql",
      "original_file_path": "macros/math/percentile_cont.sql",
      "unique_id": "macro.dbt_expectations.percentile_cont",
      "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.default__quantile"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8082602,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__quantile": {
      "name": "default__quantile",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/math/percentile_cont.sql",
      "original_file_path": "macros/math/percentile_cont.sql",
      "unique_id": "macro.dbt_expectations.default__quantile",
      "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8085697,
      "supported_languages": null
    },
    "macro.dbt_expectations.bigquery__quantile": {
      "name": "bigquery__quantile",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/math/percentile_cont.sql",
      "original_file_path": "macros/math/percentile_cont.sql",
      "unique_id": "macro.dbt_expectations.bigquery__quantile",
      "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8088758,
      "supported_languages": null
    },
    "macro.dbt_expectations.spark__quantile": {
      "name": "spark__quantile",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/math/percentile_cont.sql",
      "original_file_path": "macros/math/percentile_cont.sql",
      "unique_id": "macro.dbt_expectations.spark__quantile",
      "macro_sql": "{% macro spark__quantile(field, quantile, partition) -%}\n    percentile({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.809218,
      "supported_languages": null
    },
    "macro.dbt_expectations.median": {
      "name": "median",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/math/median.sql",
      "original_file_path": "macros/math/median.sql",
      "unique_id": "macro.dbt_expectations.median",
      "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.percentile_cont"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8095133,
      "supported_languages": null
    },
    "macro.dbt_expectations.log_natural": {
      "name": "log_natural",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/math/log_natural.sql",
      "original_file_path": "macros/math/log_natural.sql",
      "unique_id": "macro.dbt_expectations.log_natural",
      "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.default__log_natural"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8099434,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__log_natural": {
      "name": "default__log_natural",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/math/log_natural.sql",
      "original_file_path": "macros/math/log_natural.sql",
      "unique_id": "macro.dbt_expectations.default__log_natural",
      "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8101017,
      "supported_languages": null
    },
    "macro.dbt_expectations.bigquery__log_natural": {
      "name": "bigquery__log_natural",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/math/log_natural.sql",
      "original_file_path": "macros/math/log_natural.sql",
      "unique_id": "macro.dbt_expectations.bigquery__log_natural",
      "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8102589,
      "supported_languages": null
    },
    "macro.dbt_expectations.snowflake__log_natural": {
      "name": "snowflake__log_natural",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/math/log_natural.sql",
      "original_file_path": "macros/math/log_natural.sql",
      "unique_id": "macro.dbt_expectations.snowflake__log_natural",
      "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8104107,
      "supported_languages": null
    },
    "macro.dbt_expectations.spark__log_natural": {
      "name": "spark__log_natural",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/math/log_natural.sql",
      "original_file_path": "macros/math/log_natural.sql",
      "unique_id": "macro.dbt_expectations.spark__log_natural",
      "macro_sql": "{% macro spark__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8105614,
      "supported_languages": null
    },
    "macro.dbt_expectations.regexp_instr": {
      "name": "regexp_instr",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/regex/regexp_instr.sql",
      "original_file_path": "macros/regex/regexp_instr.sql",
      "unique_id": "macro.dbt_expectations.regexp_instr",
      "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations.duckdb__regexp_instr"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.812384,
      "supported_languages": null
    },
    "macro.dbt_expectations.default__regexp_instr": {
      "name": "default__regexp_instr",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/regex/regexp_instr.sql",
      "original_file_path": "macros/regex/regexp_instr.sql",
      "unique_id": "macro.dbt_expectations.default__regexp_instr",
      "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8129337,
      "supported_languages": null
    },
    "macro.dbt_expectations.snowflake__regexp_instr": {
      "name": "snowflake__regexp_instr",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/regex/regexp_instr.sql",
      "original_file_path": "macros/regex/regexp_instr.sql",
      "unique_id": "macro.dbt_expectations.snowflake__regexp_instr",
      "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations._validate_flags"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8135989,
      "supported_languages": null
    },
    "macro.dbt_expectations.bigquery__regexp_instr": {
      "name": "bigquery__regexp_instr",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/regex/regexp_instr.sql",
      "original_file_path": "macros/regex/regexp_instr.sql",
      "unique_id": "macro.dbt_expectations.bigquery__regexp_instr",
      "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations._validate_re2_flags"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8143444,
      "supported_languages": null
    },
    "macro.dbt_expectations.postgres__regexp_instr": {
      "name": "postgres__regexp_instr",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/regex/regexp_instr.sql",
      "original_file_path": "macros/regex/regexp_instr.sql",
      "unique_id": "macro.dbt_expectations.postgres__regexp_instr",
      "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations._validate_flags"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8147984,
      "supported_languages": null
    },
    "macro.dbt_expectations.redshift__regexp_instr": {
      "name": "redshift__regexp_instr",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/regex/regexp_instr.sql",
      "original_file_path": "macros/regex/regexp_instr.sql",
      "unique_id": "macro.dbt_expectations.redshift__regexp_instr",
      "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations._validate_flags"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.815366,
      "supported_languages": null
    },
    "macro.dbt_expectations.duckdb__regexp_instr": {
      "name": "duckdb__regexp_instr",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/regex/regexp_instr.sql",
      "original_file_path": "macros/regex/regexp_instr.sql",
      "unique_id": "macro.dbt_expectations.duckdb__regexp_instr",
      "macro_sql": "{% macro duckdb__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')\n{% endmacro %}",
      "depends_on": {
        "macros": ["macro.dbt_expectations._validate_flags"]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8158097,
      "supported_languages": null
    },
    "macro.dbt_expectations.spark__regexp_instr": {
      "name": "spark__regexp_instr",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/regex/regexp_instr.sql",
      "original_file_path": "macros/regex/regexp_instr.sql",
      "unique_id": "macro.dbt_expectations.spark__regexp_instr",
      "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nlength(regexp_extract({{ source_value }}, '{{ regexp }}', 0))\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8162866,
      "supported_languages": null
    },
    "macro.dbt_expectations._validate_flags": {
      "name": "_validate_flags",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/regex/regexp_instr.sql",
      "original_file_path": "macros/regex/regexp_instr.sql",
      "unique_id": "macro.dbt_expectations._validate_flags",
      "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8169308,
      "supported_languages": null
    },
    "macro.dbt_expectations._validate_re2_flags": {
      "name": "_validate_re2_flags",
      "resource_type": "macro",
      "package_name": "dbt_expectations",
      "path": "macros/regex/regexp_instr.sql",
      "original_file_path": "macros/regex/regexp_instr.sql",
      "unique_id": "macro.dbt_expectations._validate_re2_flags",
      "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\"\n    ) }}\n{% endif %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1711458072.8176239,
      "supported_languages": null
    }
  },
  "docs": {
    "doc.my_nesso_project.staging_contact": {
      "name": "staging_contact",
      "resource_type": "doc",
      "package_name": "my_nesso_project",
      "path": "sources/staging/docs/contact.md",
      "original_file_path": "models/sources/staging/docs/contact.md",
      "unique_id": "doc.my_nesso_project.staging_contact",
      "block_contents": "## `contact` table\n\n### \ud83d\udcdd Details\n-\n\n### \ud83d\udcda External docs\n-"
    },
    "doc.my_nesso_project.staging_account": {
      "name": "staging_account",
      "resource_type": "doc",
      "package_name": "my_nesso_project",
      "path": "sources/staging/docs/account.md",
      "original_file_path": "models/sources/staging/docs/account.md",
      "unique_id": "doc.my_nesso_project.staging_account",
      "block_contents": "## `account` table\n\n### \ud83d\udcdd Details\n-\n\n### \ud83d\udcda External docs\n-"
    },
    "doc.dbt.__overview__": {
      "name": "__overview__",
      "resource_type": "doc",
      "package_name": "dbt",
      "path": "overview.md",
      "original_file_path": "docs/overview.md",
      "unique_id": "doc.dbt.__overview__",
      "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"
    }
  },
  "exposures": {},
  "metrics": {},
  "groups": {},
  "selectors": {},
  "disabled": {},
  "parent_map": {
    "model.my_nesso_project.int_contact": [
      "source.my_nesso_project.staging.contact"
    ],
    "model.my_nesso_project.int_account": [
      "source.my_nesso_project.staging.account"
    ],
    "model.my_nesso_project.contact": ["model.my_nesso_project.int_contact"],
    "model.my_nesso_project.account": ["model.my_nesso_project.int_account"],
    "test.my_nesso_project.unique_account__id_.e2119e8bab": [
      "model.my_nesso_project.account"
    ],
    "source.my_nesso_project.staging.contact": [],
    "source.my_nesso_project.staging.account": []
  },
  "child_map": {
    "model.my_nesso_project.int_contact": ["model.my_nesso_project.contact"],
    "model.my_nesso_project.int_account": ["model.my_nesso_project.account"],
    "model.my_nesso_project.contact": [],
    "model.my_nesso_project.account": [
      "test.my_nesso_project.unique_account__id_.e2119e8bab"
    ],
    "test.my_nesso_project.unique_account__id_.e2119e8bab": [],
    "source.my_nesso_project.staging.contact": [
      "model.my_nesso_project.int_contact"
    ],
    "source.my_nesso_project.staging.account": [
      "model.my_nesso_project.int_account"
    ]
  },
  "group_map": {},
  "saved_queries": {},
  "semantic_models": {}
}
