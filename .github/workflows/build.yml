on:
  push:
    branches:
      - "main"
      - "[0-9].[0-9]+.[0-9]+"
  pull_request:
    branches:
      - "main"
      - "[0-9].[0-9]+.[0-9]+"

env:
  IMAGE_NAME: viadot

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 3.8+. 3.9 should be supported by late 2021.
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 black isort pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        continue-on-error: false

      - name: Lint with flake8
        if: always()
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics --ignore=E203

      - name: Format imports with isort
        if: always()
        run: isort --profile black .

      - name: Format with black
        id: blackCheck
        if: always()
        run: black --check .
        continue-on-error: true

      - name: Commit Black changes to the pull request
        if: ${{ always() && steps.blackCheck.outcome == 'failure' }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          black .
          git checkout $GITHUB_HEAD_REF
          git commit -am "ðŸŽ¨ Format Python code with Black"
          git push

      - name: Test with pytest
        if: always()
        env:
          VIADOT_CONFIG_PATH: .config/credentials.json.template
        run: |
          pytest tests/unit

#   publish_docs:
#     needs: build
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push'
#     steps:
#       - name: Checkout Master
#         uses: actions/checkout@v2

#       - name: Set up Python 3.7
#         uses: actions/setup-python@v2
#         with:
#           python-version: 3.8

#       - name: Install MkDocs
#         run: |
#           python -m pip install --upgrade pip
#           pip install mkdocs-material mkdocstrings

#       - name: Publish docs to GitHub Pages
#         run: |
#           git pull
#           pip install -r requirements.txt
#           pip install -e .
#           mkdocs gh-deploy --force

  publish_docker:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: export DOCKER_BUILDKIT=1 && docker build . --file docker/Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          # Use Docker `dev` tag
          [[ "$VERSION" == [0-9].+([0-9]).+([0-9]) ]] && VERSION=dev
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
