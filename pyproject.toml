[project]
name = "viadot2"
version = "2.1.26"
description = "A simple data ingestion library to guide data flows from some places to other places."
authors = [
    { name = "acivitillo", email = "acivitillo@dyvenia.com" },
    { name = "trymzet", email = "mzawadzki@dyvenia.com" },
]
dependencies = [
    "pyodbc>=5.1.0",
    "visions>=0.6.4",
    "sharepy>=2.0.0",
    "sql-metadata>=2.11.0",
    "sendgrid>=6.11.0",
    "pydantic>=1.10.9,<1.11.0",
    "aiolimiter>=1.1.0",
    "trino==0.328.*",
    "imagehash>=4.2.1",
    "shapely>=1.8.0",
    "sqlalchemy==2.0.*",
    "lumacli>=0.1.2, <0.2.0",
    "pygit2>=1.13.3, <1.15.0",
    "openpyxl>=3.0.0",
    "prefect>=2.19.7, <3",
    "prefect-sqlalchemy>=0.4.3",
    "duckdb==1.0.0",
    "requests>=2.32.3",
    "prefect-github>=0.2.7",
    "o365>=2.0.36",
    # v10.1 is the maximum version compatible with awswrangler 2.x.
    "pyarrow>=10.0, <10.1.0",
    # numpy>=2.0 is not compatible with the old pyarrow v10.x.
    "numpy>=1.23.4, <2.0",
    "defusedxml>=0.7.1",
    "aiohttp>=3.10.5",
    "simple-salesforce==1.12.6",
    "pandas-gbq==0.23.1",
    "paramiko>=3.5.0",
    # awswrangler 2.x. depends on pandas 1.x.
    "pandas<2.0",
]
requires-python = ">=3.10"
readme = "README.md"

[project.optional-dependencies]
databricks = ["databricks-connect==11.3.*"]
azure = [
    "azure-core==1.30.1",
    "azure-storage-blob==12.20.0",
    "adlfs==2024.4.1",
    "azure-identity>=1.16.0",
    "dbt-sqlserver>=1.3, <1.8",
    "prefect-azure-dyvenia[key_vault]==0.1.0", # Adds Key Vault support to Prefect Azure; from https://github.com/trymzet/prefect-azure/tree/add_keyvault_auth
    "prefect_github",
]
aws = [
    "s3fs==2024.6.0",
    "boto3==1.34.106",
    "dbt-redshift>=1.3, <1.8",
    "minio>=7.0, <8.0",
    # We need to pin this to 2.x because some code depends on 2.x-only functionality.
    "awswrangler>=2.20.1, <3.0",
    "prefect-aws>=0.4.19",
]
sap = ["pyrfc==3.3.1"]

[tool.rye]
managed = true
dev-dependencies = [
    "Faker==13.12.1",
    "python-dotenv>=1.0.1",
    "coverage[toml]>=7.6.1",
    "aiohttp>=3.9.5",
    "loguru>=0.7.2",
    "mkdocs-material[imaging]>=9.4.3",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocs-include-dir-to-nav>=1.2.0",
    "neoteroi-mkdocs>=1.0.4",
    "mkdocs-jupyter>=0.24.4",
    "mkdocstrings[python]>=0.23.0",
    "mkdocs>=1.5.3",
    "mike>=1.1.2",
    "mkdocs-table-reader-plugin>=2.0.3",
    "mkdocs-include-markdown-plugin>=5.1.0",
    "mkdocs-git-revision-date-plugin>=0.3.2",
    "mkdocs-glightbox>=0.4.0",
    "pytest>=8.2.2",
    "ruff>=0.6.6",
    "pytest-asyncio>=0.23.8",
    "moto>=5.0.13",
    "pytest-mock>=3.14.0",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
log_format = "%(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
log_cli = true
log_level = "WARNING"
addopts = "--ignore=dbt_packages --import-mode=importlib"

[tool.coverage.run]
omit = ['tests/*']

[tool.coverage.report]
show_missing = true
fail_under = 30

[tool.ruff.lint]
# Last rule review: ruff 0.1.5
extend-select = [
    "I",    # isort
    "D",    # pydocstyle
    "W",    # pycodestyle (warnings)
    "B",    # flake8-bugbear
    "S",    # flake8-bandit
    "ANN",  # flake8-annotations
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "EM",   # flake8-errmsg
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "C901", # mccabe
    "FURB", # refurb
    "TRY",  # tryceratops
    # "PD", # https://docs.astral.sh/ruff/rules/#pandas-vet-pd
    "PL",  # pylint
    "RUF", # Ruff-specific rules
]

# Ignore rules known to be conflicting between the ruff linter and formatter.
# See https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
ignore = [
    "W191",
    "D206",
    "D300",
    "D101",
    "D417",
    "ANN101",
    "ANN102", # Type annotation for `cls`.
    "ANN002",
    "ANN003",
    "ANN202", # Return type annotation of private functions.
    "ANN204",
]

[tool.ruff.lint.extend-per-file-ignores]
# S101: use of assert error
# ANN201, ANN202, ANN001: missing typing
# D103: missing function docstrings
# D100: missing module docstring
# N802, N803: caps lock argument and function names (disabled to allow naming fixtures in all caps)
"tests/**" = [
    "S101",
    "ANN201",
    "ANN202",
    "ANN001",
    "D103",
    "D100",
    "N802",
    "N803",
    "B905",
    "D102",
    "PLR2004",
]


[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
force-sort-within-sections = true
lines-after-imports = 2

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.pylint]
max-args = 10

# For checking whether the docstrings match function signature.
# https://peps.python.org/pep-0727/ should basically solve this in Python 3.13.
[tool.pydoclint]
style = "google"
arg-type-hints-in-docstring = false
check-return-types = false
check-yield-types = false
allow-init-docstring = true

[tool.mypy]
strict = false
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true
exclude = "tests"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/viadot"]
